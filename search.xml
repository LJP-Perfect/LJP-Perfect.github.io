<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>服务外包国赛总结</title>
      <link href="/%E6%9C%8D%E5%8A%A1%E5%A4%96%E5%8C%85%E5%9B%BD%E8%B5%9B%E6%80%BB%E7%BB%93.html"/>
      <url>/%E6%9C%8D%E5%8A%A1%E5%A4%96%E5%8C%85%E5%9B%BD%E8%B5%9B%E6%80%BB%E7%BB%93.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://unpkg.com/meting@2.0.1/dist/Meting.min.js"></script><p>&emsp;大二下本来是参加聂老师的机器学习的项目的，但是感觉自己学的零零碎碎，到最后也没有做出什么像样的成果。大二那个暑假，开始选导师了，聂老师还特地为我们几个组员留了位置，当时我觉得还是得先学一门扎实的语言可能对我的未来会有帮助一点，很不好意思的拒绝了聂老师的名额，去参加了孙老师带队的服务外包比赛。<br>&emsp;那个学期，我才意识到原来我离保研虽然有挺大的距离，但是使劲够一够好像还能摸到边那种。也粗略的算了一下我的科研分，当时科研分还是0，必须得国赛、省赛都拿好名次，才能有机会加入保研队伍，感觉还可以再拼一拼。所以当时就向老师申请当国赛队长，然后就这么稀里糊涂地当上了队长。<br>&emsp;第一次就当了国赛的队长，一开始真的很紧张，跟组员都不认识，自己交际能力还有点差。老师一开始的任务就是调研，我们的赛题是跨境电商，其实电商平台的业务逻辑就已经是很复杂了，再加上跨境，就真的很复杂复杂，而且现实中也很难有真实企业可以调研，后来几乎全是靠网上找资料。老师一开始让我们关注海关这一方面，但是这些东西之前从没了解过，网上的资料其实也不是很多，就只有几个其他平台供我们参考。第一轮调研下来，发现海关上面的可处理部分很少，都是交给第三方来处理的，所以那一周到两周的时间基本上算是走错了方向。后面又陆陆续续的做了些功能方面的调研和参考借鉴，现在回过头去看之前做的功能图和用例图，暂且先不说图画的怎么样，内容确实很单薄，考虑的东西太少了。<br>&emsp;后面开始第二轮调研，我记得好像大二的几个同学从这里开始参与项目调研了，中间有个同学在这方面了解挺多的，讨论的东西就实际了很多，组员们讨论起来还是很积极的，跟我之前想的可能不太一样，这一轮调研下来收货还是很多的，基调也基本差不多定下来了。<br>&emsp;接下来好像在考试周的时候开始进行代码工程了，当时我们组是只有一个前端，而且这个前端同学那个时候会议比较多，看得到进展很少，而且我们这个项目页面其实也不少，工作量还是很大的，好在后面老师也给我们做了调整，多加了一个前端同学，这样进度上有了一些保证。寒假大概留校两周，讲实话，做下来的进度比我想的要慢一点，所以我给他们寒假制定的计划相对较多吧，大概五天两到三个页面，给我自己也定了要基本完成的计划。为了控制好进度，我也让他们三天汇报一次完成情况，组员也都很给力，基本上每一阶段的任务都可以完成。（插入schedule图片）<br>&emsp;我们那个群平时聊天频率很低，然而过年那天感觉都快炸了。那一天的聊天量估计是之前的总和差不多吧，哈哈哈。<br>&emsp;寒假16号回来的，感觉进度很是比较快的，离提交项目还有一个月左右，所以也没有那么紧张。这个时间点我的心态就没有那么紧张了，跟组员交流的状态比之前轻松了许多。这一阶段我的代码工作没有那么大，把重心放在了文档和前端页面上。在这之前，word对我来说真的就像记事本差不多，除了标题改一下，其他什么也都不会，但我当时自己一个人负责文档的时候没有发现这么多问题，因为有之前的模板在，其实问题超级多。幸亏组里有个写文档比较厉害的二年级同学，在这期间，也真的学了好多word技术包括制作PPT的技术，对我后面的文档之类的工作有很大的帮助。在此之前，我可能只关注代码和技术，对这些软实力可能并不是很注重。</p><p>&emsp;<code>待更</code></p>]]></content>
      
      <categories>
          
          <category> 竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 竞赛 </tag>
            
            <tag> 服务外包 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>First Vlog</title>
      <link href="/First_Vlog.html"/>
      <url>/First_Vlog.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://unpkg.com/meting@2.0.1/dist/Meting.min.js"></script><p>第一次参加志愿者活动，去杭州图书馆做了三小时。一路上“偷偷”拍了些素材，然后哐哐哐哐剪出了第一个Vlog。<br><a id="more"></a></p><video poster="http://freelee-vlog.oss-cn-beijing.aliyuncs.com/%E5%B0%81%E9%9D%A2.png" src="http://freelee-vlog.oss-cn-beijing.aliyuncs.com/2019_04_03_22_13_IMG_0939.MOV" style="max-height:100%;max-width:100%;display:block;margin-left:auto;margin-right:auto" controls loop preload="meta">Your browser does not support the video tag.</video>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vlog </tag>
            
            <tag> 杭州图书馆 </tag>
            
            <tag> 志愿者 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>计算机网络概述</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0.html"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://unpkg.com/meting@2.0.1/dist/Meting.min.js"></script><p>&emsp;两个主机相互连接，不仅需要链路和路由器/交换机，还需要一系列的协议，最重要的一个协议就是TCP/IP协议，否则数据无法正常互相传送。<br><br>&emsp;在网络的边缘，有很多接入ISP将无数个主机相连，首先是结构1：一个全球ISP与所有主机相连，但是开销太大难以实现。随后演化出了结构2：有数个区域ISP先与主机相连，再由根ISP将这些区域ISP连接起来，这个时候由于有多个全球ISP存在，出现了竞争现象。这个结构逐渐演化成更多级的类似结构，像树结构一样。在此基础上，为了使这个因特网成为网络的网络，引入了多宿和对等概念，多宿即一个ISP可以与多个ISP提供商相连，增强了网络的健壮性，如果有一个ISP提供商挂了，其他相连的ISP提供商仍然可以继续维持其运行。对等即在同一级别的ISP可以直接相连，在此前结构中，两个低级ISP要相连必须通过上一级ISP直至顶层ISP来实现，而对等则可以使两个同级别ISP直接相连，不仅提高了速度还减少了支付给上级ISP的费用，且对等ISP基本是不会相互结算的。结构5中加入了内容提供商网络，如谷歌，不仅可以与较低层ISP对等，也可与第一层ISP相连。<br><br>&emsp;接着是网络核心，主机是通过路由器实现交换报文，而报文可以有两种方式进行转发。一种是分组交换，另一种是电路交换。分组交换就是将报文分块形成分组，然后进行交换，有点类似于流水线。分组交换机中多数使用存储转发机制，即一个分组全部到达交换机后才可以向外转发，因为交换机先缓存分组，这也就会出现一个现象，排队，就是分组的发送速度大于交换机发出的速度。一个分组通过由N条（N-1个交换机）速率均为R的链路组成的路径，所需时间为N<em>（L/R），若有p个分组则需要（N+P-1）</em>（L/R）[分组大小为L比特]。在转发的时候，路由器需要准确的将分组转发到对应的输出链路，这时就要通过转发表来实现，交换机可以根据分组的目的地址索引转发表来找到输出链路，那么如何实现转发表机制呢？路由选择协议来实现这一功能。<br><br>&emsp;另一个中报文交换方式为电路交换，分组交换时不需要预留资源和缓存，但是电路交换则必须要预留。电路交换好比打电话，只有两方都接通才能进行通话，这里就会造成一种资源浪费，如果对方接通了但就放在那什么也没说，那么这部分资源不久闲置了嘛，导致了分组交换在很多领域取代了电路交换。以前的宽带都是从电话线接出来的，是因为使用了频分复用FDM，一部分频段分给电话，一部分分给网络链路。对应的还有时分复用方式TDM，即将一段时间分成几段，比如说4段，那么第一段就是给用户1来使用，第二段给用户2来使用，这就会造成很大的浪费，但是未搞懂为什么时分复用中传输时间与链路数量无关？？？总的来说，分组交换更加简单、有效、成本更低。<br><br>&emsp;时延除了传输时延，还有处理时延（在交换机、源处理机检查处理报文的时间）、传播时延（报文在链路上传播的时间）、排队时延。在排队时延里引入了一个概念流量强度La/R（报文由L比特组成，a表示分组到达队列的平均速率pkt/s，R是传输速率bps/s）。若流量强度大于1，就会造成排队现象，进一步若路由器的队列已满，之后来的分组都会被丢弃也就是丢包。<br><br>&emsp;除了时延和丢包，吞吐量也是评价计算机性能的一个重要指标。吞吐量又分为瞬时吞吐量和平均吞吐量，例如传输文件更关注平均吞吐量，而视频通话则更依赖瞬时吞吐量。如图这种情况则会出现瓶颈链路的概念，即吞吐量为min{Rc，Rs}<br><img src="/images/Compute Network/genelization/cs.png" alt=""><br>&emsp;然后是分层协议，分层有一个好处，就是该层使用下一层提供的服务，并向上一层提供服务，具有结构化和概念化的优点，这种模块化方式可以在修改一层情况下不需要修改其他层。各层通过协议与对应的层进行联系，各层的所有协议被成为协议栈。协议栈有两种形式：五层协议栈和七层ISO OSI参考模型。五层协议栈中分别为应用层、链路层、网络层、运输层、物理层。其中应用层是网络应用程序及其协议所在的地方，例如HTTP、FTP、SMTP、DNS。运输层在应用程序之间传送应用层报文，有两个协议为TCP和UDP，其中TCP提供了面向连接的服务，运输层报文成为报文段。网络层的IP协议定义了数据报中各个字段以及端系统和路由器如何作用于这些字段，网络层还具有路由选择协议。为了将分组从一个结点移动到下一个结点，需使用链路层的服务，传到下一个节点后，链路层将数据报上传给网络层，并且在链路层的分组称为帧。物理层的任务是将该帧中的一个一个比特移动到下一个结点，与该链路的实际传输媒体相关。<br><img src="/images/Compute Network/genelization/osi.png" alt=""><br>&emsp;OSI七层协议栈，在应用层下添加了表示层和会话层。表示层的作用是使通信的应用程序能够解释交换数据的含义，这些服务包括数据压缩、加密、描述。会话层提供了数据交换定界和同步功能，包括了建立检查点和恢复方案的方法。而后的五层协议减少的这两层留给了应用程序开发者来处理，若服务重要则在应用程序中构建该服务。<br><img src="/images/Compute Network/genelization/protocol_stack.png" alt=""><br>&emsp;还有一个重要的概念：封装。上一层的数据信息向下传作为有效载荷字段和首部字段组成下一层的数据信息。从应用层到物理层分别为：应用层报文-》运输层报文段-》网络数据报-》链路层帧。</p>]]></content>
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>你好，陈同学</title>
      <link href="/Nicetomeetyou.html"/>
      <url>/Nicetomeetyou.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://unpkg.com/meting@2.0.1/dist/Meting.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微服务项目初步搭建</title>
      <link href="/cloud.html"/>
      <url>/cloud.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://unpkg.com/meting@2.0.1/dist/Meting.min.js"></script><p>一个初步的微服务项目，docker部署。基于SpringBoot和SpringCloud整合Shiro、JWT、zuul、Eureka、docker、nginx等技术。</p><a id="more"></a><h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><p>这个小项目目前初步搭建好了微服务脚手架的一部分。使用shiro+jwt构建鉴权体系，spring cloud zuul做API网关进行路由转发，nginx通过反向代理对网关进行高可用和负载均衡和静态化，Eureka进行服务治理（Feign进行服务调用）。<a href="https://github.com/LJP-Perfect/service-outsourcing/tree/master/cloud-app" target="_blank" rel="noopener">源码地址</a></p><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><ul><li>SpringBoot 2.0.4.RELEASE</li><li>SpringCloud Finchley.M9</li><li>Shiro 1.4.0</li><li>JWT 3.4.0</li><li>Maven 3.5.4</li><li>Jdk 8</li></ul><h2 id="项目关键"><a href="#项目关键" class="headerlink" title="项目关键"></a>项目关键</h2><p>项目使用shiro+jwt的鉴权机制，通过JWTFilter将jwt整合到shiro，JWTToken存放用户名。</p><p><code>JWTFilter部分代码</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isAccessAllowed</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span> ServletResponse response<span class="token punctuation">,</span> Object mappedValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isLoginAttempt</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//检查token</span>                <span class="token function">executeLogin</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//token错误</span>                <span class="token function">responseError</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//请求头不存在Token，可能是未登录时（游客）的访问状态，则无需检查token</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>shiro中添加JWTFilter，对所有之前（其他过滤器）未匹配到的请求进行过滤。</p><p><code>ShiroConfig部分代码</code></p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ShiroFilterFactoryBean <span class="token function">shiroFilter</span><span class="token punctuation">(</span>SecurityManager securityManager<span class="token punctuation">)</span><span class="token punctuation">{</span>        ShiroFilterFactoryBean filterFactoryBean<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ShiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Filter<span class="token operator">></span> filterMap<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"jwt"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">JWTFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterFactoryBean<span class="token punctuation">.</span><span class="token function">setFilters</span><span class="token punctuation">(</span>filterMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        filterFactoryBean<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>securityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> filterChainDefinitionMap<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterChainDefinitionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/logout"</span><span class="token punctuation">,</span><span class="token string">"anon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterChainDefinitionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span><span class="token string">"anon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterChainDefinitionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span><span class="token string">"jwt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterFactoryBean<span class="token punctuation">.</span><span class="token function">setLoginUrl</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterFactoryBean<span class="token punctuation">.</span><span class="token function">setSuccessUrl</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterFactoryBean<span class="token punctuation">.</span><span class="token function">setUnauthorizedUrl</span><span class="token punctuation">(</span><span class="token string">"/403"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterFactoryBean<span class="token punctuation">.</span><span class="token function">setFilterChainDefinitionMap</span><span class="token punctuation">(</span>filterChainDefinitionMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> filterFactoryBean<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="项目出现的BUG"><a href="#项目出现的BUG" class="headerlink" title="项目出现的BUG"></a>项目出现的BUG</h2><h4 id="打包时，报缺少公共模块jar包的错误。"><a href="#打包时，报缺少公共模块jar包的错误。" class="headerlink" title="打包时，报缺少公共模块jar包的错误。"></a>打包时，报缺少公共模块jar包的错误。</h4><p>公共模块不需要打包，所以不需要添加maven插件，否则会报错，因为其他模块在打包的时候会自动添加依赖进去，如果这里打包了，其他的模块就找不到该依赖了。</p><p>父项目添加springboot的maven插件打包时会报Unable to find main class。</p><pre class=" language-verilog"><code class="language-verilog"><span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> Failed to execute goal org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">:</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>maven<span class="token operator">-</span>plugin<span class="token punctuation">:</span><span class="token number">2.0</span><span class="token punctuation">.</span><span class="token number">4</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">:</span>repackage <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">)</span> on project common<span class="token operator">-</span>util<span class="token punctuation">:</span> Execution <span class="token keyword">default</span> of goal org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">:</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>maven<span class="token operator">-</span>plugin<span class="token punctuation">:</span><span class="token number">2.0</span><span class="token punctuation">.</span><span class="token number">4</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">:</span>repackage failed<span class="token punctuation">:</span> Unable to find main <span class="token keyword">class</span></code></pre><p>改成以下的编译和测试的maven插件，项目可以打包成功。这个问题还没有找到合理的解释方案，我想可能是因为spring-boot-maven-plugin要打包成可执行jar包，而公共模块里是没有启动类（main class）的，所以使用此插件会报错。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>${java.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>${java.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-surefire-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.19.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>skipTests</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>skipTests</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--默认关掉单元测试 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><p>子模块的依赖中加入docker-maven-plugin的插件。此插件可以快速的打包镜像、上传镜像等。</p><p>最好加入spring-boot-maven-plugin插件，我记得打包过程中出现过问题就是缺少这个插件的原因（好像是空指针异常，记不太清了）。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.spotify<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>docker-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>build-image<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>build<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>imageName</span><span class="token punctuation">></span></span>${project.parent.artifactId}/${project.artifactId}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>imageName</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dockerHost</span><span class="token punctuation">></span></span> http://192.168.43.2:2375<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dockerHost</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dockerDirectory</span><span class="token punctuation">></span></span>${project.basedir}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dockerDirectory</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>targetPath</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>targetPath</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>${project.build.directory}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>${project.build.finalName}.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.httpcomponents<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>httpclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.5.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.activation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>activation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><h4 id="docker不能使用localhost"><a href="#docker不能使用localhost" class="headerlink" title="docker不能使用localhost"></a>docker不能使用localhost</h4><p>因为 bridge 是 Docker 默认的网络模式，换句话说，我一个 host 上的各个 container 从 docker 获取的 IP 都是不一样的（在主机编译部署后大家都是 localhost，但是在 docker 里面情况就不一样了）。解决方法利用docker的主机名，为eureka的容器配置一个主机名（任意即可），比如eureka-server。</p><p>eureka-server模块配置文件</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka<span class="token punctuation">-</span>server<span class="token punctuation">:</span>8000/eureka/</code></pre><p>eureka-client模块配置文件</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka<span class="token punctuation">-</span>server<span class="token punctuation">:</span>8000/eureka/</code></pre><h4 id="整合shiro出现No-bean-of-type-‘org-apache-shiro-realm"><a href="#整合shiro出现No-bean-of-type-‘org-apache-shiro-realm" class="headerlink" title="整合shiro出现No bean of type ‘org.apache.shiro.realm"></a>整合shiro出现No bean of type ‘org.apache.shiro.realm</h4><p>本来是把shiro的一些配置和JWTToken类这些放到公共模块中。但是一直报如上错误，提示我创建shiro.ini，但是这样的话采用硬编码方式把认证授权信息写在INI文件中,可维护性差。没办法，只能把shiro有关的配置和LoginController放在一个模块中。</p><h4 id="zuul会过滤敏感头部，导致丢失token。"><a href="#zuul会过滤敏感头部，导致丢失token。" class="headerlink" title="zuul会过滤敏感头部，导致丢失token。"></a>zuul会过滤敏感头部，导致丢失token。</h4><p>zuul会过滤掉Cookie, Set-Cookie, Authorization的header信息，导致jwt的token在转发时丢失。</p><p>在<code>ZuulProperties</code>源码中可以看到默认的sensitiveHeaders如下。（如果头部出现含有sensitiveHeaders的信息，就不会添加到转发的请求中）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> sensitiveHeaders <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Cookie"</span><span class="token punctuation">,</span> <span class="token string">"Set-Cookie"</span><span class="token punctuation">,</span> <span class="token string">"Authorization"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>只要修改zuul的sensitiveHeaders配置即可。设置为空，设置为空，设置为空。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">zuul</span><span class="token punctuation">:</span>  <span class="token key atrule">sensitive-headers</span><span class="token punctuation">:</span> </code></pre><h4 id="nginx的http模块。"><a href="#nginx的http模块。" class="headerlink" title="nginx的http模块。"></a>nginx的http模块。</h4><p>我只要在nginx配置文件加入<code>http{}</code>，就会报<code>“http&quot; directive is not allowed here in /etc/nginx/conf.d/app.conf</code>错误。真的是个谜之错误，-_-。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/Ser_Bad/article/details/78433340" target="_blank" rel="noopener">Spirng boot maven多模块打包踩坑</a></p><p><a href="http://blog.didispace.com/spring-cloud-zuul-cookie-redirect/" target="_blank" rel="noopener">Spring Cloud实战小贴士：Zuul处理Cookie和重定向</a></p><p><a href="https://gitee.com/wjc666/micro-service" target="_blank" rel="noopener">gitee项目 micro-service</a></p><p><a href="https://www.cnblogs.com/zhikou/p/8629851.html" target="_blank" rel="noopener"><a href="https://www.cnblogs.com/zhikou/p/8629851.html" target="_blank" rel="noopener">exception is feign.RetryableException: Connection refused (Connection refused) executing GET http：//……</a></a></p>]]></content>
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Eureka </tag>
            
            <tag> SpringCloud </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Shiro </tag>
            
            <tag> Nginx </tag>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我的技能树（惨不忍睹）</title>
      <link href="/freetalk.html"/>
      <url>/freetalk.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://unpkg.com/meting@2.0.1/dist/Meting.min.js"></script><p>网上有很多文章都有这张图片，名为“2018Web开发需要掌握的技能”，正好自己在学习这一方面，所以想要看看自己都会点什么。</p><p><img src="\images\freetalk\skilltree\skilltree.jpg" alt=""></p><p>&nbsp;</p><ul><li><p>Java <code>多线程掌握比较差、JVM还没了解过</code></p><hr></li><li><p>WebServer</p><ul><li>Nginx <code>看到它只知道负载均衡，稍微有点了解</code></li></ul></li><li><p>RESTful APIs <code>据我所知使用GET、PUT、DELETE、POST请求方式来简化API</code></p></li><li>AUthentication<ul><li>JWT <code>了解过一点，原理不是很懂，未实践过</code></li><li>OAuth 2.0 <code>未了解过</code>❌</li></ul></li><li>Docker <code>基本部署可以实现</code></li></ul><hr><ul><li>Message Brokers<ul><li>RabbitMQ <code>未了解过</code>❌</li><li>Apache Kafka <code>未了解过</code>❌</li></ul></li></ul><hr><ul><li>Caching<ul><li>Memcached <code>未了解过</code>❌</li><li>Redis <code>可以实现缓存，但是数据结构学了就忘了</code></li></ul></li><li>Databases<ul><li>MySQL <code>Sql优化不会</code></li><li>MongoDB <code>未了解过❌</code></li></ul></li></ul><hr><ul><li>ElasticSearch <code>未了解过</code>❌</li><li>GOF Design Patterns <code>只会单例模式、工厂模式好像又忘了</code></li><li>Architectural Patterns <code>未了解过❌</code></li><li>Give DDD a shot <code>未了解过</code>❌</li><li>Learn different testing techniques <code>了解过Mocking，其他不知道</code></li></ul><p>&nbsp;</p><p>列出来后发现自己都停留在无脑调用接口，只会表面，对于深层的实现和原理都不怎么懂。而且有这么多叉叉都没了解过。</p><p>少年不能浪费时间了，快醒醒啊！争取把这些都变成绿勾勾！！！</p>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技能树 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>github代码上传</title>
      <link href="/github%E4%BB%A3%E7%A0%81%E4%B8%8A%E4%BC%A0.html"/>
      <url>/github%E4%BB%A3%E7%A0%81%E4%B8%8A%E4%BC%A0.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://unpkg.com/meting@2.0.1/dist/Meting.min.js"></script><p><code>$ git init</code><br><code>$ git add .</code><br><code>$ git commit -m &quot;first commit&quot;</code><br><code>$ git remote add origin https://github.com/yourName/yourRepo.git</code><br><code>$ git push -u origin master</code></p><hr><p>#上传多个项目到一个仓库<br><code>$ git add .</code><br><code>$ git commit -m &quot;second commit&quot;</code><br><code>$ git push -u origin master</code></p><hr><p>#push失败,本地与仓库不一致，先pull下来<br><code>$ git pull --rebase origin master</code><br><code>$ git push -u origin master</code></p>]]></content>
      
      <categories>
          
          <category> 技术杂烩 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>记一次惨痛的Docker部署SpringBoot经历</title>
      <link href="/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%83%A8%E7%97%9B%E7%9A%84Docker%E9%83%A8%E7%BD%B2SpringBoot.html"/>
      <url>/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%83%A8%E7%97%9B%E7%9A%84Docker%E9%83%A8%E7%BD%B2SpringBoot.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://unpkg.com/meting@2.0.1/dist/Meting.min.js"></script><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>SpringBoot 2.0.4.RELEASE</li></ul><ul><li>Docker 18.06.1-ce</li></ul><ul><li>Ubuntu 16.04</li><li>Jdk 8</li><li>Maven 3.5.4</li></ul><h3 id="搭建SpringBoot项目"><a href="#搭建SpringBoot项目" class="headerlink" title="搭建SpringBoot项目"></a>搭建SpringBoot项目</h3><p>导入web依赖，编写一个简单的Controller。然后添加Docker支持。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--docker maven 插件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.spotify<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>docker-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>imageName</span><span class="token punctuation">></span></span>${project.artifactId}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>imageName</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--注意 修改成远程服务器地址--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dockerHost</span><span class="token punctuation">></span></span> http://192.168.43.2:2375<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dockerHost</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dockerDirectory</span><span class="token punctuation">></span></span>src/main/docker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dockerDirectory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>targetPath</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>targetPath</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>${project.build.directory}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>${project.build.finalName}.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.httpcomponents<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>httpclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.5.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.activation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>activation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span></code></pre><p>需要<strong>javax.activation</strong>依赖，不然会报java.lang.ClassNotFoundException: javax.activation.DataSource错误。</p><p>环境配置好后，编写Dockerfile</p><pre class=" language-dockerfile"><code class="language-dockerfile">FROM openjdk:8-jdk-alpineVOLUME /opt/commonADD dockerdemo-1.0.jar app.jarENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]EXPOSE 8080</code></pre><ul><li>VOLUME ，VOLUME 指向了一个<code>/opt/common</code>的目录，由于 Spring Boot 使用内置的Tomcat容器，Tomcat 默认使用<code>/opt/common</code>作为工作目录。这个命令的效果是：在宿主机的<code>/var/lib/docker</code>目录下创建一个临时文件并把它链接到容器中的<code>/opt/common</code>目录</li><li>ADD ，拷贝文件并且重命名</li><li>ENTRYPOINT ，为了缩短 Tomcat 的启动时间，添加<code>java.security.egd</code>的系统属性指向<code>/dev/urandom</code>作为 ENTRYPOINT</li></ul><p>这里可以安装一款Docker integration插件，可以构建镜像，创建仓库，上传镜像等。安装这个插件后，Dockerfile文件就能显示语法了。其他功能暂时没用到。</p><h3 id="配置虚拟机环境"><a href="#配置虚拟机环境" class="headerlink" title="配置虚拟机环境"></a>配置虚拟机环境</h3><h4 id="配置Jdk-8"><a href="#配置Jdk-8" class="headerlink" title="配置Jdk 8"></a>配置Jdk 8</h4><pre><code> $ sudo apt-get update $ sudo apt-get install openjdk-8-jdk</code></pre><p>使用java -version查看是否安装成功。然后配置jdk环境变量</p><pre><code>sudo gedit /etc/profileexport JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64export JRE_HOME=${JAVA_HOME}/jre export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib export PATH=${JAVA_HOME}/bin:$PATHsource /etc/profile</code></pre><h4 id="配置Maven"><a href="#配置Maven" class="headerlink" title="配置Maven"></a>配置Maven</h4><p>下载：<code>http://mirrors.shu.edu.cn/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz</code></p><pre><code>## 解压tar vxf apache-maven-3.5.4-bin.tar.gz## 移动mv apache-maven-3.5.4 /usr/local/maven3</code></pre><p>仍然是在/etc/profile中配置环境变量</p><pre><code>sudo gedit /etc/profileMAVEN_HOME=/usr/local/maven3export MAVEN_HOMEexport PATH=${PATH}:${MAVEN_HOME}/binsource /etc/profile</code></pre><h3 id="构建、上传、运行镜像"><a href="#构建、上传、运行镜像" class="headerlink" title="构建、上传、运行镜像"></a>构建、上传、运行镜像</h3><p><img src="/images/Docker/dockerbuildPlugin.JPG" alt=""></p><p>使用docker build插件可以快速构建。也可以在Terminal输入以下命令进行构建。</p><pre><code>mvn package docker:build</code></pre><p>构建成功后，就可以在docker中使用docker images查看镜像。</p><pre><code>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZEdockerdemo          latest              2d6bfc475fa7        44 hours ago        119MB</code></pre><p>运行该镜像</p><pre><code>docker run -p 8080:8080 -t dockerdemo</code></pre><p>运行成功后测试Controller是否成功即可。</p><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><h5 id="1、docker构建镜像报错org-apache-http-conn-ConnectTimeoutException-contact-timed-out"><a href="#1、docker构建镜像报错org-apache-http-conn-ConnectTimeoutException-contact-timed-out" class="headerlink" title="1、docker构建镜像报错org.apache.http.conn.ConnectTimeoutException:contact timed out"></a>1、docker构建镜像报错org.apache.http.conn.ConnectTimeoutException:contact timed out</h5><p>如果之前没有配置过Docker的远程访问，那么应该是这个原因。</p><p>开启API访问服务：</p><pre><code>$ systemctl show --property=FragmentPath dockerFragmentPath=/lib/systemd/system/docker.service $ sudo gedit /lib/systemd/system/docker.service#修改ExecStart=/usr/bin/dockerd -H fd:// 为 ExecStart=/usr/bin/dockerd -H unix:///var/run/docker.sock -H tcp://0.0.0.0:2375#重载Docker$ sudo systemctl daemon-reload$ sudo systemctl restart docker docker -H tcp://127.0.0.1:2376 versionClient: Version:           18.06.1-ce API version:       1.38 Go version:        go1.10.3 Git commit:        e68fc7a Built:             Tue Aug 21 17:24:56 2018 OS/Arch:           linux/amd64 Experimental:      falseServer: Engine:  Version:          18.06.1-ce  API version:      1.38 (minimum version 1.12)  Go version:       go1.10.3  Git commit:       e68fc7a  Built:            Tue Aug 21 17:23:21 2018  OS/Arch:          linux/amd64  Experimental:     false</code></pre><p>这样就说明API远程访问已开启。也可通过以下方法验证</p><pre><code>ps -ef | grep docker</code></pre><p><img src="/images/Docker/docker_port.JPG" alt=""></p><p>可以看到2375端口已经在监听了。再进行测试查看是否成功。</p><p>但是还是报了这个错误，网上找了很多没有类似问题，最后找到一个有类似问题的，不过他是将服务器部署到阿里云上的，是因为阿里云控制台里的安全组没有开启2375端口。<a href="https://blog.csdn.net/laravelshao/article/details/79773895" target="_blank" rel="noopener">Docker Maven插件本地构建镜像发布至远程服务器</a></p><p>但是我这个是本地的，所以没有效果。只好重装了Ubuntu，意外的成功了，猜想可能是之前的Ubuntu或Docker的配置导致了这个错误。</p><h4 id="2、报错java-lang-ClassNotFoundException-javax-activation-DataSource"><a href="#2、报错java-lang-ClassNotFoundException-javax-activation-DataSource" class="headerlink" title="2、报错java.lang.ClassNotFoundException: javax.activation.DataSource"></a>2、报错java.lang.ClassNotFoundException: javax.activation.DataSource</h4><p>是因为docker maven插件缺少javax.activation依赖，加入以下依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.activation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>activation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="3、报错Add-failed-stat-ver-lib-docker-tmp-docker-builderXXXXXX-no-such-file-or-dir"><a href="#3、报错Add-failed-stat-ver-lib-docker-tmp-docker-builderXXXXXX-no-such-file-or-dir" class="headerlink" title="3、报错Add failed: stat /ver/lib/docker/tmp/docker-builderXXXXXX:no such file or dir"></a>3、报错Add failed: stat /ver/lib/docker/tmp/docker-builderXXXXXX:no such file or dir</h4><p>报这个错误是因为打包名字不一致，pom.xml的artifactId与Dockerfile镜像名要一致。</p><p>&nbsp;</p><p><strong>要是怎么样都不行，重装吧少年!</strong></p><p>&nbsp;</p><blockquote><p>参考资料</p></blockquote><p><a href="http://www.ityouknow.com/springboot/2018/03/19/spring-boot-docker.html" target="_blank" rel="noopener">Spring Boot 2.0(四)：使用 Docker 部署 Spring Boot</a></p><p><a href="http://blog.jeffreysun.net/2018/03/27/docker%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/" target="_blank" rel="noopener">docker开启远程访问</a></p><p><a href="https://blog.csdn.net/laravelshao/article/details/79773895" target="_blank" rel="noopener">Docker Maven插件本地构建镜像发布至远程服务器</a></p><p><a href="https://blog.csdn.net/sumlyl/article/details/80710944" target="_blank" rel="noopener">4、为什么使用docker?之Docker建立远程连接</a></p>]]></content>
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Redis作为Mybatis辅存</title>
      <link href="/redis%E4%BD%9C%E4%B8%BA%E8%BE%85%E5%AD%98.html"/>
      <url>/redis%E4%BD%9C%E4%B8%BA%E8%BE%85%E5%AD%98.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://unpkg.com/meting@2.0.1/dist/Meting.min.js"></script><h3 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h3><blockquote><p>个人思考</p></blockquote><p>Q1：为什么要用redis作为mysql的辅存？</p><p>A：与数据库的交互无非读和写。在读这一方面，数据的访问一般来说都不是平均的，有些数据经常被访问称为“热数据”，还有一些不会经常访问到的则称为冷数据。如果要在这里优化，第一感觉肯定是去优化热数据的读取速度，和计算机组成原理学的缓存一样，越靠近CPU的Cache读写速度越快，所以我觉得在读取时可以先去访问redis，没有再去数据库里查找。</p><p>然后就是写这一方面，可能瞬间写的压力非常大，造成拥挤甚至可能系统出错。因为在写的速度方面redis应该是优于直接写入数据库的，所以可以先写入redis，然后再慢慢写入数据库。这样一来，对写的压力减少了一些，但是数据的同步问题出现了。</p><p>Q2：那为什么选择redis还不是其他的工具？</p><p>A：emm…我觉得这个问题只能先留着吧，其他也都没学过。</p><p><em>注：以上纯属个人想法，不一定都是正确的。</em></p><blockquote><p>查阅一番资料后</p></blockquote><p>因为redis是存储在内存中，mysql是存储在硬盘中，redis的读取速度比直接读取mysql快很多，所以一般用于热数据的读取，不适合数据高一致性（直接操作Mysql，就不要考虑用redis速度快的特性来写数据）。如果使用redis作为缓存的话，先去redis中判断数据是否存在，如果存在，则直接返回redis中的数据。不存在的话，就会去数据库中读取并缓存到redis中。</p><p>同时Redis支持数据的持久化，服务器关闭重启后可以重新加载。有两种持久化方式：快照（RDB文件）和追加式文件（AOF文件）。RDB持久化方式会在一个特定的间隔保存那个时间点的一个数据快照，AOF方式会记录每一个写操作。在服务启动时，这些记录会被逐条执行重建原来的数据。（默认情况下，AOF被优先使用）</p><p>Redis自动进行热数据缓存：方案一、设置ExpiredTime，如果访问频繁的数据生存时间会一直更新，冷数据如果不再次访问的话，就会在指定时间内过期清除掉，间接实现热数据缓存。</p><h3 id="两种方式实现Redis缓存"><a href="#两种方式实现Redis缓存" class="headerlink" title="两种方式实现Redis缓存"></a>两种方式实现Redis缓存</h3><h4 id="一、全局实现Redis缓存"><a href="#一、全局实现Redis缓存" class="headerlink" title="一、全局实现Redis缓存"></a>一、全局实现Redis缓存</h4><p>1、导入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>2、重写org.apache.ibatis.cache.Cache</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用redisTemplate的对应方法重写Cache的方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisCache</span> <span class="token keyword">implements</span> <span class="token class-name">Cache</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>RedisCache<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//实例一个读写锁</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ReadWriteLock readWriteLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String id<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// cache instance id</span>    <span class="token keyword">private</span> RedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> EXPIRE_TIME_IN_MINUTES <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// redis过期时间</span>    <span class="token comment" spellcheck="true">//必须要有一个初始化id的构造器</span>    <span class="token keyword">public</span> <span class="token function">RedisCache</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Cache instances require an ID"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Put query result to redis     *     * @param key     * @param value     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">putObject</span><span class="token punctuation">(</span>Object key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            RedisTemplate redisTemplate <span class="token operator">=</span> <span class="token function">getRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ValueOperations opsForValue <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            opsForValue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> EXPIRE_TIME_IN_MINUTES<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">;</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Put query result to redis"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Redis put failed"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Get cached query result from redis     *      * @param key     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">getObject</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            RedisTemplate redisTemplate <span class="token operator">=</span> <span class="token function">getRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ValueOperations opsForValue <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Get cached query result from redis"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> opsForValue<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Redis get failed, fail over to db"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Remove cached query result from redis     *     * @param key     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">removeObject</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            RedisTemplate redisTemplate <span class="token operator">=</span> <span class="token function">getRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Remove cached query result from redis"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Redis remove failed"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Clears this cache instance     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        RedisTemplate redisTemplate <span class="token operator">=</span> <span class="token function">getRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span>RedisCallback<span class="token punctuation">)</span> connection <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            connection<span class="token punctuation">.</span><span class="token function">flushDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Clear all the cached query result from redis"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * This method is not used     *     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ReadWriteLock <span class="token function">getReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> readWriteLock<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> RedisTemplate <span class="token function">getRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>redisTemplate <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//若redisTemplate不存在，则从ApplicaitonContext取出redisTemplate</span>            redisTemplate <span class="token operator">=</span> SpringContextHolder<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"redisTemplate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3、CMS层省略不放进文章里了，开始测试</p><p>第一次根据UserName查询User</p><p><img src="/images/SpringBoot/redis/redisHit0.JPG" alt=""></p><p>可以看到Cache Hit Ratio 为0，说明在Redis中没有对应的缓存，所以从数据库中查询数据。</p><p>在RedisDesktopManager可以看到已经存入一个序列化数据。</p><p><img src="/images/SpringBoot/redis/redisData.JPG" alt=""></p><p>第二次查询就可以看到Cache Hit Ratio为1.0，并且没有查询数据库的日志消息，说明此次查询是从Redis获取的数据。</p><p><img src="/images/SpringBoot/redis/redisHit1.JPG" alt=""></p><h4 id="二、使用注解来使用Redis缓存"><a href="#二、使用注解来使用Redis缓存" class="headerlink" title="二、使用注解来使用Redis缓存"></a>二、使用注解来使用Redis缓存</h4><p>1、构造fastjson序列化器</p><p>需要另外导入fastjson依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.31<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>配置FastJsonRedisSerializer</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FastJsonRedisSerializer</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">RedisSerializer</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Charset DEFAULT_CHARSET <span class="token operator">=</span> Charset<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">FastJsonRedisSerializer</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clazz <span class="token operator">=</span> clazz<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//fastjson1.2.25版本之后，需要开启AutoTypeSupport</span>        <span class="token comment" spellcheck="true">//否则从redis缓存中读取的数据会报autoType is not support.错误。</span>        ParserConfig<span class="token punctuation">.</span><span class="token function">getGlobalInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAutoTypeSupport</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//重写序列化方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">serialize</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token keyword">throws</span> SerializationException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> SerializerFeature<span class="token punctuation">.</span>WriteClassName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//重写反序列化方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> T <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token keyword">throws</span> SerializationException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes <span class="token operator">==</span> null <span class="token operator">||</span> bytes<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置完序列化器后，再配置Redis缓存的相关配置。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableCaching</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisCacheConfig</span>  <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//因为SpringBoot整合的最新的redis中的CacheManager是没有RedisTemplate的构造方法的。</span>        <span class="token comment" spellcheck="true">//所以似乎在RedisTemplate设置Key和Value的序列器是无效的（实践过确实如此）</span>        <span class="token comment" spellcheck="true">//但是在此设置之后，在cacheManager配置时也可以从redisTemplate中取出来</span>        FastJsonRedisSerializer<span class="token operator">&lt;</span>Object<span class="token operator">></span> serializer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FastJsonRedisSerializer</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>serializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用StringRedisSerializer来序列化和反序列化redis的key值</span>        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*配置缓存管理器     *如果配置自己定义的序列化器，要传RedisTemplate进来。或者在里面重新实例序列化器，这里使用前者的方式     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CacheManager <span class="token function">cacheManager</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">,</span>RedisTemplate redisTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 生成一个默认配置，通过config对象即可对缓存进行自定义配置</span>        <span class="token comment" spellcheck="true">// serialzeValuesWith方法会重新实例化RedisCacheConfiguration，所以在生成配置时，不能分开配置，只能进行链式配置</span>        RedisCacheConfiguration config <span class="token operator">=</span> RedisCacheConfiguration<span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span>RedisSerializationContext<span class="token punctuation">.</span>SerializationPair<span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">getValueSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">serializeKeysWith</span><span class="token punctuation">(</span>RedisSerializationContext<span class="token punctuation">.</span>SerializationPair<span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">getKeySerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">entryTtl</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 设置缓存的默认过期时间，也是使用Duration设置</span>                <span class="token punctuation">.</span><span class="token function">disableCachingNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 不缓存空值</span>        <span class="token comment" spellcheck="true">// 设置一个初始化的缓存空间set集合</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> cacheNames <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cacheNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> RedisCacheConfiguration<span class="token operator">></span> configMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token function">entryTtl</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RedisCacheManager cacheManager <span class="token operator">=</span> RedisCacheManager<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 使用自定义的缓存配置初始化一个cacheManager</span>                <span class="token punctuation">.</span><span class="token function">initialCacheNames</span><span class="token punctuation">(</span>cacheNames<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 注意这两句的调用顺序，一定要先调用该方法设置初始化的缓存名，再初始化相关的配置</span>                <span class="token punctuation">.</span><span class="token function">withInitialCacheConfigurations</span><span class="token punctuation">(</span>configMap<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cacheManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后在需要缓存的地方加上@Cacheable注解即可，unless表示如果结果为空则不进行缓存</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"user"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#root.targetClass + #name"</span><span class="token punctuation">,</span> unless <span class="token operator">=</span> <span class="token string">"#result eq null"</span><span class="token punctuation">)</span></code></pre><p>进行测试查询，第一次仍然是去访问数据库，第二次是从redis缓存中查到的。</p><p><img src="/images/SpringBoot/redis/redisData1.JPG" alt=""></p><blockquote><p>参考资料</p></blockquote><p><a href="https://blog.csdn.net/zsj777/article/details/80801824" target="_blank" rel="noopener">SpringBoot2整合Redis缓存</a></p><p><a href="https://segmentfault.com/a/1190000002906345" target="_blank" rel="noopener">Redis持久化_segmentfault</a></p><p><a href="https://www.v2ex.com/t/49284" target="_blank" rel="noopener">有没有方法让redis 自动做热数据缓存？</a></p>]]></content>
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Redis </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringBoot2.0.4配置hystrix-dashboard，出现Unable to connect to Command Metric Stream错误</title>
      <link href="/hystrix_dashboard.html"/>
      <url>/hystrix_dashboard.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://unpkg.com/meting@2.0.1/dist/Meting.min.js"></script><p>配置Hystrix-dashboard后进入监控页面出现Unable to connect to Command Metric Stream。本来还以为配置监控面板应该是件比较简单的事情，没想到被SpringBoot版本坑了。</p><p><strong>当前的SpringBoot版本为2.0.4.RELEASE，SpringCloud版本为Finchley.M9。</strong></p><p>新建一个hystrix_dashboard模块，导入相应的依赖spring-cloud-starter-netflix-hystrix-dashboard。</p><p>在Main启动类上加上@EnableHystrixDashboard注解，配置文件配置一下端口和应用名即可。并且在消费模块配置actuator依赖。</p><p>这时打开dashboard输入URL后就是下面这个样子。</p><p><img src="/images/SpringCloud/hystrix-dashboard/error.JPG" alt=""></p><p>&nbsp;</p><p>找了很多解决方案，才发现是<strong>actuator版本问题</strong>。actuator的2.x版本endpoint是在/actuator之下的，并且只暴露了health和info端点。<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-endpoints.html" target="_blank" rel="noopener">详细文档点我</a> 所以需要为服务实例添加hystrix.stream端点。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'hystrix.stream'</span><span class="token punctuation">,</span><span class="token string">'info'</span><span class="token punctuation">,</span><span class="token string">'health'</span><span class="token punctuation">]</span></code></pre><p>此时重启后发现日志输出<strong>Registered ‘/actuator/hystrix.stream’ to hystrix.stream-actuator-endpoint</strong></p><p>再输入http: //localhost:8100/actuator/hystrix.stream就发现可以进行监控了。如下图：</p><p><img src="/images/SpringCloud/hystrix-dashboard/success.JPG" alt=""></p><p>&nbsp;</p><p>如果想直接通过http: //localhost:8100/hystrix.stream，只需要配置端点的base-path即可</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">base-path</span><span class="token punctuation">:</span> /</code></pre><p>理论上修改base-path应该就可行了的，但是又出错了。哎，又不知道是哪里的问题，先留着吧！</p><p>贴一张hystrix-dashboard界面各部分介绍图：</p><p><img src="/images/SpringCloud/hystrix-dashboard/instruction.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> 报错 </tag>
            
            <tag> Hystrix-dashboard </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringBoot2.0.4配置Eureka出现Unable to start embedded Tomcat错误</title>
      <link href="/eureka.html"/>
      <url>/eureka.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://unpkg.com/meting@2.0.1/dist/Meting.min.js"></script><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><p>官网版本对应的描述</p><p><img src="/images/SpringBoot/eureka/SpringCloud.JPG" alt=""></p><p><img src="/images/SpringBoot/eureka/SpringCloudTable.JPG" alt=""></p><p>与SpringBoot 2.x版本兼容的SpringCloud版本为<strong>Finchley</strong></p><p>2.0.4版本pom依赖为spring-cloud-starter-netflix-eureka-server(以后查询所需依赖去官网查)</p><p>但是导入依赖后遇到的了无法启动内置Tomcat的问题？</p><p><img src="/images/SpringBoot/eureka/error.png" alt=""></p><p><strong>jdk版本问题，jaxb的依赖问题</strong>，JAXB API是java EE 的API，因此在java SE 9.0 中不再包含这个 Jar 包。 java 9 中引入了模块的概念，默认情况下，Java SE中将不再包含java EE 的Jar包 而在 java 6/7/8 时关于这个API 都是捆绑在一起的。所以导入jaxb-core、jaxb-api、jaxb-impl、activation四个jar包即可，或者导入jdk8。</p><p>注：IDEA内置的jdk8也会报这个错误，只能使用自己另外安装的jdk8。</p><hr><h3 id="pom-xml完整文件"><a href="#pom-xml完整文件" class="headerlink" title="pom.xml完整文件"></a>pom.xml完整文件</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>me.freelee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springcloud_eureka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>springcloud_eureka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud.version</span><span class="token punctuation">></span></span>Finchley.M9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.sun.xml.bind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jaxb-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.xml.bind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jaxb-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.sun.xml.bind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jaxb-impl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.glassfish.jaxb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jaxb-runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.10-b140310.1920<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.activation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>activation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-cloud.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>spring-milestones<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Spring Milestones<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://repo.spring.io/libs-milestone<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p>&nbsp;</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a><strong>参考资料:</strong></h3><p><a href="https://stackoverflow.com/questions/43574426/how-to-resolve-java-lang-noclassdeffounderror-javax-xml-bind-jaxbexception-in-j" target="_blank" rel="noopener">解决方案</a></p><p><a href="https://www.cnblogs.com/stono/p/8445312.html" target="_blank" rel="noopener">解决方案中文</a></p>]]></content>
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Eureka </tag>
            
            <tag> SpringCloud </tag>
            
            <tag> 报错 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker学习笔记</title>
      <link href="/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html"/>
      <url>/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://unpkg.com/meting@2.0.1/dist/Meting.min.js"></script><h3 id="Docker与虚拟机"><a href="#Docker与虚拟机" class="headerlink" title="Docker与虚拟机"></a>Docker与虚拟机</h3><blockquote><p>Docker是Client-Server结构。</p><p>虚拟机技术通过Hypervisor层抽象底层基础设施资源，提供相互隔离的虚拟机，通过统一配置、统一管理，计算资源的可运维性，以及资源利用率都能够得到有效的提升。同时，虚拟机提供客户机操作系统，客户机变化不会影响宿主机，能够提供可控的测试环境，更能够屏蔽底层硬件甚至基础软件的差异性，让应用做到的广泛兼容。然而，再牛逼的虚拟化技术，都不可避免地出现计算、IO、网络性能损失，毕竟多了一层软件，毕竟要运行一个完整的客户机操作系统。</p><p>容器技术严格来说并不是虚拟化，没有客户机操作系统，是共享内核的。容器可以视为软件供应链的集装箱，能够把应用需要的运行环境、缓存环境、数据库环境等等封装起来，以最简洁的方式支持应用运行，轻装上阵，当然是性能更佳。Docker镜像特性则让这种方式简单易行。当然，因为共享内核，容器隔离性也没有虚拟机那么好。</p><p><strong>服务器虚拟化解决的核心问题是资源调配，而容器解决的核心问题是应用开发、测试和部署</strong>。</p></blockquote><p><img src="/images/Docker/dockerVSvm.jpg" alt=""></p><hr><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><p><strong>docker info</strong> 查看docker信息详情</p><p><strong>docker images</strong> 列出本地镜像，同一仓库源可以有多个Tag（版本），使用Repository：Tag选择不同版本</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;–no-trunc 全部信息</p><p><strong>docker rmi 镜像名</strong> 删除镜像</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-f 强制删除</p><p><strong>Docker history 镜像名</strong> 列出镜像的变更历史</p><hr><h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><p><strong>docker run [OPTIONS] image [COMMAND]</strong> 新建并启动容器</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OPTIONS：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;–name=“New Name” 指定容器新名字</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-d 后台运行容器，并返回容器ID</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-i 以交互模式运行容器，通常与-t使用（-it）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-t 为容器重新分配一个输入终端</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-P 随机分配端口映射</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-p 指定端口映射（主机端口：容器端口）</p><p><strong>docker ps [OPTIONS]</strong> 列出所有正在运行的容器</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OPTIONS:</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-a 列出正在运行的 + 历史运行过的</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-q 静默模式，只显示容器编号</p><p><strong>docker start/restart/stop 容器名/容器ID</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kill 强制删除</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rm 容器ID 删除已停止容器</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rm -f $(docker ps -a -q) 删除所有容器</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rmi 镜像名</p><p><strong>docker logs -f -t –tail 容器ID</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-f 跟随最新的日志打印</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;–tail 数字 显示最后指定的条数</p><p><strong>docker top 容器ID</strong> 查看容器内运行的进程</p><p><strong>docker inspect 容器ID</strong> 查看容器内部细节</p><p><strong>exit</strong> 停止并退出容器</p><p><strong>Ctrl+P+Q</strong> 不停止退出容器</p><p><strong>docker attach ID</strong> 进入容器，不新建进程</p><p><strong>docker exec -t ID ls -l /tmp /bin/bash</strong> 直接打印返回结果</p><p><strong>docker cp 容器ID：容器内路径 目的主机路径</strong> 把文件从容器拷贝到主机</p><p><strong>docker commit -m=”描述” -a=”作者” 容器ID 新镜像名:[标签名]</strong> 提交修改后容器生成新的镜像</p><hr><h3 id="Docker容器数据卷"><a href="#Docker容器数据卷" class="headerlink" title="Docker容器数据卷"></a>Docker容器数据卷</h3><blockquote><p>容器的持久化、容器间继承+共享数据</p></blockquote><p>数据卷：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;容器内添加：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;直接添加：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;docker run -it -v /宿主机绝对路径目录：/容器内目录 镜像名</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;容器停止退出后，主机修改数据可以同步</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;权限：docker run -it -v /宿主机绝对路径目录：/容器内目录：ro 镜像名 数据只读</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dockerfile添加：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1）编写Dockerfile文件</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2）docker build -f 目录/Dockerfile -t freelee/镜像名 构建镜像</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3）Docker会默认指定主机数据卷地址（可通过inspect命令查看）</p><p>数据卷容器：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;挂载数据卷的容器，其他容器通过挂载这个（父容器）实现数据共享。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;容器间传递共享：<strong>docker run -it –name dc02 –volumes-from dc01 freelee/centos</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>删除父容器后，原数据不会丢失。子容器依旧可以共享数据，数据卷生命周期一直到没有容器使用它为止</strong></p><hr><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><blockquote><p>Dockerfile是用来构建Docker镜像的构建文件</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1）每条指令保留字必须大写且后跟参数</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2）从上到下，顺序执行</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3）每条指令都会创建一个新的镜像层，并对镜像进行提交</p><p>指令：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>FROM</strong> 基础镜像</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>MAINTER</strong> 作者和邮箱</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>RUN</strong> 构建时需要执行的命令</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>EXPOSE</strong> 暴露的端口号</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>WORKDIR</strong> 工作目录</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>ENV</strong> 构建过程中设置环境变量</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>ADD</strong> 将宿主机目录下文件拷贝进镜像且ADD命令会自动处理URL和解压tar包</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>VOLUMN</strong> 容器数据卷</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>CMD</strong> 容器运行时执行的命令，最后一个命令会覆盖前面</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>ENTRYPOINT</strong> 容器运行时执行的命令，后面的命令会叠加在后面</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>ONBUILD</strong> 继承此镜像的子镜像在构建时会触发</p><h4 id="Dockerfile案例"><a href="#Dockerfile案例" class="headerlink" title="Dockerfile案例"></a>Dockerfile案例</h4><p>案例一：原始centos进入镜像默认路径为 / ，且不支持vim编辑器和查看网络配置ifconfig</p><pre class=" language-dockerfile"><code class="language-dockerfile">FROM centosENV mypath /tmpWORKDIR $mypathRUN yum -y install vimRUN yum -y install net-toolsEXPOSE 80CMD /bin/bash</code></pre><p>案例二：ONBUILD指令</p><pre class=" language-dockerfile"><code class="language-dockerfile">FROM centosRUN yum install -y curlENTRYPOINT ["curl","-s","http://ip.cn"]ONBUILD RUN echo "father image onbuild......"</code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p><a href="https://www.zhihu.com/question/48174633/answer/218092411" target="_blank" rel="noopener">知乎上网易云关于Docker和虚拟机的回答</a></p>]]></content>
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> Dockerfile </tag>
            
            <tag> 容器数据卷 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>计算机网络学习记录</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.html"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://unpkg.com/meting@2.0.1/dist/Meting.min.js"></script><p>大二下学期开过这门课，当时因为课时原因大概只讲到DNS，而且很多都忘了，现在再复习一遍以此记录。</p><p>课程学习视频：<a href="https://www.bilibili.com/video/av19786297?from=search&amp;seid=3758910974265066829" target="_blank" rel="noopener">哈尔滨工业大学 计算机网络课程视频</a></p><p>参考书籍：《计算机网络》（第七版）</p><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><h3 id="信道复用技术（2018-09-21）"><a href="#信道复用技术（2018-09-21）" class="headerlink" title="信道复用技术（2018.09.21）"></a>信道复用技术（2018.09.21）</h3><p>为什么有信道复用技术？传统信息传输是单对单进行的，如果用户不使用的话就会空闲，信道利用率将会很低。因此提出了复用概念，但是这里又有一个问题，多个用户如果同时使用，信道的传输的信息岂不是乱了套？！接着有了以下几种主要复用技术。</p><ul><li><p><strong>频分复用</strong>：用户分配到一定的频带，不同的用户再不用的频带上进行传输时不会相互干扰，常见应用就是有线电视，遥控板其实就是调频来换台。</p></li><li><p><strong>波分复用</strong>：跟频分复用类似，只不过是在光波中进行不同的波长传输（也就是不同的频率）。</p></li><li><p><strong>时分复用</strong>：将时间分片，用户分配到不同的时间片进行传输。</p></li><li><p><strong>码分复用</strong>：码分复用比较复杂一点，详细介绍一下实现原理。</p><p>定义：“码分复用是用一组包含互相正交的码字的码组携带多路信号”</p><p>不同的站分配到不同的唯一的m bit的码片序列，且须相互正交，这样才能抵抗干扰。<br>$$<br>内积公式： S·T=\frac {1}{m} \sum_{i=1}^m S_iT_i=0<br>$$<br>举个例子：假设有两个站S和T，设站S的码片序列为（-1 -1 -1 +1 +1 -1 +1 +1），站T的码片序列为（-1 -1 +1 -1 +1 +1 +1 -1），内积计算可得这两个码片序列结果为0。</p><p><em>注：</em>然后我们通常指定传输比特1就是1，发送比特0时为-1（运用了正交的特性）。</p><p>假设S站发送了数据是1即（-1 -1 -1 +1 +1 -1 +1 +1），T发送的数据也是1即（-1 -1 +1 -1 +1 +1 +1 -1）。</p><p>叠加后就是（-1 -1 -1 +1 +1 -1 +1 +1）+（-1 -1 +1 -1 +1 +1 +1 -1）</p><p>接收方如果是使用S站的码片序列，那么经过以下计算：</p><p>（-1 -1 -1 +1 +1 -1 +1 +1）·（（-1 -1 -1 +1 +1 -1 +1 +1）+（-1 -1 +1 -1 +1 +1 +1 -1））=1+0=1，就是S发送的数据。</p><p>因为T站和S站码片序列正交，所以使用T发送的数据不管和S发送的数据如果叠加，其内积结果都是0。这样就是实现不同用户之间的信号不混乱。</p></li></ul><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><h3 id="超文本传送协议HTTP（2018-09-23）"><a href="#超文本传送协议HTTP（2018-09-23）" class="headerlink" title="超文本传送协议HTTP（2018.09.23）"></a>超文本传送协议HTTP（2018.09.23）</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>HTTP协议定义了浏览器如何向万维网服务器请求万维网文档，以及服务器如何把文档传送给浏览器。是应用层的一个协议使用了TCP协议来保证数据的可靠传输，毫无疑问它是互联网通信的基础。</p><h4 id="工作过程"><a href="#工作过程" class="headerlink" title="工作过程"></a>工作过程</h4><p>一开始，客户端向服务器端发送TCP连接的请求，服务器端默认在80端口监听客户端建立TCP连接请求。在与服务器建立好TCP连接后，客户端向服务器端请求资源，发送HTTP请求报文，服务器端收到请求报文后，将请求内容响应给客户端。完成请求后，TCP的连接就被释放以供其他的请求。在这个过程中，服务器是如何“理解”客户端的请求的，并且是如何响应给客户端的呢？这就是http协议要干的事情，简单来说http协议规定客户端和服务器如何进行交互。</p><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p>http协议是==无状态==的，也就是说不管客户端之前是否访问过服务器某一页面或资源，每一次的访问都与第一次访问时相同。这么设置有好有坏，好处是服务器不需要去记录和维护客户端的状态，能支持高并发的请求。坏处是这样简单的设计在一些场景就显得十分不足，比如购物,当服务器无法记录的之前的状态时，那你的购物车的商品就无法保存下来，每一次打开页面购物车都是空的，解决方法是使用cookie来保存状态。</p><p>http协议是==无连接==的，每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间，但是现在的网页是比较复杂的，如果每次只处理一个请求，单单就连接建立释放就会浪费很多时间和资源，所以后来出现的长连接方式比较好的解决了这个问题。</p><h4 id="报文结构"><a href="#报文结构" class="headerlink" title="报文结构"></a>报文结构</h4><ul><li><p>请求报文：客户端向服务器发送的请求报文</p></li><li><p>响应报文：服务器响应给客户端的回答。</p></li></ul><p>请求报文和响应报文是由三部分组成的。</p><p><strong>请求报文</strong>：请求行、请求头部、请求体</p><p>1、请求行包含了请求的类型，请求资源的路径和http协议版本信息</p><p><img src="/images/Compute Network/http/3.JPG" alt=""></p><p>请求类型：下表列举了三种常用的请求类型</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">GET</td><td style="text-align:center">请求读取URL所标志的信息</td></tr><tr><td style="text-align:center">POST</td><td style="text-align:center">给服务器添加信息</td></tr><tr><td style="text-align:center">HEAD</td><td style="text-align:center">请求读取由URL所标志的信息的头部</td></tr></tbody></table><p>GET请求是最常用的请求类型，当向服务器请求资源时通过URL来定位，比如</p><pre class=" language-html"><code class="language-html">https://www.zhihu.com/search?type=content&amp;q=%E8%AE%A1%E7%AE%97%E6%9C%BA</code></pre><p>三种请求类型应用场景：</p><ol><li><p>请求知乎服务器里的search页面的资源。但是涉及一些登录注册时的相关信息提交时，这种请求类型不安全。</p></li><li><p>POST请求可以将请求的信息封装在请求数据中（GET请求的请求数据部分通常为空），不会在URL暴露给用户。</p></li><li><p>当只需要查看页面的状态时，使用HEAD请求效率会很高，因为它只返回响应头，而不返回页面的内容。</p></li></ol><p><em>注：URI：统一资源标识符，URL：统一资源定位符。URI包括URL和URN。简单来说，URI是通过某一规则来唯一确定某一资源，URL是通过定位（比如主机上资源的路径）来唯一确定某一资源。定位就可以近似看做URI的某一规则中的一种。</em></p><p>2、请求头部有很多属性（键值对）组成。</p><p>常见的有Host（主机域名）、User-Agent（浏览器信息）、Accept-Language（返回内容使用的语言）、Connection（决定执行当前的事务后是否关闭连接）<a href="https://zh.wikipedia.org/wiki/HTTP%E5%A4%B4%E5%AD%97%E6%AE%B5#%E8%AF%B7%E6%B1%82%E5%AD%97%E6%AE%B5" target="_blank" rel="noopener">获取更多请求字段信息</a></p><p><img src="/images/Compute Network/http/4.JPG" alt=""></p><p>3、请求数据</p><p>请求报文里很少使用到这个字段，POST请求可能会常用到。在响应报文里经常用到此字段来返回页面内容。</p><hr><p><strong>响应报文</strong>：状态行、响应头、响应正文</p><p>1、状态行</p><p>通过状态码返回访问的状态。</p><table><thead><tr><th>状态码</th><th>状态信息</th></tr></thead><tbody><tr><td>1XX</td><td>代表请求已被接受，需要继续处理</td></tr><tr><td>2XX</td><td>代表请求已成功被服务器接收、理解、并接受</td></tr><tr><td>3XX</td><td>代表需要客户端采取进一步的操作才能完成请求。通常，这些状态码用来重定向，后续的请求地址（重定向目标）在本次响应的Location域中指明</td></tr><tr><td>4XX</td><td>代表了客户端看起来可能发生了错误，妨碍了服务器的处理</td></tr><tr><td>5XX</td><td>表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理</td></tr></tbody></table><p><a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81" target="_blank" rel="noopener">获取更多详细状态码信息</a></p><p>2、响应头</p><p>也是由很多字段组成（键值对）。常见的有content-length（以八位字节数组表示的请求体的长度）、content-type（请求体的 多媒体类型 用于POST和PUT请求中）、date(发送该消息的日期和时间)……</p><p><a href="https://zh.wikipedia.org/wiki/HTTP%E5%A4%B4%E5%AD%97%E6%AE%B5#%E8%AF%B7%E6%B1%82%E5%AD%97%E6%AE%B5" target="_blank" rel="noopener">获取更多请求字段信息</a></p><p>3、响应正文</p><p>服务器响应给客户端所请求的内容。如：</p><p><img src="/images/Compute Network/http/5.JPG" alt=""></p><h4 id="连接建立方式"><a href="#连接建立方式" class="headerlink" title="连接建立方式"></a>连接建立方式</h4><ul><li>非持续连接：在http1.0版本，对于页面上的每一个链接的请求都需要重新创建一个TCP连接，不仅仅是在时间上延长很多，并且在服务器每次建立连接都要分配缓存和变量，在请求很大的时候，服务器的压力会非常的重。</li><li>持续连接：在http1.1版本中，使用了持续连接，也就是客户端发送请求服务器响应后仍然可以保持这条连接，在请求头中会带上connection：keep-alive的字段。这么一来在时间和资源上都大大减少。持续连接又分为两种：请求管线化和请求非管线化。非管线化的特点是在前一个请求得到响应后才能发送下一个请求，所以在发送完请求到收到响应这段时间TCP连接是空闲在那的，造成了资源的浪费。而管线化则是可以连续的发送请求，服务器连续响应，很大的提高的利用率和响应效率。</li></ul><h4 id="http发展"><a href="#http发展" class="headerlink" title="http发展"></a>http发展</h4><p><img src="/images/Compute Network/http/NewImage.png" alt=""></p><p>http1.1除了在长连接上与1.0版本不同，在缓存方面http1.0是通过条件请求（请求的if-Modified-Since和响应的Last-Modified）的字段来判断缓存是否有效。http1.1加入了ETag来标识URL上的资源的特定版本。在带宽优化方面允许请求资源的某一部分（Content-Range字段实现），新增一个100状态码用来在请求资源前先发送一个只带请求头的请求，这样一来避免在不知道服务器是否会拒绝请求的情况下仍然去发送实体资源的请求，避免了带宽的浪费。</p><p>http2.0版本在速度上比http1.1快了很多。具体可以参考<a href="https://juejin.im/entry/5981c5df518825359a2b9476" target="_blank" rel="noopener">HTTP1.0、HTTP1.1 和 HTTP2.0 的区别</a></p><h3 id="Cookie和Session简述（2018-09-28）"><a href="#Cookie和Session简述（2018-09-28）" class="headerlink" title="Cookie和Session简述（2018.09.28）"></a>Cookie和Session简述（2018.09.28）</h3><h4 id="Cookie机制"><a href="#Cookie机制" class="headerlink" title="Cookie机制"></a>Cookie机制</h4><p>之前谈到http协议是无状态的，也就是说每一次访问页面时服务器都把这次请求当作第一次访问，这样就会有很多局限性。Cookie机制很好解决了这个问题。Cookie是一种服务器发给客户端并且存储在客户端的文本文件。如果请求页面时，客户端的请求头没有Cookie信息时，服务器在响应时就会返回一个Set-Cookie头部来创建cookie。Set-Cookie头部的格式为：</p><pre class=" language-xml"><code class="language-xml">Set-Cookie: value[; expires=date][; domain=domain][; path=path][; secure]</code></pre><ul><li><p>value：是一个name-value的键值对，指定Cookie的值</p></li><li><p>expires：可以设置一个过期时间，如果不设置，那么这个cookie会在浏览器页面关闭时销毁（称为会话Cookie）。</p></li><li><p>domain：cookie所属的域及子域。</p></li><li><p>secure：表示该cookie只能用https传输。一般用于包含认证信息的cookie，要求传输此cookie的时候，必须用https传输。</p></li><li><p>path：cookie的所属路径</p></li></ul><p>之后客户端再次访问页面时就会在http请求带上Cookie头部，这样一来服务器就能通过Cookie获取到该用户的状态了。过程如图：</p><p><img src="/images/Compute Network/http/cookie.png" alt=""></p><p>但是Cookie是明文传输的，容易被篡改，存在很大的安全隐患，Session机制解决了这个问题。</p><h4 id="Session机制"><a href="#Session机制" class="headerlink" title="Session机制"></a>Session机制</h4><p>与Cookie存储在客户端不同的是，Session是存放在服务器上的，但Session机制是基于Cookie上面。其过程是当用户提交一个HTTP请求后，服务器经过验证后将用户信息存放在服务器端，并且返回一个包含key为Session ID的键值对的Cookie。客户端保存这个Session ID，以后的HTTP请求只要带上Session ID即可。因为用户信息是存放在服务器上，对用户来说是透明的，大大减少了明文篡改造成的安全威胁。如果客户端禁用Cookie，就会采用URL方式带上Session ID。</p>]]></content>
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> cookie </tag>
            
            <tag> session </tag>
            
            <tag> http协议 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringBoot整合项目练习</title>
      <link href="/springboot(%E4%B8%80).html"/>
      <url>/springboot(%E4%B8%80).html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://unpkg.com/meting@2.0.1/dist/Meting.min.js"></script><p>一个SpringBoot整合项目练习，使用到的技术Mybatis+Druid+PageHelper+Swagger2+thymeleaf，采用RESTful的url风格。</p><a id="more"></a><h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><p>练习项目的主要技术如下：</p><ul><li>SpringBoot 2.0.4</li><li>Mybatis 1.3.2</li><li>Druid 1.1.8</li><li>PageHelper 1.2.5</li><li>Swagger2 2.6.1</li><li>thymeleaf</li></ul><p>按照个人理解简单介绍下这几个技术的功能</p><pre><code>SpringBoot就是对Spring框架的一个优化，在配置方面进行比较大的优化。减少了很多的底层配置，大量的注解开发避免了xml配置的繁琐。MyBatis是一个持久层框架，可以将POJOs直接与数据库的记录进行映射。以前的JDBC需要将SQL语句写进Java代码中，而且需要在结果集上遍历然后进行映射，比较繁琐。而MyBatis优化了这些步骤，它将结果集可以直接与POJO进行映射，并且将sql语句通过xml或注解进行配置。Druid是阿里巴巴开发的一个数据库系统，不仅提供了强大的数据库监控功能，而且可以作为一个数据库连接池，性能方面非常优秀。PageHelper是一款Mybatis的分页插件，通过拦截器获取到同一线程的SQL语句，然后包装成有分页功能的SQL语句。PageInfo封装了很多分页的信息。Swagger2可以高效的帮助我们生成业务接口的文档，如果项目有些业务逻辑修改了，也会自动更新成新的文档。</code></pre><h2 id="项目实现"><a href="#项目实现" class="headerlink" title="项目实现"></a>项目实现</h2><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><p>版本管理</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis-springboot.version</span><span class="token punctuation">></span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis-springboot.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swagger2.version</span><span class="token punctuation">></span></span>2.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swagger2.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">></span></span>5.1.46<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>druid.version</span><span class="token punctuation">></span></span>1.1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>druid.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pagehelper-springboot.version</span><span class="token punctuation">></span></span>1.2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pagehelper-springboot.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></code></pre><p>相关依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--Mybatis相关依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mybatis-springboot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--Swagger2--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${swagger2.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${swagger2.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--mysql数据库依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- alibaba的druid数据库连接池 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${druid.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--分页插件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${pagehelper-springboot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--热部署--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--模板引擎--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>mybatis逆向工程插件配置</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-generator-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mybatis-springboot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configurationFile</span><span class="token punctuation">></span></span>${basedir}/src/main/resources/generator/generatorConfig.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configurationFile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>overwrite</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>overwrite</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>verbose</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>verbose</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mysql.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span></code></pre><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>全局配置文件</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mybatis_druid<span class="token punctuation">?</span>userUnicode=true<span class="token important">&amp;characterEncoding</span>=utf8    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">1234</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver    <span class="token comment" spellcheck="true">#配置类型为Druid数据库连接池</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token key atrule">initialSize</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token key atrule">minIdle</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token key atrule">maxActive</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token key atrule">maxWait</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">timeBetweenEvictionRunsMillis</span><span class="token punctuation">:</span> <span class="token number">60000</span>    <span class="token key atrule">minEvictableIdleTimeMillis</span><span class="token punctuation">:</span> <span class="token number">300000</span>    <span class="token comment" spellcheck="true">#   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</span>    <span class="token key atrule">filters</span><span class="token punctuation">:</span> stat<span class="token punctuation">,</span>wall<span class="token punctuation">,</span>log4j    <span class="token key atrule">maxPoolPreparedStatementPerConnectionSize</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token key atrule">useGlobalDataSourceStat</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">connectionProperties</span><span class="token punctuation">:</span> druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500  <span class="token key atrule">thymeleaf</span><span class="token punctuation">:</span>    <span class="token key atrule">cache</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#配置映射文件的路径</span>  <span class="token key atrule">mapperLocations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapper/*.xml  <span class="token key atrule">typeAliasesPackage</span><span class="token punctuation">:</span> me.freelee.mybatisdruid.model  <span class="token key atrule">configLocation</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis<span class="token punctuation">-</span>config.xml</code></pre><p>mybatis配置文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 全局启用或禁用延迟加载。禁用后，所有关联对象都会即使加载 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lazyLoadingEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 使用驼峰命名法--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>mybatis逆向工程配置文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE generatorConfiguration        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generatorConfiguration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DB2Tables<span class="token punctuation">"</span></span> <span class="token attr-name">targetRuntime</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyBatis3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commentGenerator</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suppressDate<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!--是否去除自动生成的注释--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suppressAllComments<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commentGenerator</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbcConnection</span> <span class="token attr-name">driverClass</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span> <span class="token attr-name">connectionURL</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatis_druid<span class="token punctuation">"</span></span> <span class="token attr-name">userId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdbcConnection</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaTypeResolver</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>forceBigDecimals<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaTypeResolver</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 生成模型的包名和位置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaModelGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>me.freelee.mybatisdruid.model<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>src/main/java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>trimStrings<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaModelGenerator</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 生成映射文件的包名和位置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sqlMapGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapper<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>src/main/resources<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sqlMapGenerator</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 生成DAO的包名和位置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaClientGenerator</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>XMLMAPPER<span class="token punctuation">"</span></span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>me.freelee.mybatisdruid.mapper<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>src/main/java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaClientGenerator</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tb_user<span class="token punctuation">"</span></span> <span class="token attr-name">domainObjectName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span> <span class="token attr-name">enableCountByExample</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">enableUpdateByExample</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">enableDeleteByExample</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">enableSelectByExample</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generatorConfiguration</span><span class="token punctuation">></span></span></code></pre><p>接下来运行mybatis-generator插件，就会生成数据库指定表对应的model和mapper。</p><p><img src="/images/SpringBoot/springboot1/3.JPG" alt=""></p><h3 id="业务逻辑"><a href="#业务逻辑" class="headerlink" title="业务逻辑"></a>业务逻辑</h3><p>UserService接口的实现类（只贴出了关键方法）。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> PageInfo<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">queryPage</span><span class="token punctuation">(</span>Integer pageNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//引入PageHelper分页插件</span>    <span class="token comment" spellcheck="true">//startPage方法后紧跟查询语句,这样才能实现分页查询</span>    PageHelper<span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span>pageNum<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> list<span class="token operator">=</span>userMapper<span class="token punctuation">.</span><span class="token function">selectAllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//PageInfo构造函数第二个参数是显示导航页的数量</span>    PageInfo<span class="token operator">&lt;</span>User<span class="token operator">></span> pageInfo<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PageInfo</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>list<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pageInfo<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*       因为是对数据库进行写操作，所以需要保持原子性。添加了事务的注解@Transactional       Propagation.REQUIRED:存在事务就处于当前事务中，没有就才创建一个事务*/</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> Propagation<span class="token punctuation">.</span>REQUIRED<span class="token punctuation">,</span>readOnly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    userMapper<span class="token punctuation">.</span><span class="token function">insertSelective</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Druid配置类 <a href="http://druid.io/docs/latest/design/" target="_blank" rel="noopener">Druid文档</a></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//导入配置文件中的数据源配置封装成DruidDateSource，并加入到容器中</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> DataSource <span class="token function">druid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//配置Druid的监控</span><span class="token comment" spellcheck="true">//1、配置一个管理后台的Servlet</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> ServletRegistrationBean <span class="token function">statViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ServletRegistrationBean bean<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StatViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> initParams<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置控制台管理用户</span>    initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginUsername"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginPassword"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"allow"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认就是允许所有访问</span>    bean<span class="token punctuation">.</span><span class="token function">setInitParameters</span><span class="token punctuation">(</span>initParams<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2、配置一个web监控的filter</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> FilterRegistrationBean <span class="token function">webStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    FilterRegistrationBean bean<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> initParams<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//不进行过滤的格式</span>    initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"exclusions"</span><span class="token punctuation">,</span><span class="token string">"*.js,*.css,/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bean<span class="token punctuation">.</span><span class="token function">setInitParameters</span><span class="token punctuation">(</span>initParams<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置过滤器过滤路径</span>    bean<span class="token punctuation">.</span><span class="token function">setUrlPatterns</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>UserController部分代码</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//根据用户Id查询用户</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> User <span class="token function">selectUserById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>    User user<span class="token operator">=</span>userService<span class="token punctuation">.</span><span class="token function">selectUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> user<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//分页查询所有数据</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">list</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"pageNo"</span><span class="token punctuation">,</span>defaultValue <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">)</span> Integer pageNo                <span class="token punctuation">,</span> Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>        PageInfo<span class="token operator">&lt;</span>User<span class="token operator">></span> pageInfo<span class="token operator">=</span>userService<span class="token punctuation">.</span><span class="token function">queryPage</span><span class="token punctuation">(</span>pageNo<span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"pageInfo"</span><span class="token punctuation">,</span>pageInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"list"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>现在就可以启动SpringBoot，进行测试了。</p><p><a href="">localhost:8080/druid</a>就可以进入Druid监控系统，可以查看数据源的详细信息等等很多功能。</p><p><img src="/images/SpringBoot/springboot1/2.JPG" alt=""></p><p>User的分页显示，页面的UI不是很关键，能用就行。</p><p><img src="/images/SpringBoot/springboot1/4.JPG" alt=""></p><p>还有最后一个步骤，使用Swagger2生成文档。 <a href="https://swagger.io/docs/" target="_blank" rel="noopener">Swagger2文档</a></p><p>首先配置一个Swagger2的配置类：</p><p>@EnableSwagger2：开启swagger2注解功能</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建一个Docket对象包含以下信息：</span>    <span class="token comment" spellcheck="true">//    1、Api的详细信息，即apiInfo（）</span>    <span class="token comment" spellcheck="true">//    2、指定需要生成文档的包路经</span>    <span class="token comment" spellcheck="true">//     3、指定生成Api文档的路径</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">createRestApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//apiInfo（）创建接口文档的信息</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//api（）可以控制指定扫描包下定义的Api暴露给Swagger2</span>            <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"me.freelee.mybatisdruid.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//构建Api文档的相信信息</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"使用Swagger2构建RESTful APIs"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"Springboot REST API With Swagger2"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>还需要再Controller上添加Swagger2注解。</p><p>@Api：用来标注类。Swagger2会检测标注此注解的类</p><p>@ApiOperation：用来标注方法，会将此方法暴露给Swagger2来生成文档。</p><pre><code>value：方法名notes：方法的描述</code></pre><p>除此之外，还有@ApiImplicitParam可以标注方法参数，可以设定是否required，名称，类型……</p><p>如果不想把接口暴露给Swagger2，可以使用@ApiIngore标注方法。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户Controller"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"获取用户信息"</span><span class="token punctuation">,</span> notes <span class="token operator">=</span> <span class="token string">"根据用户id获取用户信息"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"用户的ID"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>dataType <span class="token operator">=</span> <span class="token string">"Integer"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> User <span class="token function">selectUserById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        User user<span class="token operator">=</span>userService<span class="token punctuation">.</span><span class="token function">selectUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"获取用户列表"</span><span class="token punctuation">,</span> notes <span class="token operator">=</span> <span class="token string">"获取用户列表"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">list</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"pageNo"</span><span class="token punctuation">,</span>defaultValue <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">)</span> Integer pageNo                <span class="token punctuation">,</span> Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>        PageInfo<span class="token operator">&lt;</span>User<span class="token operator">></span> pageInfo<span class="token operator">=</span>userService<span class="token punctuation">.</span><span class="token function">queryPage</span><span class="token punctuation">(</span>pageNo<span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"pageInfo"</span><span class="token punctuation">,</span>pageInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"list"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Swagger2文档主页面如图，可以看到我们含有注解@ApiOperation的方法显示再文档中。</p><p><img src="/images/SpringBoot/springboot1/5.JPG" alt=""></p><p>点击其中一个方法,可以看到我们设置的一些信息。</p><p>文档提供了一个Model的一个值的示例，服务器相应类型包括所有返回类型。然后下面是方法的参数，输入对应类型的值，点击Try it out！会进行对服务器的请求（如果是写入操作，会写入数据库），就能得到Request Url和Response Body等其他详细信息。</p><p><img src="/images/SpringBoot/springboot1/6.JPG" alt=""></p><p><img src="/images/SpringBoot/springboot1/7.JPG" alt="7"></p><h2 id="项目中遇到的问题"><a href="#项目中遇到的问题" class="headerlink" title="项目中遇到的问题"></a>项目中遇到的问题</h2><p>已解决：</p><pre><code>1、pagehelper的依赖问题，会导致PageInfo对象无法自动装配。    错误依赖</code></pre><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><pre><code>    正确依赖</code></pre><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${pagehelper-springboot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>未解决：</p><pre><code>1、在selectUserById（）加上注解后   @ApiImplicitParam(name = &quot;id&quot;,value = &quot;用户的ID&quot;,required = true,dataType = &quot;Long&quot;)  ，使用Swagger2测试时，会报错  *&quot;Failed to convert value of type &#39;java.lang.String&#39; to required type &#39;java.lang.Long&#39;; nested exception is java.lang.NumberFormatException: For input string: \&quot;{id}\&quot;&quot;,*</code></pre><p>不知道在传参过程为什么不会自动类型转换？？？</p><pre><code>2、thymeleaf作为模板引擎时，想构建DELETE请求和PUT请求，尝试过ajax方式，但是失败了目前找不到错误在哪，其他方法还未尝试。</code></pre><h2 id="参考文章链接"><a href="#参考文章链接" class="headerlink" title="参考文章链接"></a>参考文章链接</h2><p><a href="http://blog.didispace.com/springbootswagger2/" target="_blank" rel="noopener">Spring Boot中使用Swagger2构建强大的RESTful API文档</a></p><p><a href="http://blog.didispace.com/java-datasource-pool-compare/" target="_blank" rel="noopener">主流Java数据库连接池比较及前瞻</a></p><p><strong>完整代码</strong></p><p>github：<a href="https://github.com/LJP-Perfect/SpringBoot_Project" target="_blank" rel="noopener">https://github.com/LJP-Perfect/SpringBoot_Project</a></p><p>码云：<a href="https://gitee.com/free-lee/springboot_project_practice" target="_blank" rel="noopener">https://gitee.com/free-lee/springboot_project_practice</a></p>]]></content>
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> MyBatis </tag>
            
            <tag> Swagger2 </tag>
            
            <tag> Druid </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ArrayList</title>
      <link href="/ArrayList.html"/>
      <url>/ArrayList.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://unpkg.com/meting@2.0.1/dist/Meting.min.js"></script><p>今天写Java集合框架里的其中一种容器——ArrarList。听上去跟数组差不多，其实，它们很多理念上是真差不多。先放一张集合框架图。<br><img src="https://f002.backblazeb2.com/file/freelee/Java/Collections/ArrayList/20180402190247303.png" alt="这里写图片描述"><br>乍一看，感觉贼复杂，头要炸。其实只要小小分析一波，就不会觉得难了。要不，我再放一张简化图？！<br><img src="https://f002.backblazeb2.com/file/freelee/Java/Collections/ArrayList/20180402190417789.png" alt="这里写图片描述"><br>简化图里把重点都给留下了。从上面那张框架图中可以看出ArrayList是一个实现类，继承了AbstarctList抽象类，实现了List接口，我们可以从源码中看到这些，除了这些，ArrayList还实现了RandomAccess，Cloneable，Serializable这三个接口。<br>简单介绍一下这三个接口（等学深了，再来给详细的）。</p><ul><li><p>RandomAccess<br>翻译一下，就是随机访问，这就像数组那样可以通过下标直接访问那个元素。</p></li><li><p>Cloneable<br>克隆接口，其可以将一个实例拷贝到一个新实例。实际上只拷贝其中的各变量的值，是浅拷贝。</p></li><li><p>Serializable<br>可序列化接口，通过此接口可以实现实例的存储，使用时可以通过反序列化得到那个实例。</p></li></ul><p>ArrayList的本质就是一个Object对象类型的数组，在这个数组上进行一系列操作，因为Object是所有类的基类，所以可以接收任意同类型的对象。并且用到了泛型，可以自己指定对象的类型。</p><h3 id="ArrayList的初始化"><a href="#ArrayList的初始化" class="headerlink" title="ArrayList的初始化"></a>ArrayList的初始化</h3><p>1、<strong>静态初始化</strong>(在声明变量时，赋予初始值。)</p><pre><code>//第一种public static void main(String[] args) {        ArrayList&lt;String&gt; arraylist=new ArrayList&lt;String&gt;(){            {                add(&quot;a&quot;);                add(&quot;b&quot;);            }        };}//第二种public static void main(String[] args) {        ArrayList&lt;String&gt; arraylist=new ArrayList&lt;String&gt;(Arrays.asList(&quot;a&quot;,&quot;b&quot;));        System.out.print(arraylist);    }//第三种 public static void main(String[] args) {        String[] str={&quot;a&quot;,&quot;b&quot;};        List arraylist=Arrays.asList(str);    }</code></pre><p>要注意的是，第三种的arraylist是无法改变其长度的，即无法进行add(),remove()等操作，因为数组一旦给定，长度就无法改变，初始化时将数组泛型化赋给它。<br>2、<strong>动态初始化</strong></p><pre><code>public static void main(String[] args) {        ArrayList&lt;String&gt; arraylist=new ArrayList&lt;String&gt;();        arraylist.add(&quot;a&quot;);        arraylist.add(&quot;b&quot;);        System.out.println(arraylist);    }</code></pre><h3 id="ArrayList-常用方法"><a href="#ArrayList-常用方法" class="headerlink" title="ArrayList 常用方法"></a>ArrayList 常用方法</h3><p>讲完了初始化，来看一下ArrayList的一些常用方法。</p><h5 id="1、add"><a href="#1、add" class="headerlink" title="1、add()"></a>1、add()</h5><p>我们先来看看add()方法的源码</p><pre><code>    public boolean add(E e) {        modCount++;        add(e, elementData, size);        return true;    }</code></pre><p>可以看到这里的add()又调用了与它互为重载的方法，如下。</p><pre><code>   /**     * This helper method split out from add(E) to keep method     * bytecode size under 35 (the -XX:MaxInlineSize default value),     * which helps when add(E) is called in a C1-compiled loop.     */    private void add(E e, Object[] elementData, int s) {        if (s == elementData.length)            elementData = grow();        elementData[s] = e;        size = s + 1;    }</code></pre><p>可以看到如果当前数组的长度等于当前设定的size就会调用grow()方法。size不用多讲，就是ArrayList包含的元素个数，来看一下elementData和grow()的定义。</p><blockquote><p>先看elementDate，其本质是一个对象数组。如果创建一个空的ArrayList时，系统会将其capacity置 为10,也就是默认的大小为10。</p><pre><code> transient Object[] elementData; // non-private to simplify nested class access</code></pre><p>然后在看grow()。它也去调用了与它重载的方法，可以看到它将size+1值传给重载函数，带参函数将其扩展成当前数组大小的两倍。</p><pre><code>private Object[] grow(int minCapacity) {    return elementData = Arrays.copyOf(elementData,                                       newCapacity(minCapacity));}private Object[] grow() {    return grow(size + 1);} </code></pre></blockquote><p>再回到add()，如果数组长度与当前数组容量相同，则先扩增一倍大小，然后赋值。<br>还没讲完呢，add()还有另外一个重载方法（我的天哪，一个add()的源码比我想象的要多）。</p><pre><code>    public void add(int index, E element) {        rangeCheckForAdd(index);        modCount++;        final int s;        Object[] elementData;        if ((s = size) == (elementData = this.elementData).length)            elementData = grow();        System.arraycopy(elementData, index,                         elementData, index + 1,                         s - index);        elementData[index] = element;        size = s + 1;    }</code></pre><p>这个add()方法接受外部两个参数，index就是要添加的位置的下标。首先rangeCheckForAdd(),是判断index是否合法的（大于等于0&amp;&amp;小于等于size，注意add时，不能跨长度给它赋值）,modCount是记录此数组修改的次数，（这里又可以展开很多知识，我直接抛一个链接<a href="https://www.cnblogs.com/zuochengsi-9/p/7050351.html），其主要就是防止线程安全的ArrayList一边用iterator遍历时一边对ArrayList进行增删操作时发生异常。然后是arraycopy()，查看源码时发现它是native（C++真厉害）,那就看声明，其意思就是将从src里的srcPos位置开始的length长度赋给从destPos位置的dest。" target="_blank" rel="noopener">https://www.cnblogs.com/zuochengsi-9/p/7050351.html），其主要就是防止线程安全的ArrayList一边用iterator遍历时一边对ArrayList进行增删操作时发生异常。然后是arraycopy()，查看源码时发现它是native（C++真厉害）,那就看声明，其意思就是将从src里的srcPos位置开始的length长度赋给从destPos位置的dest。</a></p><pre><code>public static native void arraycopy(Object src, int  srcPos, Object dest,int destPos,int length);</code></pre><p>再来看看具体使用。</p><pre><code> ArrayList &lt;String&gt;arraylist = new ArrayList&lt;String&gt;(); arraylist.add(&quot;b&quot;); arraylist.add(0,&quot;a&quot;); arraylist.add(2,&quot;c&quot;) //下标为3的地方还为null //arraylist.add(4,&quot;d&quot;);  //error System.out.println(arraylist);Output：[a, b, c]     </code></pre><p>这里a和b的位置是因为arraycopy。</p><h5 id="2、remove"><a href="#2、remove" class="headerlink" title="2、remove()"></a>2、remove()</h5><p>remove()也有两个重载方法。就不贴源码了，源码哪都可以查到。</p><pre><code>//按照下标来移除public E remove(int index);//按照元素来移除public boolean remove(Object o); //clear()方法是删除所有元素public void clear()//删除指定下标范围的元素protected void removeRange(int fromIndex, int toIndex) </code></pre><p>如果使用remove删除某个下标是ArrayList的中间一个元素，那么ArrayList会将所删元素后面的元素前移一个位置。</p><h3 id="ArrayList与Array"><a href="#ArrayList与Array" class="headerlink" title="ArrayList与Array"></a>ArrayList与Array</h3><p>那不是有数组就可以了吗？为什么还要ArrayList呢？<br>| | ArrayList | Array |<br>| ——– | :—–: | :—-: |<br>| 可扩展性 | 可以动态改变其长度 | 数组是静态的，一旦长度给定，就无法改变 |<br>| 方法支持 | 有很多的方法可以方便的对ArrayList进行操，但是牺牲了效率(判定数组是否outBounds…) | 数组没有 |<br>总之，各有各的优点，选用哪种也是视具体情况而定的，并无绝对的说法。</p><p><code>`</code></p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> array </tag>
            
            <tag> Java容器 </tag>
            
            <tag> List </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ng课程完结篇</title>
      <link href="/NG.html"/>
      <url>/NG.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://unpkg.com/meting@2.0.1/dist/Meting.min.js"></script><p>从4月2号开始学习Ng的机器学习，没有给我难以入门的感觉，虽然很多模型都没有用很深的公式去推导，但是真的很好理解，很适合我这种小白啊。不得不佩服恩达大佬的教学能力，不过感觉1.25倍速对我来说简直灾难啊，还是老老实实1倍吧(渣渣鉴定完毕)。看到最后，莫名感动，以泪谢幕。<br><br>为了赶项目进度，只能放弃算法的深入推导，先大致理解模型及参数的作用，接着就是开始学习NLP。可，没有明确的学习方向和路线啊，感觉GG。还得先啃点公开课，原理还是要懂的，coding能力很是让我难受，得实践实践了。时间不够用啊，7月就是结项目，哇得就哭出来了。不说了，继续视频feed。</p>]]></content>
      
      <categories>
          
          <category> ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu安装及常见问题解决</title>
      <link href="/ubuntu.html"/>
      <url>/ubuntu.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://unpkg.com/meting@2.0.1/dist/Meting.min.js"></script><p>搬自自己的csdn<br><a href="https://blog.csdn.net/weixin_40362972/article/details/79768443" target="_blank" rel="noopener">Ubuntu——从安装到放弃（/逃 ）【此教程包括ubuntu的安装、关机卡死（Nvidia安装）、无法连接wifi等解决方案】</a></p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu下配置tensorflow(gpu)</title>
      <link href="/tensorflow.html"/>
      <url>/tensorflow.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://unpkg.com/meting@2.0.1/dist/Meting.min.js"></script><p>搬自自己的csdn<br><a href="https://blog.csdn.net/weixin_40362972/article/details/79838662" target="_blank" rel="noopener">Ubuntu16.04环境下从Anaconda3安装到Tensorflow(gpu)及pycharm安装和测试mnist完整教程</a></p>]]></content>
      
      <categories>
          
          <category> ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> anaconda </tag>
            
            <tag> tensorflow配置 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>线性回归之波士顿房价预测</title>
      <link href="/Linear_Regression.html"/>
      <url>/Linear_Regression.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://unpkg.com/meting@2.0.1/dist/Meting.min.js"></script><p>最近学习了线性回归，然后拿经典数据集来练习。<br><a id="more"></a><br>数据集大小为[506,13],一共506个样本，13个特征([‘CRIM’ ‘ZN’ ‘INDUS’ ‘CHAS’ ‘NOX’ ‘RM’ ‘AGE’ ‘DIS’ ‘RAD’ ‘TAX’ ‘PTRATIO’ ‘B’ ‘LSTAT’])，target大小为[506，1]<br>可以先通过matplotlib来直观感受这些特征分别与房价的关系。<br><img src="https://f002.backblazeb2.com/file/freelee/DeepLearning/LinearRegression/1.png" alt="这里写图片描述"><br><img src="https://f002.backblazeb2.com/file/freelee/DeepLearning/LinearRegression/2.png" alt="这里写图片描述"><br><img src="https://f002.backblazeb2.com/file/freelee/DeepLearning/LinearRegression/3.png" alt="这里写图片描述"><br>为了简化训练，只选择了第6个特征[‘RM’]来训练（第6个和最后一个特征的直观看上去比较符合线性回归），13个特征只在506个样本下比较难去拟合好。<br><img src="https://f002.backblazeb2.com/file/freelee/DeepLearning/LinearRegression/4.png" alt="这里写图片描述"><br>下面是代码解释</p><pre><code>#import databoston=load_boston()data=boston.data[:,(5)]label=boston.target#reshape column vectordata=data.reshape(-1,1)label=label.reshape(-1,1)</code></pre><p>因为这里我们只导入一列数据，我们需要把 [ ] reshape为[[ ]]，否则会报以下错误</p><blockquote><p>Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.</p></blockquote><p>接下来，对特征数据做特征缩放（对于单个特征来说，特征缩放的作用并不是特别大，但习惯起见，还是对其进行特征缩放，但是在多特征中，特征缩放显得尤其重要，可以加快梯度下降，见图）</p><p><img src="https://f002.backblazeb2.com/file/freelee/DeepLearning/LinearRegression/2018-05-11+16-34-28%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="这里写图片描述"><br>接下来就是定义一些占位符和权值、偏置等变量<br>偏置初始化0即可，权值最好不要初始化为0，使用正太分布随机值，如果使用0去初始化权值。在反向传播计算会出现不同权值变化量始终相同从而导致权值更新出现异常（推导见图）。</p><pre><code>#getting number of training set &amp; number of featurem_feature=data.shape[1]m_train=tf.placeholder(dtype=tf.float32)x=tf.placeholder(dtype=tf.float32,shape=[None,m_feature],name=&#39;input&#39;)y_=tf.placeholder(dtype=tf.float32,shape=[None,1],name=&#39;output&#39;)#Define weights and offsets viriables#Initialize weights using a Gaussian distribution#Initialize the bias to 0w=tf.Variable(tf.truncated_normal(shape=[m_feature,1],stddev=0.003,dtype=tf.float32))b=tf.Variable(tf.zeros(shape=[1],dtype=tf.float32))</code></pre><p><img src="https://f002.backblazeb2.com/file/freelee/DeepLearning/LinearRegression/2018-04-22+21-04-29%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="这里写图片描述"></p><p>然后就是前向计算和反向计算，这个没有什么好说的，注意cost function的选择即可</p><pre><code>#Forward calculationy=tf.add(tf.matmul(x,w),b)#use the mean square error functionlearn_rate=0.08loss=tf.reduce_sum(tf.pow(y_-y,2)/(2*m_train))train_step=tf.train.GradientDescentOptimizer(learn_rate).minimize(loss)</code></pre><p>这里我们定义一个list来存储训练过程中的loss值，再定义一个张量error来简单评估测试的误差</p><pre><code>#variable train_loss is used to save the loss value of each iterationtrain_loss =[]#errorerror = tf.reduce_mean(y-y_)</code></pre><p>然后就开始进行训练<br>这里的重点在于数据集的划分，一开始用的是train_test_split将数据集划分成两份，70%为训练集，30%为测试集。但是听取别人建议后，使用k折交叉验证法。所谓k折交叉验证法，就是将数据集分成k份，每次取其中k-1份作为训练集，另外1份作为测试集，这样的好处是所有数据都有被利用，可以得到更好的参数，但是耗时会长一点（见图）。<br><img src="https://f002.backblazeb2.com/file/freelee/DeepLearning/LinearRegression/1667471-7ddeb02e0be14b79.png" alt="这里写图片描述"></p><pre><code>with tf.Session() as sess:    sess.run(init)    for i in range(150):        #k-fold cross validation        kf=KFold(n_splits=10)        for train_index,test_index in kf.split(data):            X_train,X_test=data[train_index],data[test_index]            Y_train,Y_test=label[train_index],label[test_index]            w_,b_,_,l=sess.run(fetches=[w,b,train_step,loss], feed_dict={x: X_train, y_: Y_train,m_train:X_train.shape[0]})            if i%10==0:                print(&quot;Epoch {0} : error:{1}&quot;.format(i,sess.run(error,feed_dict={x:X_test,y_:Y_test})))        train_loss.append(l)        #print(&quot;Epoch {0} : loss{1}&quot;.format(i, l))</code></pre><p>我用两种方法进行比较，首先是k（取10）折交叉验证的结果<br><img src="https://f002.backblazeb2.com/file/freelee/DeepLearning/LinearRegression/train_loss.png" alt="这里写图片描述"><br><img src="https://f002.backblazeb2.com/file/freelee/DeepLearning/LinearRegression/fitting.png" alt="这里写图片描述"><br>然后是train_test_split分类方法的结果<br><img src="https://f002.backblazeb2.com/file/freelee/DeepLearning/LinearRegression/cmp1_2.png" alt="这里写图片描述"><br><img src="https://f002.backblazeb2.com/file/freelee/DeepLearning/LinearRegression/cmp1_1.png" alt="这里写图片描述"><br>还是可以比较明显的看到，不管是loss值还是拟合程度。明显都是k折交叉验证法效果比较好。<br>完整代码请参考：<a href="https://github.com/LJP-Perfect/Machine-Learning/tree/master/Linear%20Regression" target="_blank" rel="noopener">https://github.com/LJP-Perfect/Machine-Learning/tree/master/Linear%20Regression</a></p><p>总结几点：<br>1、对特征进行选取<br>2、多特征时进行特征缩放<br>3、选取合适的cost function<br>4、使用k折交叉验证</p><p>还未解决的问题：<br>1、初始数据的分析<br>2、学习速率和k值的选取<br>3、选择更好的cost function</p>]]></content>
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> feature scaling </tag>
            
            <tag> boston price </tag>
            
            <tag> bp算法 </tag>
            
            <tag> k折交叉验证 </tag>
            
            <tag> 线性回归 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浅析SVM之概念介绍</title>
      <link href="/SVM.html"/>
      <url>/SVM.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://unpkg.com/meting@2.0.1/dist/Meting.min.js"></script><a id="more"></a><h3 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h3><p>先从一个简单的例子开始。现在有一组两个类别的数据如下。<br><img src="https://f002.backblazeb2.com/file/freelee/image/figure2.jpg" alt=""><br>这是一个比较简单的二分类问题，对于这一组数据，这个超平面可以用以下函数来表示：(超平面是从n维空间到n-1维空间的一个映射子空间，它有一个n维向量和一个实数定义)$$w\cdot x+b=0 \qquad (1) $$分类决策函数表示为$$f(x)=sign(w\cdot x+b)$$<br>即在超平面上的点f(x)=0，f(x)大于0的点对应y=1,f(x)小于0的点对应y=-1。<br><em><strong>注</strong>:sign函数为符号函数,当sign(t)中的t&gt;0时，sign(t)=1;t&lt;0时，sign(t)=-1;t=0时，sign(t)=0。在逻辑回归的hypotheis function中，当$\theta\cdot x$ &gt;0时，输出y=1；当$\theta\cdot x$ &lt;0，输出y=0。在这里我们首先将$\theta\cdot x$ 表示成$w\cdot x+b$ (其实就是将$\theta_{0}$从$\theta$向量中抽离出来表示成b)，同时将y=0和y=1表示为y=1和y=-1(对于结果并不会产生影响)。</em><br>再回到分问题，对于这个二分类问题可以有很多个不同的超平面来对其分割，如下图。但是这么多条decision boundary，总是有performance好的和不好的，如何找出最优的解呢？<br><img src="https://f002.backblazeb2.com/file/freelee/image/figure.jpg" alt=""></p><h3 id="表现评估标准"><a href="#表现评估标准" class="headerlink" title="表现评估标准"></a>表现评估标准</h3><h4 id="函数间隔和几何间隔"><a href="#函数间隔和几何间隔" class="headerlink" title="函数间隔和几何间隔"></a>函数间隔和几何间隔</h4><p>对于上面的三个超平面可以很自然的得出直线所对应的是较好的，很直观得可以看到它与两个类别中与其最近的点对应的距离较大，而且这条直线对一些outlier的表现也比较好，即<strong>泛化能力</strong>。所以引入函数间隔来进行衡量。函数间隔的含义就是表示分类的正确性及确信度，对于距离超平面较远的样本，其预测的确信度较高，反之距离较远的样本，其预测的确信度较低。对于给定的某个样本点($x_{i}$,$y_{i}$),我们定义超平面关于该样本点的函数间隔为$$\hat\gamma_{i}=y_{i}(w{\cdot}x_{i}+b)\qquad (2)$$<br>那么在所有样本中的最小函数间隔就为$$\hat{\gamma}=min\ \hat\gamma_{i},i=1,…,N\qquad (3)$$<br>虽然函数间隔可以表示分类预测的确信度，但是它是<strong>相对</strong>的。如果我们成比例的改变w和b，超平面并没有改变，但是函数间隔却变成了原来的两倍。这时可以使用几何间隔来替换函数间隔。几何间隔也就是样本到超平面的几何距离，记作$\gamma_{i}$,$$\gamma_{i}=y_{i}(\frac {w}{||w||} {\cdot}x_{i}+ \frac {b}{||w||})\qquad (4)$$<br>||w||为w的$L_{2}$范数，其中$y_{i}$表示了$y_{i}$等与1和-1的情况。那么在所有样本中的最小几何间隔就为$${\gamma}=min\ {\gamma}_{i}, i=1,…,N\qquad (5)$$</p><h4 id="间隔最大化"><a href="#间隔最大化" class="headerlink" title="间隔最大化"></a>间隔最大化</h4><p>根据上面(5)，可以将最大化问题表示下面的约束最优化问题：$$max\ \gamma\qquad(6)$$<br>$$s.t.\quad y_{i}(\frac {w}{||w||} {\cdot}x_{i}+ \frac {b}{||w||})\geq\gamma,\ i=1,2,…,N\qquad(7)$$<br>根据(2)~(5)，可以推出$$\gamma_{i}=\frac {\hat\gamma_{i}}{||w||}\qquad (8)$$$$\gamma=\frac{\hat\gamma}{||w||}\qquad (9)$$<br>根据(9)，求解(6)的问题就可以转化成$$max\;\frac{\hat\gamma}{||w||}\qquad(10)$$$$s.t.\quad y_{i}(\frac {w}{||w||} {\cdot}x_{i}+ \frac {b}{||w||})\geq\gamma,\ i=1,2,…,N\qquad(11)$$<br>在之前的推导过程中提到过对w和b按比例进行放大缩小对求解并不会产生影响，所以得到从函数间隔到几何间隔的转化。现在也是一样，将w和b进行缩放，也就是对$\hat\gamma$进行缩放，对求解结果同样也不会产生影响，所以我们取$\hat\gamma=1$，进行这一步主要是简化之后的数学计算。此时问题转化为$max\;\frac{1}{||w||}$,而$\frac{1}{||w||}$ 正好是几何间隔。进一步可以发现最大化$\frac{1}{||w||}$ 和最小化$\frac{1}{2}||w||^{2}$ 是等价的，至此(10)就转换成以下的最优化问题：$$min\ \frac{1}{2}\ ||w||^{2}\qquad(12)$$$$s.t.\quad y_{i}(\frac{w}{||w||}\cdot x_{i}+ \frac {b}{||w||})-1\geq0,i=1,2,…,N\qquad(13)$$ ,这是一个凸二次规划问题(凸二次规划详细内容链接)。只要解出$w^{\ast}$ 和$b^{\ast}$ 即可得到超平面$w^{\ast}\cdot x+b^{\ast}=0$ 和分类决策函数$f(x)=w^{\ast}\cdot x+b^{\ast}$ 。<br>几何间隔的直观化如下图，最终就是要使margin最大化的一个问题(负样本和正样本的margin应是一样的)。下图中两条虚线到直线的距离均为$\frac{1}{||w||}$，定义在虚线上的点称为<strong>支持向量(Support vector)</strong>。$w^{\ast}$ 和$b^{\ast}$ 的求解过程中其实只会受支持向量的影响，为什么呢？在之后的一篇数学推导会给出证明。<br><img src="https://f002.backblazeb2.com/file/freelee/image/figure2_3.jpg" alt=""><br>到这里，对SVM应该有了一个简单的认识。总的来说，SVM就是要找出一个超平面，使两类样本点中所有距离它最近的点，都尽可能的离它远。<br><em>To be continue</em></p>]]></content>
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> margin </tag>
            
            <tag> hypeplane </tag>
            
            <tag> classfication </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <link href="/baidu_verify_w2CJZAKCk7.html"/>
      <url>/baidu_verify_w2CJZAKCk7.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://unpkg.com/meting@2.0.1/dist/Meting.min.js"></script>w2CJZAKCk7]]></content>
    </entry>
    
    <entry>
      <title></title>
      <link href="/googlea4979d339ced872b.html"/>
      <url>/googlea4979d339ced872b.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://unpkg.com/meting@2.0.1/dist/Meting.min.js"></script>google-site-verification: googlea4979d339ced872b.html]]></content>
    </entry>
    
    <entry>
      <title></title>
      <link href="/baidu_verify_PQgHckNDnk.html"/>
      <url>/baidu_verify_PQgHckNDnk.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://unpkg.com/meting@2.0.1/dist/Meting.min.js"></script>PQgHckNDnk]]></content>
    </entry>
    
    <entry>
      <title></title>
      <link href="/baidu_verify_D4umA77Wgx.html"/>
      <url>/baidu_verify_D4umA77Wgx.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://unpkg.com/meting@2.0.1/dist/Meting.min.js"></script>D4umA77Wgx]]></content>
    </entry>
    
    <entry>
      <title></title>
      <link href="/581/index.js"/>
      <url>/581/index.js</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://unpkg.com/meting@2.0.1/dist/Meting.min.js"></script>var svg=document.querySelector("svg"),cursor=svg.createSVGPoint(),arrows=document.querySelector(".arrows"),randomAngle=0,target={x:900,y:249.5},lineSegment={x1:875,y1:280,x2:925,y2:220};function knock(e){randomAngle=Math.random()*Math.PI*.03-.015,TweenMax.to(".arrow-angle use",.3,{opacity:1}),window.addEventListener("mousemove",aim),window.addEventListener("mouseup",loose),aim(e),TweenMax.to("#arc",.3,{opacity:1})}function loose(){window.removeEventListener("mousemove",aim),window.removeEventListener("mouseup",loose),TweenMax.to("#bow",.4,{scaleX:1,transformOrigin:"right center",ease:Elastic.easeOut}),TweenMax.to("#bow polyline",.4,{attr:{points:"88,200 88,250 88,300"},ease:Elastic.easeOut});var e=document.createElementNS("http://www.w3.org/2000/svg","use");e.setAttributeNS("http://www.w3.org/1999/xlink","href","#arrow"),arrows.appendChild(e);var t=MorphSVGPlugin.pathDataToBezier("#arc");TweenMax.to([e],.5,{force3D:!0,bezier:{type:"cubic",values:t,autoRotate:["x","y","rotation"]},onUpdate:hitTest,onUpdateParams:["{self}"],onComplete:onMiss,ease:Linear.easeNone}),TweenMax.to("#arc",.3,{opacity:0}),TweenMax.set(".arrow-angle use",{opacity:0})}function hitTest(e){var t=e.target[0]._gsTransform,a=t.rotation*Math.PI/180,n=getIntersection({x1:t.x,y1:t.y,x2:60*Math.cos(a)+t.x,y2:60*Math.sin(a)+t.y},lineSegment);if(n.segment1&&n.segment2){e.pause();var o=n.x-target.x,r=n.y-target.y,s=".hit";Math.sqrt(o*o+r*r)<7&&(s=".bullseye"),showmessage(s)}}function onmiss(){showmessage(".miss")}function="" showmessage(e){tweenmax.killtweensof(e),tweenmax.killchildtweensof(e),tweenmax.set(e,{autoalpha:1}),tweenmax.staggerfromto(e+"="" path",.5,{rotation:-5,scale:0,transformorigin:"center"},{scale:1,ease:back.easeout},.05),tweenmax.staggerto(e+"="" path",.3,{delay:2,rotation:20,scale:0,ease:back.easein},.03)}tweenmax.set(".point",{attr:{cx:target.x,cy:target.y}}),window.addeventlistener("mousedown",knock);var="" pivot="{x:100,y:250};function" aim(e){var="" t="getMouseSVG(e);t.x=Math.min(t.x,pivot.x-7),t.y=Math.max(t.y,pivot.y+7);var" a="t.x-pivot.x,n=t.y-pivot.y,o=Math.atan2(n,a)+randomAngle-Math.PI,r=Math.min(Math.sqrt(a*a+n*n),50),s=Math.min(Math.max(r/30,1),2);TweenMax.to("#bow",.3,{scaleX:s,rotation:o+"rad",transformOrigin:"right" center"});math.min(pivot.x-1="" s*r,88);tweenmax.to(".arrow-angle",.3,{rotation:o+"rad",svgorigin:"100="" 250"}),tweenmax.to(".arrow-angle="" use",.3,{x:-r}),tweenmax.to("#bow="" polyline",.3,{attr:{points:"88,200="" "+math.min(pivot.x-1="" s*r,88)+",250="" 88,300"}});var="" i="9*r,c=Math.cos(o)*i,w=Math.sin(o)*i,x=3*c;TweenMax.to("#arc",.3,{attr:{opacity:1.4-x/800,d:"M100,250c"+c+","+w+","+(x-c)+","+(w+50)+","+x+",50"}})}function" getmousesvg(e){return="" cursor.x="e.clientX,cursor.y=e.clientY,cursor.matrixTransform(svg.getScreenCTM().inverse())}function" getintersection(e,t){var="" null;var="" w="(o*i-r*s)/c,x=(a*i-n*s)/c;return{x:e.x1+w*a,y:e.y1+w*n,segment1:w">=0&&w<=1,segment2:x>=0&&x</=1,segment2:x></7&&(s=".bullseye"),showmessage(s)}}function>]]></content>
    </entry>
    
    <entry>
      <title></title>
      <link href="/581/style.css"/>
      <url>/581/style.css</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://unpkg.com/meting@2.0.1/dist/Meting.min.js"></script>body{margin:0;background:#222;margin:20px}svg{width:100%;height:100%;position:fixed;top:0;left:0}span{color:#fff;font-family:sans-serif;opacity:.3}]]></content>
    </entry>
    
    <entry>
      <title>图库</title>
      <link href="/gallery/index.html"/>
      <url>/gallery/index.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://unpkg.com/meting@2.0.1/dist/Meting.min.js"></script>]]></content>
    </entry>
    
    <entry>
      <title>Who am I</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://unpkg.com/meting@2.0.1/dist/Meting.min.js"></script><blockquote><p>关于我</p></blockquote><ul><li>浙江理工大学 计算机专业大三在读</li><li><p>轻度中二，轻度社交恐惧</p></li><li><p>偏爱简约，喜欢生活充满新鲜感</p></li><li>会点Java，目前正在学习搭建后台项目</li></ul><blockquote><p>联系我</p></blockquote><p>Mail：<a href="mailto:871560465@qq.com" target="_blank" rel="noopener">871560465@qq.com</a></p><p>Steam：Freelee（一起Play Game啊）</p><p>github：<a href="https://github.com/LJP-Perfect" target="_blank" rel="noopener">https://github.com/LJP-Perfect</a></p>]]></content>
    </entry>
    
    <entry>
      <title>timeline</title>
      <link href="/timeline/index.html"/>
      <url>/timeline/index.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://unpkg.com/meting@2.0.1/dist/Meting.min.js"></script>]]></content>
    </entry>
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://unpkg.com/meting@2.0.1/dist/Meting.min.js"></script>]]></content>
    </entry>
    
    <entry>
      <title>games</title>
      <link href="/games/index.html"/>
      <url>/games/index.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://unpkg.com/meting@2.0.1/dist/Meting.min.js"></script><blockquote class="blockquote-center"><p><font size="4"><br><script src="https://f002.backblazeb2.com/file/freelee/js/ityped.min.js"></script><br><body><br><span class="ityped"></span><br><script src="/live2dw/lib/L2Dwidget.min.js?0c58a1486de42ac6cc1c59c7d98ae887"></script><script>L2Dwidget.init({"pluginRootPath":"live2dw/","pluginJsPath":"lib/","pluginModelPath":"assets/","model":{"jsonPath":"/live2dw/assets/koharu.model.json"},"display":{"position":"left","width":75,"height":150,"scaling":2,"horizontalOffset":10,"verticalOffset":-40},"mobile":{"show":false,"Scaling":0.5},"log":false,"tagMode":false});</script></body><br><br><script><br>   window.ityped.init(document.querySelector(‘.ityped’), {<br>   strings : [‘          网瘾少年(女)们，快玩游戏吧’],<br>   //可以写无限条句子，只要用逗号隔开<br>   typeSpeed: 155, //打字的速度<br>   backSpeed: 60, //删除字的速度<br>   startDelay: 500, //每一句开始打字停顿的时间<br>   backDelay: 2500, //每一句删除字的停顿时间<br>   loop: false, //是否循环动画<br>   showCursor: true, //是否显示光标<br>   cursorChar: “︳”,   //设置光标字符<br>     });<br></script><br><style></style></font><br></p></blockquote><p>#<a href="/581/index.html">Bullseye</a></p>]]></content>
    </entry>
    
  
</search>
