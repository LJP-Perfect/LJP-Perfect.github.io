<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[服务外包国赛总结]]></title>
    <url>%2F%E6%9C%8D%E5%8A%A1%E5%A4%96%E5%8C%85%E5%9B%BD%E8%B5%9B%E6%80%BB%E7%BB%93.html</url>
    <content type="text"><![CDATA[&emsp;大二下本来是参加聂老师的机器学习的项目的，但是感觉自己学的零零碎碎，到最后也没有做出什么像样的成果。大二那个暑假，开始选导师了，聂老师还特地为我们几个组员留了位置，当时我觉得还是得先学一门扎实的语言可能对我的未来会有帮助一点，很不好意思的拒绝了聂老师的名额，去参加了孙老师带队的服务外包比赛。&emsp;那个学期，我才意识到原来我离保研虽然有挺大的距离，但是使劲够一够好像还能摸到边那种。也粗略的算了一下我的科研分，当时科研分还是0，必须得国赛、省赛都拿好名次，才能有机会加入保研队伍，感觉还可以再拼一拼。所以当时就向老师申请当国赛队长，然后就这么稀里糊涂地当上了队长。&emsp;第一次就当了国赛的队长，一开始真的很紧张，跟组员都不认识，自己交际能力还有点差。老师一开始的任务就是调研，我们的赛题是跨境电商，其实电商平台的业务逻辑就已经是很复杂了，再加上跨境，就真的很复杂复杂，而且现实中也很难有真实企业可以调研，后来几乎全是靠网上找资料。老师一开始让我们关注海关这一方面，但是这些东西之前从没了解过，网上的资料其实也不是很多，就只有几个其他平台供我们参考。第一轮调研下来，发现海关上面的可处理部分很少，都是交给第三方来处理的，所以那一周到两周的时间基本上算是走错了方向。后面又陆陆续续的做了些功能方面的调研和参考借鉴，现在回过头去看之前做的功能图和用例图，暂且先不说图画的怎么样，内容确实很单薄，考虑的东西太少了。&emsp;后面开始第二轮调研，我记得好像大二的几个同学从这里开始参与项目调研了，中间有个同学在这方面了解挺多的，讨论的东西就实际了很多，组员们讨论起来还是很积极的，跟我之前想的可能不太一样，这一轮调研下来收货还是很多的，基调也基本差不多定下来了。&emsp;接下来好像在考试周的时候开始进行代码工程了，当时我们组是只有一个前端，而且这个前端同学那个时候会议比较多，看得到进展很少，而且我们这个项目页面其实也不少，工作量还是很大的，好在后面老师也给我们做了调整，多加了一个前端同学，这样进度上有了一些保证。寒假大概留校两周，讲实话，做下来的进度比我想的要慢一点，所以我给他们寒假制定的计划相对较多吧，大概五天两到三个页面，给我自己也定了要基本完成的计划。为了控制好进度，我也让他们三天汇报一次完成情况，组员也都很给力，基本上每一阶段的任务都可以完成。（插入schedule图片）&emsp;我们那个群平时聊天频率很低，然而过年那天感觉都快炸了。那一天的聊天量估计是之前的总和差不多吧，哈哈哈。&emsp;寒假16号回来的，感觉进度很是比较快的，离提交项目还有一个月左右，所以也没有那么紧张。这个时间点我的心态就没有那么紧张了，跟组员交流的状态比之前轻松了许多。这一阶段我的代码工作没有那么大，把重心放在了文档和前端页面上。在这之前，word对我来说真的就像记事本差不多，除了标题改一下，其他什么也都不会，但我当时自己一个人负责文档的时候没有发现这么多问题，因为有之前的模板在，其实问题超级多。幸亏组里有个写文档比较厉害的二年级同学，在这期间，也真的学了好多word技术包括制作PPT的技术，对我后面的文档之类的工作有很大的帮助。在此之前，我可能只关注代码和技术，对这些软实力可能并不是很注重。&emsp;待更]]></content>
      <categories>
        <category>竞赛</category>
      </categories>
      <tags>
        <tag>竞赛</tag>
        <tag>服务外包</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[First Vlog]]></title>
    <url>%2FFirst_Vlog.html</url>
    <content type="text"><![CDATA[第一次参加志愿者活动，去杭州图书馆做了三小时。一路上“偷偷”拍了些素材，然后哐哐哐哐剪出了第一个Vlog。Your browser does not support the video tag.]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>vlog</tag>
        <tag>杭州图书馆</tag>
        <tag>志愿者</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[你好，陈同学]]></title>
    <url>%2FNicetomeetyou.html</url>
    <content type="text"><![CDATA[Please enter the password to read the blog. Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微服务项目初步搭建]]></title>
    <url>%2Fcloud.html</url>
    <content type="text"><![CDATA[一个初步的微服务项目，docker部署。基于SpringBoot和SpringCloud整合Shiro、JWT、zuul、Eureka、docker、nginx等技术。项目简介这个小项目目前初步搭建好了微服务脚手架的一部分。使用shiro+jwt构建鉴权体系，spring cloud zuul做API网关进行路由转发，nginx通过反向代理对网关进行高可用和负载均衡和静态化，Eureka进行服务治理（Feign进行服务调用）。源码地址技术选型SpringBoot 2.0.4.RELEASESpringCloud Finchley.M9Shiro 1.4.0JWT 3.4.0Maven 3.5.4Jdk 8项目关键项目使用shiro+jwt的鉴权机制，通过JWTFilter将jwt整合到shiro，JWTToken存放用户名。JWTFilter部分代码@Override protected boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue) { if(isLoginAttempt(request,response)){ try{ //检查token executeLogin(request,response); return true; }catch (Exception e){ //token错误 responseError(response,e.getMessage()); } } //请求头不存在Token，可能是未登录时（游客）的访问状态，则无需检查token return true; } shiro中添加JWTFilter，对所有之前（其他过滤器）未匹配到的请求进行过滤。ShiroConfig部分代码 @Bean public ShiroFilterFactoryBean shiroFilter(SecurityManager securityManager){ ShiroFilterFactoryBean filterFactoryBean=new ShiroFilterFactoryBean(); Map&lt;String, Filter> filterMap=new HashMap&lt;>(); filterMap.put("jwt",new JWTFilter()); filterFactoryBean.setFilters(filterMap); filterFactoryBean.setSecurityManager(securityManager); Map&lt;String,String> filterChainDefinitionMap=new HashMap&lt;>(); filterChainDefinitionMap.put("/logout","anon"); filterChainDefinitionMap.put("/login","anon"); filterChainDefinitionMap.put("/**","jwt"); filterFactoryBean.setLoginUrl("/login"); filterFactoryBean.setSuccessUrl("/index"); filterFactoryBean.setUnauthorizedUrl("/403"); filterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap); return filterFactoryBean; } 项目出现的BUG打包时，报缺少公共模块jar包的错误。公共模块不需要打包，所以不需要添加maven插件，否则会报错，因为其他模块在打包的时候会自动添加依赖进去，如果这里打包了，其他的模块就找不到该依赖了。父项目添加springboot的maven插件打包时会报Unable to find main class。[ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.0.4.RELEASE:repackage (default) on project common-util: Execu tion default of goal org.springframework.boot:spring-boot-maven-plugin:2.0.4.RELEASE:repackage failed: Unable to find main class 改成以下的编译和测试的maven插件，项目可以打包成功。这个问题还没有找到合理的解释方案，我想可能是因为spring-boot-maven-plugin要打包成可执行jar包，而公共模块里是没有启动类（main class）的，所以使用此插件会报错。&lt;build> &lt;plugins> &lt;plugin> &lt;groupId>org.apache.maven.plugins&lt;/groupId> &lt;artifactId>maven-compiler-plugin&lt;/artifactId> &lt;version>3.1&lt;/version> &lt;configuration> &lt;source>${java.version}&lt;/source> &lt;target>${java.version}&lt;/target> &lt;/configuration> &lt;/plugin> &lt;plugin> &lt;groupId>org.apache.maven.plugins&lt;/groupId> &lt;artifactId>maven-surefire-plugin&lt;/artifactId> &lt;version>2.19.1&lt;/version> &lt;configuration> &lt;skipTests>true&lt;/skipTests> &lt;!--默认关掉单元测试 --> &lt;/configuration> &lt;/plugin> &lt;/plugins> &lt;/build> 子模块的依赖中加入docker-maven-plugin的插件。此插件可以快速的打包镜像、上传镜像等。最好加入spring-boot-maven-plugin插件，我记得打包过程中出现过问题就是缺少这个插件的原因（好像是空指针异常，记不太清了）。&lt;build> &lt;plugins> &lt;plugin> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>spring-boot-maven-plugin&lt;/artifactId> &lt;/plugin> &lt;plugin> &lt;groupId>com.spotify&lt;/groupId> &lt;artifactId>docker-maven-plugin&lt;/artifactId> &lt;version>1.0.0&lt;/version> &lt;executions> &lt;execution> &lt;id>build-image&lt;/id> &lt;phase>package&lt;/phase> &lt;goals> &lt;goal>build&lt;/goal> &lt;/goals> &lt;/execution> &lt;/executions> &lt;configuration> &lt;imageName>${project.parent.artifactId}/${project.artifactId}&lt;/imageName> &lt;dockerHost> http://192.168.43.2:2375&lt;/dockerHost> &lt;dockerDirectory>${project.basedir}&lt;/dockerDirectory> &lt;resources> &lt;resource> &lt;targetPath>/&lt;/targetPath> &lt;directory>${project.build.directory}&lt;/directory> &lt;include>${project.build.finalName}.jar&lt;/include> &lt;/resource> &lt;/resources> &lt;/configuration> &lt;dependencies> &lt;dependency> &lt;groupId>org.apache.httpcomponents&lt;/groupId> &lt;artifactId>httpclient&lt;/artifactId> &lt;version>4.5.6&lt;/version> &lt;/dependency> &lt;dependency> &lt;groupId>javax.activation&lt;/groupId> &lt;artifactId>activation&lt;/artifactId> &lt;version>1.1.1&lt;/version> &lt;/dependency> &lt;/dependencies> &lt;/plugin> &lt;/plugins> &lt;/build> docker不能使用localhost因为 bridge 是 Docker 默认的网络模式，换句话说，我一个 host 上的各个 container 从 docker 获取的 IP 都是不一样的（在主机编译部署后大家都是 localhost，但是在 docker 里面情况就不一样了）。解决方法利用docker的主机名，为eureka的容器配置一个主机名（任意即可），比如eureka-server。eureka-server模块配置文件eureka: client: fetch-registry: false register-with-eureka: false service-url: defaultZone: http://eureka-server:8000/eureka/ eureka-client模块配置文件eureka: client: service-url: defaultZone: http://eureka-server:8000/eureka/ 整合shiro出现No bean of type ‘org.apache.shiro.realm本来是把shiro的一些配置和JWTToken类这些放到公共模块中。但是一直报如上错误，提示我创建shiro.ini，但是这样的话采用硬编码方式把认证授权信息写在INI文件中,可维护性差。没办法，只能把shiro有关的配置和LoginController放在一个模块中。zuul会过滤敏感头部，导致丢失token。zuul会过滤掉Cookie, Set-Cookie, Authorization的header信息，导致jwt的token在转发时丢失。在ZuulProperties源码中可以看到默认的sensitiveHeaders如下。（如果头部出现含有sensitiveHeaders的信息，就不会添加到转发的请求中）private Set&lt;String> sensitiveHeaders = new LinkedHashSet(Arrays.asList("Cookie", "Set-Cookie", "Authorization")); 只要修改zuul的sensitiveHeaders配置即可。设置为空，设置为空，设置为空。zuul: sensitive-headers: nginx的http模块。我只要在nginx配置文件加入http{}，就会报“http&quot; directive is not allowed here in /etc/nginx/conf.d/app.conf错误。真的是个谜之错误，-_-。参考资料Spirng boot maven多模块打包踩坑Spring Cloud实战小贴士：Zuul处理Cookie和重定向gitee项目 micro-serviceexception is feign.RetryableException: Connection refused (Connection refused) executing GET http：//……]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>SpringCloud</tag>
        <tag>Shiro</tag>
        <tag>Nginx</tag>
        <tag>JWT</tag>
        <tag>Docker</tag>
        <tag>Eureka</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的技能树（惨不忍睹）]]></title>
    <url>%2Ffreetalk.html</url>
    <content type="text"><![CDATA[网上有很多文章都有这张图片，名为“2018Web开发需要掌握的技能”，正好自己在学习这一方面，所以想要看看自己都会点什么。&nbsp;Java 多线程掌握比较差、JVM还没了解过WebServerNginx 看到它只知道负载均衡，稍微有点了解RESTful APIs 据我所知使用GET、PUT、DELETE、POST请求方式来简化APIAUthenticationJWT 了解过一点，原理不是很懂，未实践过OAuth 2.0 未了解过❌Docker 基本部署可以实现Message BrokersRabbitMQ 未了解过❌Apache Kafka 未了解过❌CachingMemcached 未了解过❌Redis 可以实现缓存，但是数据结构学了就忘了DatabasesMySQL Sql优化不会MongoDB 未了解过❌ElasticSearch 未了解过❌GOF Design Patterns 只会单例模式、工厂模式好像又忘了Architectural Patterns 未了解过❌Give DDD a shot 未了解过❌Learn different testing techniques 了解过Mocking，其他不知道&nbsp;列出来后发现自己都停留在无脑调用接口，只会表面，对于深层的实现和原理都不怎么懂。而且有这么多叉叉都没了解过。少年不能浪费时间了，快醒醒啊！争取把这些都变成绿勾勾！！！]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>技能树</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记一次惨痛的Docker部署SpringBoot经历]]></title>
    <url>%2F%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%83%A8%E7%97%9B%E7%9A%84Docker%E9%83%A8%E7%BD%B2SpringBoot.html</url>
    <content type="text"><![CDATA[环境SpringBoot 2.0.4.RELEASEDocker 18.06.1-ceUbuntu 16.04Jdk 8Maven 3.5.4搭建SpringBoot项目导入web依赖，编写一个简单的Controller。然后添加Docker支持。&lt;!--docker maven 插件--> &lt;plugin> &lt;groupId>com.spotify&lt;/groupId> &lt;artifactId>docker-maven-plugin&lt;/artifactId> &lt;version>1.0.0&lt;/version> &lt;configuration> &lt;imageName>${project.artifactId}&lt;/imageName> &lt;!--注意 修改成远程服务器地址--> &lt;dockerHost> http://192.168.43.2:2375&lt;/dockerHost> &lt;dockerDirectory>src/main/docker&lt;/dockerDirectory> &lt;resources> &lt;resource> &lt;targetPath>/&lt;/targetPath> &lt;directory>${project.build.directory}&lt;/directory> &lt;include>${project.build.finalName}.jar&lt;/include> &lt;/resource> &lt;/resources> &lt;/configuration> &lt;dependencies> &lt;dependency> &lt;groupId>org.apache.httpcomponents&lt;/groupId> &lt;artifactId>httpclient&lt;/artifactId> &lt;version>4.5.6&lt;/version> &lt;/dependency> &lt;dependency> &lt;groupId>javax.activation&lt;/groupId> &lt;artifactId>activation&lt;/artifactId> &lt;version>1.1.1&lt;/version> &lt;/dependency> &lt;/dependencies> &lt;/plugin> 需要javax.activation依赖，不然会报java.lang.ClassNotFoundException: javax.activation.DataSource错误。环境配置好后，编写DockerfileFROM openjdk:8-jdk-alpine VOLUME /opt/common ADD dockerdemo-1.0.jar app.jar ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"] EXPOSE 8080 VOLUME ，VOLUME 指向了一个/opt/common的目录，由于 Spring Boot 使用内置的Tomcat容器，Tomcat 默认使用/opt/common作为工作目录。这个命令的效果是：在宿主机的/var/lib/docker目录下创建一个临时文件并把它链接到容器中的/opt/common目录ADD ，拷贝文件并且重命名ENTRYPOINT ，为了缩短 Tomcat 的启动时间，添加java.security.egd的系统属性指向/dev/urandom作为 ENTRYPOINT这里可以安装一款Docker integration插件，可以构建镜像，创建仓库，上传镜像等。安装这个插件后，Dockerfile文件就能显示语法了。其他功能暂时没用到。配置虚拟机环境配置Jdk 8 $ sudo apt-get update $ sudo apt-get install openjdk-8-jdk 使用java -version查看是否安装成功。然后配置jdk环境变量sudo gedit /etc/profile export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 export JRE_HOME=${JAVA_HOME}/jre export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib export PATH=${JAVA_HOME}/bin:$PATH source /etc/profile 配置Maven下载：http://mirrors.shu.edu.cn/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz## 解压 tar vxf apache-maven-3.5.4-bin.tar.gz ## 移动 mv apache-maven-3.5.4 /usr/local/maven3 仍然是在/etc/profile中配置环境变量sudo gedit /etc/profile MAVEN_HOME=/usr/local/maven3 export MAVEN_HOME export PATH=${PATH}:${MAVEN_HOME}/bin source /etc/profile 构建、上传、运行镜像使用docker build插件可以快速构建。也可以在Terminal输入以下命令进行构建。mvn package docker:build 构建成功后，就可以在docker中使用docker images查看镜像。REPOSITORY TAG IMAGE ID CREATED SIZE dockerdemo latest 2d6bfc475fa7 44 hours ago 119MB 运行该镜像docker run -p 8080:8080 -t dockerdemo 运行成功后测试Controller是否成功即可。遇到的问题1、docker构建镜像报错org.apache.http.conn.ConnectTimeoutException:contact timed out如果之前没有配置过Docker的远程访问，那么应该是这个原因。开启API访问服务：$ systemctl show --property=FragmentPath docker FragmentPath=/lib/systemd/system/docker.service $ sudo gedit /lib/systemd/system/docker.service #修改ExecStart=/usr/bin/dockerd -H fd:// 为 ExecStart=/usr/bin/dockerd -H unix:///var/run/docker.sock -H tcp://0.0.0.0:2375 #重载Docker $ sudo systemctl daemon-reload $ sudo systemctl restart docker docker -H tcp://127.0.0.1:2376 version Client: Version: 18.06.1-ce API version: 1.38 Go version: go1.10.3 Git commit: e68fc7a Built: Tue Aug 21 17:24:56 2018 OS/Arch: linux/amd64 Experimental: false Server: Engine: Version: 18.06.1-ce API version: 1.38 (minimum version 1.12) Go version: go1.10.3 Git commit: e68fc7a Built: Tue Aug 21 17:23:21 2018 OS/Arch: linux/amd64 Experimental: false 这样就说明API远程访问已开启。也可通过以下方法验证ps -ef | grep docker 可以看到2375端口已经在监听了。再进行测试查看是否成功。但是还是报了这个错误，网上找了很多没有类似问题，最后找到一个有类似问题的，不过他是将服务器部署到阿里云上的，是因为阿里云控制台里的安全组没有开启2375端口。Docker Maven插件本地构建镜像发布至远程服务器但是我这个是本地的，所以没有效果。只好重装了Ubuntu，意外的成功了，猜想可能是之前的Ubuntu或Docker的配置导致了这个错误。2、报错java.lang.ClassNotFoundException: javax.activation.DataSource是因为docker maven插件缺少javax.activation依赖，加入以下依赖&lt;dependency> &lt;groupId>javax.activation&lt;/groupId> &lt;artifactId>activation&lt;/artifactId> &lt;version>1.1.1&lt;/version> &lt;/dependency> 3、报错Add failed: stat /ver/lib/docker/tmp/docker-builderXXXXXX:no such file or dir报这个错误是因为打包名字不一致，pom.xml的artifactId与Dockerfile镜像名要一致。&nbsp;要是怎么样都不行，重装吧少年!&nbsp;参考资料Spring Boot 2.0(四)：使用 Docker 部署 Spring Bootdocker开启远程访问Docker Maven插件本地构建镜像发布至远程服务器4、为什么使用docker?之Docker建立远程连接]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Docker</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github代码上传]]></title>
    <url>%2Fgithub%E4%BB%A3%E7%A0%81%E4%B8%8A%E4%BC%A0.html</url>
    <content type="text"><![CDATA[$ git init$ git add .$ git commit -m &quot;first commit&quot;$ git remote add origin https://github.com/yourName/yourRepo.git$ git push -u origin master#上传多个项目到一个仓库$ git add .$ git commit -m &quot;second commit&quot;$ git push -u origin master#push失败,本地与仓库不一致，先pull下来$ git pull --rebase origin master$ git push -u origin master]]></content>
      <categories>
        <category>技术杂烩</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis作为Mybatis辅存]]></title>
    <url>%2Fredis%E4%BD%9C%E4%B8%BA%E8%BE%85%E5%AD%98.html</url>
    <content type="text"><![CDATA[Q&amp;A个人思考Q1：为什么要用redis作为mysql的辅存？A：与数据库的交互无非读和写。在读这一方面，数据的访问一般来说都不是平均的，有些数据经常被访问称为“热数据”，还有一些不会经常访问到的则称为冷数据。如果要在这里优化，第一感觉肯定是去优化热数据的读取速度，和计算机组成原理学的缓存一样，越靠近CPU的Cache读写速度越快，所以我觉得在读取时可以先去访问redis，没有再去数据库里查找。然后就是写这一方面，可能瞬间写的压力非常大，造成拥挤甚至可能系统出错。因为在写的速度方面redis应该是优于直接写入数据库的，所以可以先写入redis，然后再慢慢写入数据库。这样一来，对写的压力减少了一些，但是数据的同步问题出现了。Q2：那为什么选择redis还不是其他的工具？A：emm…我觉得这个问题只能先留着吧，其他也都没学过。注：以上纯属个人想法，不一定都是正确的。查阅一番资料后因为redis是存储在内存中，mysql是存储在硬盘中，redis的读取速度比直接读取mysql快很多，所以一般用于热数据的读取，不适合数据高一致性（直接操作Mysql，就不要考虑用redis速度快的特性来写数据）。如果使用redis作为缓存的话，先去redis中判断数据是否存在，如果存在，则直接返回redis中的数据。不存在的话，就会去数据库中读取并缓存到redis中。同时Redis支持数据的持久化，服务器关闭重启后可以重新加载。有两种持久化方式：快照（RDB文件）和追加式文件（AOF文件）。RDB持久化方式会在一个特定的间隔保存那个时间点的一个数据快照，AOF方式会记录每一个写操作。在服务启动时，这些记录会被逐条执行重建原来的数据。（默认情况下，AOF被优先使用）Redis自动进行热数据缓存：方案一、设置ExpiredTime，如果访问频繁的数据生存时间会一直更新，冷数据如果不再次访问的话，就会在指定时间内过期清除掉，间接实现热数据缓存。两种方式实现Redis缓存一、全局实现Redis缓存1、导入依赖&lt;dependency> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>spring-boot-starter-data-redis&lt;/artifactId> &lt;/dependency> 2、重写org.apache.ibatis.cache.Cache//使用redisTemplate的对应方法重写Cache的方法 public class RedisCache implements Cache { private static final Logger logger = LoggerFactory.getLogger(RedisCache.class); //实例一个读写锁 private final ReadWriteLock readWriteLock = new ReentrantReadWriteLock(); private final String id; // cache instance id private RedisTemplate redisTemplate; private static final long EXPIRE_TIME_IN_MINUTES = 30; // redis过期时间 //必须要有一个初始化id的构造器 public RedisCache(String id) { if (id == null) { throw new IllegalArgumentException("Cache instances require an ID"); } this.id = id; } @Override public String getId() { return id; } /** * Put query result to redis * * @param key * @param value */ @Override @SuppressWarnings("unchecked") public void putObject(Object key, Object value) { try { RedisTemplate redisTemplate = getRedisTemplate(); ValueOperations opsForValue = redisTemplate.opsForValue(); opsForValue.set(key, value, EXPIRE_TIME_IN_MINUTES, TimeUnit.MINUTES); logger.debug("Put query result to redis"); } catch (Throwable t) { logger.error("Redis put failed", t); } } /** * Get cached query result from redis * * @param key * @return */ @Override public Object getObject(Object key) { try { RedisTemplate redisTemplate = getRedisTemplate(); ValueOperations opsForValue = redisTemplate.opsForValue(); logger.debug("Get cached query result from redis"); return opsForValue.get(key); } catch (Throwable t) { logger.error("Redis get failed, fail over to db", t); return null; } } /** * Remove cached query result from redis * * @param key * @return */ @Override @SuppressWarnings("unchecked") public Object removeObject(Object key) { try { RedisTemplate redisTemplate = getRedisTemplate(); redisTemplate.delete(key); logger.debug("Remove cached query result from redis"); } catch (Throwable t) { logger.error("Redis remove failed", t); } return null; } /** * Clears this cache instance */ @Override public void clear() { RedisTemplate redisTemplate = getRedisTemplate(); redisTemplate.execute((RedisCallback) connection -> { connection.flushDb(); return null; }); logger.debug("Clear all the cached query result from redis"); } /** * This method is not used * * @return */ @Override public int getSize() { return 0; } @Override public ReadWriteLock getReadWriteLock() { return readWriteLock; } private RedisTemplate getRedisTemplate() { if (redisTemplate == null) { //若redisTemplate不存在，则从ApplicaitonContext取出redisTemplate redisTemplate = SpringContextHolder.getBean("redisTemplate"); } return redisTemplate; } } 3、CMS层省略不放进文章里了，开始测试第一次根据UserName查询User可以看到Cache Hit Ratio 为0，说明在Redis中没有对应的缓存，所以从数据库中查询数据。在RedisDesktopManager可以看到已经存入一个序列化数据。第二次查询就可以看到Cache Hit Ratio为1.0，并且没有查询数据库的日志消息，说明此次查询是从Redis获取的数据。二、使用注解来使用Redis缓存1、构造fastjson序列化器需要另外导入fastjson依赖&lt;dependency> &lt;groupId>com.alibaba&lt;/groupId> &lt;artifactId>fastjson&lt;/artifactId> &lt;version>1.2.31&lt;/version> &lt;/dependency> 配置FastJsonRedisSerializerpublic class FastJsonRedisSerializer&lt;T> implements RedisSerializer&lt;T> { private static final Charset DEFAULT_CHARSET = Charset.forName("UTF-8"); private Class&lt;T> clazz; public FastJsonRedisSerializer(Class&lt;T> clazz) { this.clazz = clazz; //fastjson1.2.25版本之后，需要开启AutoTypeSupport //否则从redis缓存中读取的数据会报autoType is not support.错误。 ParserConfig.getGlobalInstance().setAutoTypeSupport(true); } //重写序列化方法 @Override public byte[] serialize(T t) throws SerializationException { if (t == null) { return new byte[0]; } return JSON.toJSONString(t, SerializerFeature.WriteClassName).getBytes(DEFAULT_CHARSET); } //重写反序列化方法 @Override public T deserialize(byte[] bytes) throws SerializationException { if (bytes == null || bytes.length &lt;= 0) { return null; } String str = new String(bytes, DEFAULT_CHARSET); return (T) JSON.parseObject(str, clazz); } } 配置完序列化器后，再配置Redis缓存的相关配置。@Configuration @EnableCaching public class RedisCacheConfig { @Bean public RedisTemplate&lt;Object, Object> redisTemplate(RedisConnectionFactory redisConnectionFactory) { RedisTemplate&lt;Object, Object> template = new RedisTemplate&lt;>(); template.setConnectionFactory(redisConnectionFactory); //因为SpringBoot整合的最新的redis中的CacheManager是没有RedisTemplate的构造方法的。 //所以似乎在RedisTemplate设置Key和Value的序列器是无效的（实践过确实如此） //但是在此设置之后，在cacheManager配置时也可以从redisTemplate中取出来 FastJsonRedisSerializer&lt;Object> serializer=new FastJsonRedisSerializer&lt;>(Object.class); template.setValueSerializer(serializer); //使用StringRedisSerializer来序列化和反序列化redis的key值 template.setKeySerializer(new StringRedisSerializer()); template.afterPropertiesSet(); return template; } /*配置缓存管理器 *如果配置自己定义的序列化器，要传RedisTemplate进来。或者在里面重新实例序列化器，这里使用前者的方式 */ @Bean public CacheManager cacheManager(RedisConnectionFactory redisConnectionFactory,RedisTemplate redisTemplate) { // 生成一个默认配置，通过config对象即可对缓存进行自定义配置 // serialzeValuesWith方法会重新实例化RedisCacheConfiguration，所以在生成配置时，不能分开配置，只能进行链式配置 RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig() .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(redisTemplate.getValueSerializer())) .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisTemplate.getKeySerializer())); config = config.entryTtl(Duration.ofMinutes(1)) // 设置缓存的默认过期时间，也是使用Duration设置 .disableCachingNullValues(); // 不缓存空值 // 设置一个初始化的缓存空间set集合 Set&lt;String> cacheNames = new HashSet&lt;>(); cacheNames.add("user"); Map&lt;String, RedisCacheConfiguration> configMap = new HashMap&lt;>(); configMap.put("user", config.entryTtl(Duration.ofSeconds(120))); RedisCacheManager cacheManager = RedisCacheManager.builder(redisConnectionFactory) // 使用自定义的缓存配置初始化一个cacheManager .initialCacheNames(cacheNames) // 注意这两句的调用顺序，一定要先调用该方法设置初始化的缓存名，再初始化相关的配置 .withInitialCacheConfigurations(configMap) .build(); return cacheManager; } } 然后在需要缓存的地方加上@Cacheable注解即可，unless表示如果结果为空则不进行缓存@Cacheable(value = "user", key = "#root.targetClass + #name", unless = "#result eq null") 进行测试查询，第一次仍然是去访问数据库，第二次是从redis缓存中查到的。参考资料SpringBoot2整合Redis缓存Redis持久化_segmentfault有没有方法让redis 自动做热数据缓存？]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Redis</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringBoot2.0.4配置hystrix-dashboard，出现Unable to connect to Command Metric Stream错误]]></title>
    <url>%2Fhystrix_dashboard.html</url>
    <content type="text"><![CDATA[配置Hystrix-dashboard后进入监控页面出现Unable to connect to Command Metric Stream。本来还以为配置监控面板应该是件比较简单的事情，没想到被SpringBoot版本坑了。当前的SpringBoot版本为2.0.4.RELEASE，SpringCloud版本为Finchley.M9。新建一个hystrix_dashboard模块，导入相应的依赖spring-cloud-starter-netflix-hystrix-dashboard。在Main启动类上加上@EnableHystrixDashboard注解，配置文件配置一下端口和应用名即可。并且在消费模块配置actuator依赖。这时打开dashboard输入URL后就是下面这个样子。&nbsp;找了很多解决方案，才发现是actuator版本问题。actuator的2.x版本endpoint是在/actuator之下的，并且只暴露了health和info端点。详细文档点我 所以需要为服务实例添加hystrix.stream端点。management: endpoints: web: exposure: include: ['hystrix.stream','info','health'] 此时重启后发现日志输出Registered ‘/actuator/hystrix.stream’ to hystrix.stream-actuator-endpoint再输入http: //localhost:8100/actuator/hystrix.stream就发现可以进行监控了。如下图：&nbsp;如果想直接通过http: //localhost:8100/hystrix.stream，只需要配置端点的base-path即可management: endpoints: web: base-path: / 理论上修改base-path应该就可行了的，但是又出错了。哎，又不知道是哪里的问题，先留着吧！贴一张hystrix-dashboard界面各部分介绍图：]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>报错</tag>
        <tag>Hystrix-dashboard</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringBoot2.0.4配置Eureka出现Unable to start embedded Tomcat错误]]></title>
    <url>%2Feureka.html</url>
    <content type="text"><![CDATA[导入依赖官网版本对应的描述与SpringBoot 2.x版本兼容的SpringCloud版本为Finchley2.0.4版本pom依赖为spring-cloud-starter-netflix-eureka-server(以后查询所需依赖去官网查)但是导入依赖后遇到的了无法启动内置Tomcat的问题？jdk版本问题，jaxb的依赖问题，JAXB API是java EE 的API，因此在java SE 9.0 中不再包含这个 Jar 包。 java 9 中引入了模块的概念，默认情况下，Java SE中将不再包含java EE 的Jar包 而在 java 6/7/8 时关于这个API 都是捆绑在一起的。所以导入jaxb-core、jaxb-api、jaxb-impl、activation四个jar包即可，或者导入jdk8。注：IDEA内置的jdk8也会报这个错误，只能使用自己另外安装的jdk8。pom.xml完整文件&lt;?xml version="1.0" encoding="UTF-8"?> &lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"> &lt;modelVersion>4.0.0&lt;/modelVersion> &lt;groupId>me.freelee&lt;/groupId> &lt;artifactId>springcloud_eureka&lt;/artifactId> &lt;version>0.0.1-SNAPSHOT&lt;/version> &lt;packaging>jar&lt;/packaging> &lt;name>springcloud_eureka&lt;/name> &lt;description>Demo project for Spring Boot&lt;/description> &lt;parent> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>spring-boot-starter-parent&lt;/artifactId> &lt;version>2.0.4.RELEASE&lt;/version> &lt;relativePath/> &lt;!-- lookup parent from repository --> &lt;/parent> &lt;properties> &lt;project.build.sourceEncoding>UTF-8&lt;/project.build.sourceEncoding> &lt;project.reporting.outputEncoding>UTF-8&lt;/project.reporting.outputEncoding> &lt;java.version>1.8&lt;/java.version> &lt;spring-cloud.version>Finchley.M9&lt;/spring-cloud.version> &lt;/properties> &lt;dependencies> &lt;dependency> &lt;groupId>com.sun.xml.bind&lt;/groupId> &lt;artifactId>jaxb-core&lt;/artifactId> &lt;version>2.2.11&lt;/version> &lt;/dependency> &lt;dependency> &lt;groupId>javax.xml.bind&lt;/groupId> &lt;artifactId>jaxb-api&lt;/artifactId> &lt;/dependency> &lt;dependency> &lt;groupId>com.sun.xml.bind&lt;/groupId> &lt;artifactId>jaxb-impl&lt;/artifactId> &lt;version>2.2.11&lt;/version> &lt;/dependency> &lt;dependency> &lt;groupId>org.glassfish.jaxb&lt;/groupId> &lt;artifactId>jaxb-runtime&lt;/artifactId> &lt;version>2.2.10-b140310.1920&lt;/version> &lt;/dependency> &lt;dependency> &lt;groupId>javax.activation&lt;/groupId> &lt;artifactId>activation&lt;/artifactId> &lt;version>1.1.1&lt;/version> &lt;/dependency> &lt;dependency> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>spring-boot-starter-web&lt;/artifactId> &lt;/dependency> &lt;dependency> &lt;groupId>org.springframework.cloud&lt;/groupId> &lt;artifactId>spring-cloud-starter-netflix-eureka-server&lt;/artifactId> &lt;/dependency> &lt;dependency> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>spring-boot-starter&lt;/artifactId> &lt;/dependency> &lt;dependency> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>spring-boot-starter-test&lt;/artifactId> &lt;scope>test&lt;/scope> &lt;/dependency> &lt;/dependencies> &lt;dependencyManagement> &lt;dependencies> &lt;dependency> &lt;groupId>org.springframework.cloud&lt;/groupId> &lt;artifactId>spring-cloud-dependencies&lt;/artifactId> &lt;version>${spring-cloud.version}&lt;/version> &lt;type>pom&lt;/type> &lt;scope>import&lt;/scope> &lt;/dependency> &lt;/dependencies> &lt;/dependencyManagement> &lt;repositories> &lt;repository> &lt;id>spring-milestones&lt;/id> &lt;name>Spring Milestones&lt;/name> &lt;url>https://repo.spring.io/libs-milestone&lt;/url> &lt;snapshots> &lt;enabled>false&lt;/enabled> &lt;/snapshots> &lt;/repository> &lt;/repositories> &lt;build> &lt;plugins> &lt;plugin> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>spring-boot-maven-plugin&lt;/artifactId> &lt;/plugin> &lt;/plugins> &lt;/build> &lt;/project> &nbsp;参考资料:解决方案解决方案中文]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>Eureka</tag>
        <tag>报错</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker学习笔记]]></title>
    <url>%2Fdocker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
    <content type="text"><![CDATA[Docker与虚拟机Docker是Client-Server结构。虚拟机技术通过Hypervisor层抽象底层基础设施资源，提供相互隔离的虚拟机，通过统一配置、统一管理，计算资源的可运维性，以及资源利用率都能够得到有效的提升。同时，虚拟机提供客户机操作系统，客户机变化不会影响宿主机，能够提供可控的测试环境，更能够屏蔽底层硬件甚至基础软件的差异性，让应用做到的广泛兼容。然而，再牛逼的虚拟化技术，都不可避免地出现计算、IO、网络性能损失，毕竟多了一层软件，毕竟要运行一个完整的客户机操作系统。容器技术严格来说并不是虚拟化，没有客户机操作系统，是共享内核的。容器可以视为软件供应链的集装箱，能够把应用需要的运行环境、缓存环境、数据库环境等等封装起来，以最简洁的方式支持应用运行，轻装上阵，当然是性能更佳。Docker镜像特性则让这种方式简单易行。当然，因为共享内核，容器隔离性也没有虚拟机那么好。服务器虚拟化解决的核心问题是资源调配，而容器解决的核心问题是应用开发、测试和部署。镜像命令docker info 查看docker信息详情docker images 列出本地镜像，同一仓库源可以有多个Tag（版本），使用Repository：Tag选择不同版本&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;–no-trunc 全部信息docker rmi 镜像名 删除镜像&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-f 强制删除Docker history 镜像名 列出镜像的变更历史容器命令docker run [OPTIONS] image [COMMAND] 新建并启动容器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OPTIONS：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;–name=“New Name” 指定容器新名字&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-d 后台运行容器，并返回容器ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-i 以交互模式运行容器，通常与-t使用（-it）&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-t 为容器重新分配一个输入终端&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-P 随机分配端口映射&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-p 指定端口映射（主机端口：容器端口）docker ps [OPTIONS] 列出所有正在运行的容器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OPTIONS:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-a 列出正在运行的 + 历史运行过的&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-q 静默模式，只显示容器编号docker start/restart/stop 容器名/容器ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kill 强制删除&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rm 容器ID 删除已停止容器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rm -f $(docker ps -a -q) 删除所有容器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rmi 镜像名docker logs -f -t –tail 容器ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-f 跟随最新的日志打印&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;–tail 数字 显示最后指定的条数docker top 容器ID 查看容器内运行的进程docker inspect 容器ID 查看容器内部细节exit 停止并退出容器Ctrl+P+Q 不停止退出容器docker attach ID 进入容器，不新建进程docker exec -t ID ls -l /tmp /bin/bash 直接打印返回结果docker cp 容器ID：容器内路径 目的主机路径 把文件从容器拷贝到主机docker commit -m=”描述” -a=”作者” 容器ID 新镜像名:[标签名] 提交修改后容器生成新的镜像Docker容器数据卷容器的持久化、容器间继承+共享数据数据卷：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;容器内添加：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;直接添加：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;docker run -it -v /宿主机绝对路径目录：/容器内目录 镜像名&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;容器停止退出后，主机修改数据可以同步&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;权限：docker run -it -v /宿主机绝对路径目录：/容器内目录：ro 镜像名 数据只读&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dockerfile添加：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1）编写Dockerfile文件&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2）docker build -f 目录/Dockerfile -t freelee/镜像名 构建镜像&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3）Docker会默认指定主机数据卷地址（可通过inspect命令查看）数据卷容器：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;挂载数据卷的容器，其他容器通过挂载这个（父容器）实现数据共享。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;容器间传递共享：docker run -it –name dc02 –volumes-from dc01 freelee/centos&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;删除父容器后，原数据不会丢失。子容器依旧可以共享数据，数据卷生命周期一直到没有容器使用它为止DockerfileDockerfile是用来构建Docker镜像的构建文件&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1）每条指令保留字必须大写且后跟参数&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2）从上到下，顺序执行&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3）每条指令都会创建一个新的镜像层，并对镜像进行提交指令：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FROM 基础镜像&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MAINTER 作者和邮箱&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RUN 构建时需要执行的命令&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EXPOSE 暴露的端口号&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WORKDIR 工作目录&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ENV 构建过程中设置环境变量&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ADD 将宿主机目录下文件拷贝进镜像且ADD命令会自动处理URL和解压tar包&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VOLUMN 容器数据卷&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CMD 容器运行时执行的命令，最后一个命令会覆盖前面&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ENTRYPOINT 容器运行时执行的命令，后面的命令会叠加在后面&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ONBUILD 继承此镜像的子镜像在构建时会触发Dockerfile案例案例一：原始centos进入镜像默认路径为 / ，且不支持vim编辑器和查看网络配置ifconfigFROM centos ENV mypath /tmp WORKDIR $mypath RUN yum -y install vim RUN yum -y install net-tools EXPOSE 80 CMD /bin/bash 案例二：ONBUILD指令FROM centos RUN yum install -y curl ENTRYPOINT ["curl","-s","http://ip.cn"] ONBUILD RUN echo "father image onbuild......" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;知乎上网易云关于Docker和虚拟机的回答]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>学习笔记</tag>
        <tag>Dockerfile</tag>
        <tag>容器数据卷</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机网络学习记录]]></title>
    <url>%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.html</url>
    <content type="text"><![CDATA[大二下学期开过这门课，当时因为课时原因大概只讲到DNS，而且很多都忘了，现在再复习一遍以此记录。课程学习视频：哈尔滨工业大学 计算机网络课程视频参考书籍：《计算机网络》（第七版）物理层信道复用技术（2018.09.21）为什么有信道复用技术？传统信息传输是单对单进行的，如果用户不使用的话就会空闲，信道利用率将会很低。因此提出了复用概念，但是这里又有一个问题，多个用户如果同时使用，信道的传输的信息岂不是乱了套？！接着有了以下几种主要复用技术。频分复用：用户分配到一定的频带，不同的用户再不用的频带上进行传输时不会相互干扰，常见应用就是有线电视，遥控板其实就是调频来换台。波分复用：跟频分复用类似，只不过是在光波中进行不同的波长传输（也就是不同的频率）。时分复用：将时间分片，用户分配到不同的时间片进行传输。码分复用：码分复用比较复杂一点，详细介绍一下实现原理。定义：“码分复用是用一组包含互相正交的码字的码组携带多路信号”不同的站分配到不同的唯一的m bit的码片序列，且须相互正交，这样才能抵抗干扰。$$内积公式： S·T=\frac {1}{m} \sum_{i=1}^m S_iT_i=0$$举个例子：假设有两个站S和T，设站S的码片序列为（-1 -1 -1 +1 +1 -1 +1 +1），站T的码片序列为（-1 -1 +1 -1 +1 +1 +1 -1），内积计算可得这两个码片序列结果为0。注：然后我们通常指定传输比特1就是1，发送比特0时为-1（运用了正交的特性）。假设S站发送了数据是1即（-1 -1 -1 +1 +1 -1 +1 +1），T发送的数据也是1即（-1 -1 +1 -1 +1 +1 +1 -1）。叠加后就是（-1 -1 -1 +1 +1 -1 +1 +1）+（-1 -1 +1 -1 +1 +1 +1 -1）接收方如果是使用S站的码片序列，那么经过以下计算：（-1 -1 -1 +1 +1 -1 +1 +1）·（（-1 -1 -1 +1 +1 -1 +1 +1）+（-1 -1 +1 -1 +1 +1 +1 -1））=1+0=1，就是S发送的数据。因为T站和S站码片序列正交，所以使用T发送的数据不管和S发送的数据如果叠加，其内积结果都是0。这样就是实现不同用户之间的信号不混乱。应用层超文本传送协议HTTP（2018.09.23）定义HTTP协议定义了浏览器如何向万维网服务器请求万维网文档，以及服务器如何把文档传送给浏览器。是应用层的一个协议使用了TCP协议来保证数据的可靠传输，毫无疑问它是互联网通信的基础。工作过程一开始，客户端向服务器端发送TCP连接的请求，服务器端默认在80端口监听客户端建立TCP连接请求。在与服务器建立好TCP连接后，客户端向服务器端请求资源，发送HTTP请求报文，服务器端收到请求报文后，将请求内容响应给客户端。完成请求后，TCP的连接就被释放以供其他的请求。在这个过程中，服务器是如何“理解”客户端的请求的，并且是如何响应给客户端的呢？这就是http协议要干的事情，简单来说http协议规定客户端和服务器如何进行交互。特性http协议是==无状态==的，也就是说不管客户端之前是否访问过服务器某一页面或资源，每一次的访问都与第一次访问时相同。这么设置有好有坏，好处是服务器不需要去记录和维护客户端的状态，能支持高并发的请求。坏处是这样简单的设计在一些场景就显得十分不足，比如购物,当服务器无法记录的之前的状态时，那你的购物车的商品就无法保存下来，每一次打开页面购物车都是空的，解决方法是使用cookie来保存状态。http协议是==无连接==的，每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间，但是现在的网页是比较复杂的，如果每次只处理一个请求，单单就连接建立释放就会浪费很多时间和资源，所以后来出现的长连接方式比较好的解决了这个问题。报文结构请求报文：客户端向服务器发送的请求报文响应报文：服务器响应给客户端的回答。请求报文和响应报文是由三部分组成的。请求报文：请求行、请求头部、请求体1、请求行包含了请求的类型，请求资源的路径和http协议版本信息请求类型：下表列举了三种常用的请求类型类型含义GET请求读取URL所标志的信息POST给服务器添加信息HEAD请求读取由URL所标志的信息的头部GET请求是最常用的请求类型，当向服务器请求资源时通过URL来定位，比如https://www.zhihu.com/search?type=content&amp;q=%E8%AE%A1%E7%AE%97%E6%9C%BA 三种请求类型应用场景：请求知乎服务器里的search页面的资源。但是涉及一些登录注册时的相关信息提交时，这种请求类型不安全。POST请求可以将请求的信息封装在请求数据中（GET请求的请求数据部分通常为空），不会在URL暴露给用户。当只需要查看页面的状态时，使用HEAD请求效率会很高，因为它只返回响应头，而不返回页面的内容。注：URI：统一资源标识符，URL：统一资源定位符。URI包括URL和URN。简单来说，URI是通过某一规则来唯一确定某一资源，URL是通过定位（比如主机上资源的路径）来唯一确定某一资源。定位就可以近似看做URI的某一规则中的一种。2、请求头部有很多属性（键值对）组成。常见的有Host（主机域名）、User-Agent（浏览器信息）、Accept-Language（返回内容使用的语言）、Connection（决定执行当前的事务后是否关闭连接）获取更多请求字段信息3、请求数据请求报文里很少使用到这个字段，POST请求可能会常用到。在响应报文里经常用到此字段来返回页面内容。响应报文：状态行、响应头、响应正文1、状态行通过状态码返回访问的状态。状态码状态信息1XX代表请求已被接受，需要继续处理2XX代表请求已成功被服务器接收、理解、并接受3XX代表需要客户端采取进一步的操作才能完成请求。通常，这些状态码用来重定向，后续的请求地址（重定向目标）在本次响应的Location域中指明4XX代表了客户端看起来可能发生了错误，妨碍了服务器的处理5XX表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理获取更多详细状态码信息2、响应头也是由很多字段组成（键值对）。常见的有content-length（以八位字节数组表示的请求体的长度）、content-type（请求体的 多媒体类型 用于POST和PUT请求中）、date(发送该消息的日期和时间)……获取更多请求字段信息3、响应正文服务器响应给客户端所请求的内容。如：连接建立方式非持续连接：在http1.0版本，对于页面上的每一个链接的请求都需要重新创建一个TCP连接，不仅仅是在时间上延长很多，并且在服务器每次建立连接都要分配缓存和变量，在请求很大的时候，服务器的压力会非常的重。持续连接：在http1.1版本中，使用了持续连接，也就是客户端发送请求服务器响应后仍然可以保持这条连接，在请求头中会带上connection：keep-alive的字段。这么一来在时间和资源上都大大减少。持续连接又分为两种：请求管线化和请求非管线化。非管线化的特点是在前一个请求得到响应后才能发送下一个请求，所以在发送完请求到收到响应这段时间TCP连接是空闲在那的，造成了资源的浪费。而管线化则是可以连续的发送请求，服务器连续响应，很大的提高的利用率和响应效率。http发展http1.1除了在长连接上与1.0版本不同，在缓存方面http1.0是通过条件请求（请求的if-Modified-Since和响应的Last-Modified）的字段来判断缓存是否有效。http1.1加入了ETag来标识URL上的资源的特定版本。在带宽优化方面允许请求资源的某一部分（Content-Range字段实现），新增一个100状态码用来在请求资源前先发送一个只带请求头的请求，这样一来避免在不知道服务器是否会拒绝请求的情况下仍然去发送实体资源的请求，避免了带宽的浪费。http2.0版本在速度上比http1.1快了很多。具体可以参考HTTP1.0、HTTP1.1 和 HTTP2.0 的区别Cookie和Session简述（2018.09.28）Cookie机制之前谈到http协议是无状态的，也就是说每一次访问页面时服务器都把这次请求当作第一次访问，这样就会有很多局限性。Cookie机制很好解决了这个问题。Cookie是一种服务器发给客户端并且存储在客户端的文本文件。如果请求页面时，客户端的请求头没有Cookie信息时，服务器在响应时就会返回一个Set-Cookie头部来创建cookie。Set-Cookie头部的格式为：Set-Cookie: value[; expires=date][; domain=domain][; path=path][; secure] value：是一个name-value的键值对，指定Cookie的值expires：可以设置一个过期时间，如果不设置，那么这个cookie会在浏览器页面关闭时销毁（称为会话Cookie）。domain：cookie所属的域及子域。secure：表示该cookie只能用https传输。一般用于包含认证信息的cookie，要求传输此cookie的时候，必须用https传输。path：cookie的所属路径之后客户端再次访问页面时就会在http请求带上Cookie头部，这样一来服务器就能通过Cookie获取到该用户的状态了。过程如图：但是Cookie是明文传输的，容易被篡改，存在很大的安全隐患，Session机制解决了这个问题。Session机制与Cookie存储在客户端不同的是，Session是存放在服务器上的，但Session机制是基于Cookie上面。其过程是当用户提交一个HTTP请求后，服务器经过验证后将用户信息存放在服务器端，并且返回一个包含key为Session ID的键值对的Cookie。客户端保存这个Session ID，以后的HTTP请求只要带上Session ID即可。因为用户信息是存放在服务器上，对用户来说是透明的，大大减少了明文篡改造成的安全威胁。如果客户端禁用Cookie，就会采用URL方式带上Session ID。]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>cookie</tag>
        <tag>session</tag>
        <tag>http协议</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringBoot整合项目练习]]></title>
    <url>%2Fspringboot(%E4%B8%80).html</url>
    <content type="text"><![CDATA[一个SpringBoot整合项目练习，使用到的技术Mybatis+Druid+PageHelper+Swagger2+thymeleaf，采用RESTful的url风格。项目简介练习项目的主要技术如下：SpringBoot 2.0.4Mybatis 1.3.2Druid 1.1.8PageHelper 1.2.5Swagger2 2.6.1thymeleaf按照个人理解简单介绍下这几个技术的功能SpringBoot就是对Spring框架的一个优化，在配置方面进行比较大的优化。减少了很多的底层配置，大量的注解开发避免了xml配置的繁琐。 MyBatis是一个持久层框架，可以将POJOs直接与数据库的记录进行映射。以前的JDBC需要将SQL语句写进Java代码中，而且需要在结果集上遍历然后进行映射，比较繁琐。而MyBatis优化了这些步骤，它将结果集可以直接与POJO进行映射，并且将sql语句通过xml或注解进行配置。 Druid是阿里巴巴开发的一个数据库系统，不仅提供了强大的数据库监控功能，而且可以作为一个数据库连接池，性能方面非常优秀。 PageHelper是一款Mybatis的分页插件，通过拦截器获取到同一线程的SQL语句，然后包装成有分页功能的SQL语句。PageInfo封装了很多分页的信息。 Swagger2可以高效的帮助我们生成业务接口的文档，如果项目有些业务逻辑修改了，也会自动更新成新的文档。 项目实现导入依赖版本管理&lt;properties> &lt;project.build.sourceEncoding>UTF-8&lt;/project.build.sourceEncoding> &lt;project.reporting.outputEncoding>UTF-8&lt;/project.reporting.outputEncoding> &lt;java.version>1.8&lt;/java.version> &lt;mybatis-springboot.version>1.3.2&lt;/mybatis-springboot.version> &lt;swagger2.version>2.6.1&lt;/swagger2.version> &lt;mysql.version>5.1.46&lt;/mysql.version> &lt;druid.version>1.1.8&lt;/druid.version> &lt;pagehelper-springboot.version>1.2.5&lt;/pagehelper-springboot.version> &lt;/properties> 相关依赖&lt;!--Mybatis相关依赖--> &lt;dependency> &lt;groupId>org.mybatis.spring.boot&lt;/groupId> &lt;artifactId>mybatis-spring-boot-starter&lt;/artifactId> &lt;version>${mybatis-springboot.version}&lt;/version> &lt;/dependency> &lt;!--Swagger2--> &lt;dependency> &lt;groupId>io.springfox&lt;/groupId> &lt;artifactId>springfox-swagger-ui&lt;/artifactId> &lt;version>${swagger2.version}&lt;/version> &lt;/dependency> &lt;dependency> &lt;groupId>io.springfox&lt;/groupId> &lt;artifactId>springfox-swagger2&lt;/artifactId> &lt;version>${swagger2.version}&lt;/version> &lt;/dependency> &lt;!--mysql数据库依赖--> &lt;dependency> &lt;groupId>mysql&lt;/groupId> &lt;artifactId>mysql-connector-java&lt;/artifactId> &lt;/dependency> &lt;!-- alibaba的druid数据库连接池 --> &lt;dependency> &lt;groupId>com.alibaba&lt;/groupId> &lt;artifactId>druid&lt;/artifactId> &lt;version>${druid.version}&lt;/version> &lt;/dependency> &lt;!--分页插件--> &lt;dependency> &lt;groupId>com.github.pagehelper&lt;/groupId> &lt;artifactId>pagehelper-spring-boot-starter&lt;/artifactId> &lt;version>${pagehelper-springboot.version}&lt;/version> &lt;/dependency> &lt;!--热部署--> &lt;dependency> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>spring-boot-devtools&lt;/artifactId> &lt;/dependency> &lt;!--模板引擎--> &lt;dependency> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>spring-boot-starter-thymeleaf&lt;/artifactId> &lt;/dependency> mybatis逆向工程插件配置&lt;plugin> &lt;groupId>org.mybatis.generator&lt;/groupId> &lt;artifactId>mybatis-generator-maven-plugin&lt;/artifactId> &lt;version>${mybatis-springboot.version}&lt;/version> &lt;configuration> &lt;configurationFile>${basedir}/src/main/resources/generator/generatorConfig.xml&lt;/configurationFile> &lt;overwrite>true&lt;/overwrite> &lt;verbose>true&lt;/verbose> &lt;/configuration> &lt;dependencies> &lt;dependency> &lt;groupId>mysql&lt;/groupId> &lt;artifactId>mysql-connector-java&lt;/artifactId> &lt;version>${mysql.version}&lt;/version> &lt;/dependency> &lt;/dependencies> &lt;/plugin> 配置文件全局配置文件server: port: 8080 spring: datasource: url: jdbc:mysql://localhost:3306/mybatis_druid?userUnicode=true&amp;characterEncoding=utf8 username: root password: 1234 driver-class-name: com.mysql.jdbc.Driver #配置类型为Druid数据库连接池 type: com.alibaba.druid.pool.DruidDataSource initialSize: 5 minIdle: 5 maxActive: 20 maxWait: 60000 timeBetweenEvictionRunsMillis: 60000 minEvictableIdleTimeMillis: 300000 # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙 filters: stat,wall,log4j maxPoolPreparedStatementPerConnectionSize: 20 useGlobalDataSourceStat: true connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500 thymeleaf: cache: false mybatis: #配置映射文件的路径 mapperLocations: classpath:mapper/*.xml typeAliasesPackage: me.freelee.mybatisdruid.model configLocation: classpath:mybatis-config.xml mybatis配置文件&lt;?xml version="1.0" encoding="UTF-8"?> &lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"> &lt;configuration> &lt;settings> &lt;!-- 全局启用或禁用延迟加载。禁用后，所有关联对象都会即使加载 --> &lt;setting name="lazyLoadingEnabled" value="true" /> &lt;!-- 使用驼峰命名法--> &lt;setting name="mapUnderscoreToCamelCase" value="true" /> &lt;/settings> &lt;/configuration> mybatis逆向工程配置文件&lt;?xml version="1.0" encoding="UTF-8"?> &lt;!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"> &lt;generatorConfiguration> &lt;context id="DB2Tables" targetRuntime="MyBatis3"> &lt;commentGenerator> &lt;property name="suppressDate" value="true"/> &lt;!--是否去除自动生成的注释--> &lt;property name="suppressAllComments" value="true"/> &lt;/commentGenerator> &lt;jdbcConnection driverClass="com.mysql.jdbc.Driver" connectionURL="jdbc:mysql://localhost:3306/mybatis_druid" userId="root" password="1234">&lt;/jdbcConnection> &lt;javaTypeResolver> &lt;property name="forceBigDecimals" value="false"/> &lt;/javaTypeResolver> &lt;!-- 生成模型的包名和位置--> &lt;javaModelGenerator targetPackage="me.freelee.mybatisdruid.model" targetProject="src/main/java"> &lt;property name="enableSubPackages" value="true"/> &lt;property name="trimStrings" value="true"/> &lt;/javaModelGenerator> &lt;!-- 生成映射文件的包名和位置--> &lt;sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources"> &lt;property name="enableSubPackages" value="true"/> &lt;/sqlMapGenerator> &lt;!-- 生成DAO的包名和位置--> &lt;javaClientGenerator type="XMLMAPPER" targetPackage="me.freelee.mybatisdruid.mapper" targetProject="src/main/java"> &lt;property name="enableSubPackages" value="true"/> &lt;/javaClientGenerator> &lt;table tableName="tb_user" domainObjectName="User" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false">&lt;/table> &lt;/context> &lt;/generatorConfiguration> 接下来运行mybatis-generator插件，就会生成数据库指定表对应的model和mapper。业务逻辑UserService接口的实现类（只贴出了关键方法）。@Override public PageInfo&lt;User> queryPage(Integer pageNum) { //引入PageHelper分页插件 //startPage方法后紧跟查询语句,这样才能实现分页查询 PageHelper.startPage(pageNum,2); List&lt;User> list=userMapper.selectAllUser(); //PageInfo构造函数第二个参数是显示导航页的数量 PageInfo&lt;User> pageInfo=new PageInfo&lt;>(list,2); return pageInfo; } /* 因为是对数据库进行写操作，所以需要保持原子性。添加了事务的注解@Transactional Propagation.REQUIRED:存在事务就处于当前事务中，没有就才创建一个事务 */ @Transactional(propagation = Propagation.REQUIRED,readOnly = false) public void insertUser(User user) { userMapper.insertSelective(user); } Druid配置类 Druid文档 //导入配置文件中的数据源配置封装成DruidDateSource，并加入到容器中 @ConfigurationProperties(prefix = "spring.datasource") @Bean public DataSource druid(){ return new DruidDataSource(); } //配置Druid的监控 //1、配置一个管理后台的Servlet @Bean public ServletRegistrationBean statViewServlet(){ ServletRegistrationBean bean=new ServletRegistrationBean(new StatViewServlet(),"/druid/*"); Map&lt;String,String> initParams=new HashMap&lt;>(); //设置控制台管理用户 initParams.put("loginUsername","admin"); initParams.put("loginPassword","123456"); initParams.put("allow","");//默认就是允许所有访问 bean.setInitParameters(initParams); return bean; } //2、配置一个web监控的filter @Bean public FilterRegistrationBean webStatFilter(){ FilterRegistrationBean bean=new FilterRegistrationBean(); bean.setFilter(new WebStatFilter()); Map&lt;String,String> initParams=new HashMap&lt;>(); //不进行过滤的格式 initParams.put("exclusions","*.js,*.css,/druid/*"); bean.setInitParameters(initParams); //设置过滤器过滤路径 bean.setUrlPatterns(Arrays.asList("/*")); return bean; } UserController部分代码 //根据用户Id查询用户 @GetMapping("/{id}") @ResponseBody public User selectUserById(@PathVariable("id") Integer id){ User user=userService.selectUserById(id); return user; } //分页查询所有数据 @GetMapping("") public String list(@RequestParam(value = "pageNo",defaultValue = "1") Integer pageNo , Model model){ PageInfo&lt;User> pageInfo=userService.queryPage(pageNo); model.addAttribute("pageInfo",pageInfo); return "list"; } 现在就可以启动SpringBoot，进行测试了。localhost:8080/druid就可以进入Druid监控系统，可以查看数据源的详细信息等等很多功能。User的分页显示，页面的UI不是很关键，能用就行。还有最后一个步骤，使用Swagger2生成文档。 Swagger2文档首先配置一个Swagger2的配置类：@EnableSwagger2：开启swagger2注解功能@Configuration @EnableSwagger2 public class SwaggerConfig { //创建一个Docket对象包含以下信息： // 1、Api的详细信息，即apiInfo（） // 2、指定需要生成文档的包路经 // 3、指定生成Api文档的路径 @Bean public Docket createRestApi(){ return new Docket(DocumentationType.SWAGGER_2) //apiInfo（）创建接口文档的信息 .apiInfo(apiInfo()) .select() //api（）可以控制指定扫描包下定义的Api暴露给Swagger2 .apis(RequestHandlerSelectors.basePackage("me.freelee.mybatisdruid.controller")) .paths(PathSelectors.any()) .build(); } //构建Api文档的相信信息 private ApiInfo apiInfo(){ return new ApiInfoBuilder() .title("使用Swagger2构建RESTful APIs") .description("Springboot REST API With Swagger2") .version("1.0") .build(); } } 还需要再Controller上添加Swagger2注解。@Api：用来标注类。Swagger2会检测标注此注解的类@ApiOperation：用来标注方法，会将此方法暴露给Swagger2来生成文档。value：方法名 notes：方法的描述 除此之外，还有@ApiImplicitParam可以标注方法参数，可以设定是否required，名称，类型……如果不想把接口暴露给Swagger2，可以使用@ApiIngore标注方法。@Api(value = "用户Controller") @Controller @RequestMapping("/user") public class UserController { @Autowired UserService userService; @ApiOperation(value = "获取用户信息", notes = "根据用户id获取用户信息") @ApiImplicitParam(name = "id",value = "用户的ID",required = true,dataType = "Integer") @GetMapping("/{id}") @ResponseBody public User selectUserById(@PathVariable("id") Integer id){ User user=userService.selectUserById(id); return user; } @ApiOperation(value = "获取用户列表", notes = "获取用户列表") @GetMapping("") public String list(@RequestParam(value = "pageNo",defaultValue = "1") Integer pageNo , Model model){ PageInfo&lt;User> pageInfo=userService.queryPage(pageNo); model.addAttribute("pageInfo",pageInfo); return "list"; } } Swagger2文档主页面如图，可以看到我们含有注解@ApiOperation的方法显示再文档中。点击其中一个方法,可以看到我们设置的一些信息。文档提供了一个Model的一个值的示例，服务器相应类型包括所有返回类型。然后下面是方法的参数，输入对应类型的值，点击Try it out！会进行对服务器的请求（如果是写入操作，会写入数据库），就能得到Request Url和Response Body等其他详细信息。项目中遇到的问题已解决：1、pagehelper的依赖问题，会导致PageInfo对象无法自动装配。 错误依赖 &lt;dependency> &lt;groupId>com.github.pagehelper&lt;/groupId> &lt;artifactId>pagehelper&lt;/artifactId> &lt;version>5.1.2&lt;/version> &lt;/dependency> 正确依赖 &lt;dependency> &lt;groupId>com.github.pagehelper&lt;/groupId> &lt;artifactId>pagehelper-spring-boot-starter&lt;/artifactId> &lt;version>${pagehelper-springboot.version}&lt;/version> &lt;/dependency> 未解决：1、在selectUserById（）加上注解后 @ApiImplicitParam(name = &quot;id&quot;,value = &quot;用户的ID&quot;,required = true,dataType = &quot;Long&quot;) ，使用Swagger2测试时，会报错 *&quot;Failed to convert value of type &#39;java.lang.String&#39; to required type &#39;java.lang.Long&#39;; nested exception is java.lang.NumberFormatException: For input string: \&quot;{id}\&quot;&quot;,* 不知道在传参过程为什么不会自动类型转换？？？2、thymeleaf作为模板引擎时，想构建DELETE请求和PUT请求，尝试过ajax方式，但是失败了目前找不到错误在哪，其他方法还未尝试。 参考文章链接Spring Boot中使用Swagger2构建强大的RESTful API文档主流Java数据库连接池比较及前瞻完整代码github：https://github.com/LJP-Perfect/SpringBoot_Project码云：https://gitee.com/free-lee/springboot_project_practice]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>MyBatis</tag>
        <tag>Swagger2</tag>
        <tag>Druid</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ArrayList]]></title>
    <url>%2FArrayList.html</url>
    <content type="text"><![CDATA[今天写Java集合框架里的其中一种容器——ArrarList。听上去跟数组差不多，其实，它们很多理念上是真差不多。先放一张集合框架图。乍一看，感觉贼复杂，头要炸。其实只要小小分析一波，就不会觉得难了。要不，我再放一张简化图？！简化图里把重点都给留下了。从上面那张框架图中可以看出ArrayList是一个实现类，继承了AbstarctList抽象类，实现了List接口，我们可以从源码中看到这些，除了这些，ArrayList还实现了RandomAccess，Cloneable，Serializable这三个接口。简单介绍一下这三个接口（等学深了，再来给详细的）。RandomAccess翻译一下，就是随机访问，这就像数组那样可以通过下标直接访问那个元素。Cloneable克隆接口，其可以将一个实例拷贝到一个新实例。实际上只拷贝其中的各变量的值，是浅拷贝。Serializable可序列化接口，通过此接口可以实现实例的存储，使用时可以通过反序列化得到那个实例。ArrayList的本质就是一个Object对象类型的数组，在这个数组上进行一系列操作，因为Object是所有类的基类，所以可以接收任意同类型的对象。并且用到了泛型，可以自己指定对象的类型。ArrayList的初始化1、静态初始化(在声明变量时，赋予初始值。)//第一种 public static void main(String[] args) { ArrayList&lt;String&gt; arraylist=new ArrayList&lt;String&gt;(){ { add(&quot;a&quot;); add(&quot;b&quot;); } }; } //第二种 public static void main(String[] args) { ArrayList&lt;String&gt; arraylist=new ArrayList&lt;String&gt;(Arrays.asList(&quot;a&quot;,&quot;b&quot;)); System.out.print(arraylist); } //第三种 public static void main(String[] args) { String[] str={&quot;a&quot;,&quot;b&quot;}; List arraylist=Arrays.asList(str); } 要注意的是，第三种的arraylist是无法改变其长度的，即无法进行add(),remove()等操作，因为数组一旦给定，长度就无法改变，初始化时将数组泛型化赋给它。2、动态初始化public static void main(String[] args) { ArrayList&lt;String&gt; arraylist=new ArrayList&lt;String&gt;(); arraylist.add(&quot;a&quot;); arraylist.add(&quot;b&quot;); System.out.println(arraylist); } ArrayList 常用方法讲完了初始化，来看一下ArrayList的一些常用方法。1、add()我们先来看看add()方法的源码 public boolean add(E e) { modCount++; add(e, elementData, size); return true; } 可以看到这里的add()又调用了与它互为重载的方法，如下。 /** * This helper method split out from add(E) to keep method * bytecode size under 35 (the -XX:MaxInlineSize default value), * which helps when add(E) is called in a C1-compiled loop. */ private void add(E e, Object[] elementData, int s) { if (s == elementData.length) elementData = grow(); elementData[s] = e; size = s + 1; } 可以看到如果当前数组的长度等于当前设定的size就会调用grow()方法。size不用多讲，就是ArrayList包含的元素个数，来看一下elementData和grow()的定义。先看elementDate，其本质是一个对象数组。如果创建一个空的ArrayList时，系统会将其capacity置 为10,也就是默认的大小为10。 transient Object[] elementData; // non-private to simplify nested class access 然后在看grow()。它也去调用了与它重载的方法，可以看到它将size+1值传给重载函数，带参函数将其扩展成当前数组大小的两倍。private Object[] grow(int minCapacity) { return elementData = Arrays.copyOf(elementData, newCapacity(minCapacity)); } private Object[] grow() { return grow(size + 1); } 再回到add()，如果数组长度与当前数组容量相同，则先扩增一倍大小，然后赋值。还没讲完呢，add()还有另外一个重载方法（我的天哪，一个add()的源码比我想象的要多）。 public void add(int index, E element) { rangeCheckForAdd(index); modCount++; final int s; Object[] elementData; if ((s = size) == (elementData = this.elementData).length) elementData = grow(); System.arraycopy(elementData, index, elementData, index + 1, s - index); elementData[index] = element; size = s + 1; } 这个add()方法接受外部两个参数，index就是要添加的位置的下标。首先rangeCheckForAdd(),是判断index是否合法的（大于等于0&amp;&amp;小于等于size，注意add时，不能跨长度给它赋值）,modCount是记录此数组修改的次数，（这里又可以展开很多知识，我直接抛一个链接https://www.cnblogs.com/zuochengsi-9/p/7050351.html），其主要就是防止线程安全的ArrayList一边用iterator遍历时一边对ArrayList进行增删操作时发生异常。然后是arraycopy()，查看源码时发现它是native（C++真厉害）,那就看声明，其意思就是将从src里的srcPos位置开始的length长度赋给从destPos位置的dest。public static native void arraycopy(Object src, int srcPos, Object dest,int destPos,int length); 再来看看具体使用。 ArrayList &lt;String&gt;arraylist = new ArrayList&lt;String&gt;(); arraylist.add(&quot;b&quot;); arraylist.add(0,&quot;a&quot;); arraylist.add(2,&quot;c&quot;) //下标为3的地方还为null //arraylist.add(4,&quot;d&quot;); //error System.out.println(arraylist); Output： [a, b, c] 这里a和b的位置是因为arraycopy。2、remove()remove()也有两个重载方法。就不贴源码了，源码哪都可以查到。//按照下标来移除 public E remove(int index); //按照元素来移除 public boolean remove(Object o); //clear()方法是删除所有元素 public void clear() //删除指定下标范围的元素 protected void removeRange(int fromIndex, int toIndex) 如果使用remove删除某个下标是ArrayList的中间一个元素，那么ArrayList会将所删元素后面的元素前移一个位置。ArrayList与Array那不是有数组就可以了吗？为什么还要ArrayList呢？| | ArrayList | Array || ——– | :—–: | :—-: || 可扩展性 | 可以动态改变其长度 | 数组是静态的，一旦长度给定，就无法改变 || 方法支持 | 有很多的方法可以方便的对ArrayList进行操，但是牺牲了效率(判定数组是否outBounds…) | 数组没有 |总之，各有各的优点，选用哪种也是视具体情况而定的，并无绝对的说法。`]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>array</tag>
        <tag>Java容器</tag>
        <tag>List</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ng课程完结篇]]></title>
    <url>%2FNG.html</url>
    <content type="text"><![CDATA[从4月2号开始学习Ng的机器学习，没有给我难以入门的感觉，虽然很多模型都没有用很深的公式去推导，但是真的很好理解，很适合我这种小白啊。不得不佩服恩达大佬的教学能力，不过感觉1.25倍速对我来说简直灾难啊，还是老老实实1倍吧(渣渣鉴定完毕)。看到最后，莫名感动，以泪谢幕。为了赶项目进度，只能放弃算法的深入推导，先大致理解模型及参数的作用，接着就是开始学习NLP。可，没有明确的学习方向和路线啊，感觉GG。还得先啃点公开课，原理还是要懂的，coding能力很是让我难受，得实践实践了。时间不够用啊，7月就是结项目，哇得就哭出来了。不说了，继续视频feed。]]></content>
      <categories>
        <category>ML</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubuntu下配置tensorflow(gpu)]]></title>
    <url>%2Ftensorflow.html</url>
    <content type="text"><![CDATA[搬自自己的csdnUbuntu16.04环境下从Anaconda3安装到Tensorflow(gpu)及pycharm安装和测试mnist完整教程]]></content>
      <categories>
        <category>ML</category>
      </categories>
      <tags>
        <tag>anaconda</tag>
        <tag>tensorflow配置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu安装及常见问题解决]]></title>
    <url>%2Fubuntu.html</url>
    <content type="text"><![CDATA[搬自自己的csdnUbuntu——从安装到放弃（/逃 ）【此教程包括ubuntu的安装、关机卡死（Nvidia安装）、无法连接wifi等解决方案】]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线性回归之波士顿房价预测]]></title>
    <url>%2FLinear_Regression.html</url>
    <content type="text"><![CDATA[最近学习了线性回归，然后拿经典数据集来练习。数据集大小为[506,13],一共506个样本，13个特征([‘CRIM’ ‘ZN’ ‘INDUS’ ‘CHAS’ ‘NOX’ ‘RM’ ‘AGE’ ‘DIS’ ‘RAD’ ‘TAX’ ‘PTRATIO’ ‘B’ ‘LSTAT’])，target大小为[506，1]可以先通过matplotlib来直观感受这些特征分别与房价的关系。为了简化训练，只选择了第6个特征[‘RM’]来训练（第6个和最后一个特征的直观看上去比较符合线性回归），13个特征只在506个样本下比较难去拟合好。下面是代码解释#import data boston=load_boston() data=boston.data[:,(5)] label=boston.target #reshape column vector data=data.reshape(-1,1) label=label.reshape(-1,1) 因为这里我们只导入一列数据，我们需要把 [ ] reshape为[[ ]]，否则会报以下错误Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.接下来，对特征数据做特征缩放（对于单个特征来说，特征缩放的作用并不是特别大，但习惯起见，还是对其进行特征缩放，但是在多特征中，特征缩放显得尤其重要，可以加快梯度下降，见图）接下来就是定义一些占位符和权值、偏置等变量偏置初始化0即可，权值最好不要初始化为0，使用正太分布随机值，如果使用0去初始化权值。在反向传播计算会出现不同权值变化量始终相同从而导致权值更新出现异常（推导见图）。#getting number of training set &amp; number of feature m_feature=data.shape[1] m_train=tf.placeholder(dtype=tf.float32) x=tf.placeholder(dtype=tf.float32,shape=[None,m_feature],name=&#39;input&#39;) y_=tf.placeholder(dtype=tf.float32,shape=[None,1],name=&#39;output&#39;) #Define weights and offsets viriables #Initialize weights using a Gaussian distribution #Initialize the bias to 0 w=tf.Variable(tf.truncated_normal(shape=[m_feature,1],stddev=0.003,dtype=tf.float32)) b=tf.Variable(tf.zeros(shape=[1],dtype=tf.float32)) 然后就是前向计算和反向计算，这个没有什么好说的，注意cost function的选择即可#Forward calculation y=tf.add(tf.matmul(x,w),b) #use the mean square error function learn_rate=0.08 loss=tf.reduce_sum(tf.pow(y_-y,2)/(2*m_train)) train_step=tf.train.GradientDescentOptimizer(learn_rate).minimize(loss) 这里我们定义一个list来存储训练过程中的loss值，再定义一个张量error来简单评估测试的误差#variable train_loss is used to save the loss value of each iteration train_loss =[] #error error = tf.reduce_mean(y-y_) 然后就开始进行训练这里的重点在于数据集的划分，一开始用的是train_test_split将数据集划分成两份，70%为训练集，30%为测试集。但是听取别人建议后，使用k折交叉验证法。所谓k折交叉验证法，就是将数据集分成k份，每次取其中k-1份作为训练集，另外1份作为测试集，这样的好处是所有数据都有被利用，可以得到更好的参数，但是耗时会长一点（见图）。with tf.Session() as sess: sess.run(init) for i in range(150): #k-fold cross validation kf=KFold(n_splits=10) for train_index,test_index in kf.split(data): X_train,X_test=data[train_index],data[test_index] Y_train,Y_test=label[train_index],label[test_index] w_,b_,_,l=sess.run(fetches=[w,b,train_step,loss], feed_dict={x: X_train, y_: Y_train,m_train:X_train.shape[0]}) if i%10==0: print(&quot;Epoch {0} : error:{1}&quot;.format(i,sess.run(error,feed_dict={x:X_test,y_:Y_test}))) train_loss.append(l) #print(&quot;Epoch {0} : loss{1}&quot;.format(i, l)) 我用两种方法进行比较，首先是k（取10）折交叉验证的结果然后是train_test_split分类方法的结果还是可以比较明显的看到，不管是loss值还是拟合程度。明显都是k折交叉验证法效果比较好。完整代码请参考：https://github.com/LJP-Perfect/Machine-Learning/tree/master/Linear%20Regression总结几点：1、对特征进行选取2、多特征时进行特征缩放3、选取合适的cost function4、使用k折交叉验证还未解决的问题：1、初始数据的分析2、学习速率和k值的选取3、选择更好的cost function]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>feature scaling</tag>
        <tag>boston price</tag>
        <tag>bp算法</tag>
        <tag>k折交叉验证</tag>
        <tag>线性回归</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浅析SVM之概念介绍]]></title>
    <url>%2FSVM.html</url>
    <content type="text"><![CDATA[简单例子先从一个简单的例子开始。现在有一组两个类别的数据如下。这是一个比较简单的二分类问题，对于这一组数据，这个超平面可以用以下函数来表示：(超平面是从n维空间到n-1维空间的一个映射子空间，它有一个n维向量和一个实数定义)$$w\cdot x+b=0 \qquad (1) $$分类决策函数表示为$$f(x)=sign(w\cdot x+b)$$即在超平面上的点f(x)=0，f(x)大于0的点对应y=1,f(x)小于0的点对应y=-1。注:sign函数为符号函数,当sign(t)中的t&gt;0时，sign(t)=1;t&lt;0时，sign(t)=-1;t=0时，sign(t)=0。在逻辑回归的hypotheis function中，当$\theta\cdot x$ &gt;0时，输出y=1；当$\theta\cdot x$ &lt;0，输出y=0。在这里我们首先将$\theta\cdot x$ 表示成$w\cdot x+b$ (其实就是将$\theta_{0}$从$\theta$向量中抽离出来表示成b)，同时将y=0和y=1表示为y=1和y=-1(对于结果并不会产生影响)。再回到分问题，对于这个二分类问题可以有很多个不同的超平面来对其分割，如下图。但是这么多条decision boundary，总是有performance好的和不好的，如何找出最优的解呢？表现评估标准函数间隔和几何间隔对于上面的三个超平面可以很自然的得出直线所对应的是较好的，很直观得可以看到它与两个类别中与其最近的点对应的距离较大，而且这条直线对一些outlier的表现也比较好，即泛化能力。所以引入函数间隔来进行衡量。函数间隔的含义就是表示分类的正确性及确信度，对于距离超平面较远的样本，其预测的确信度较高，反之距离较远的样本，其预测的确信度较低。对于给定的某个样本点($x_{i}$,$y_{i}$),我们定义超平面关于该样本点的函数间隔为$$\hat\gamma_{i}=y_{i}(w{\cdot}x_{i}+b)\qquad (2)$$那么在所有样本中的最小函数间隔就为$$\hat{\gamma}=min\ \hat\gamma_{i},i=1,…,N\qquad (3)$$虽然函数间隔可以表示分类预测的确信度，但是它是相对的。如果我们成比例的改变w和b，超平面并没有改变，但是函数间隔却变成了原来的两倍。这时可以使用几何间隔来替换函数间隔。几何间隔也就是样本到超平面的几何距离，记作$\gamma_{i}$,$$\gamma_{i}=y_{i}(\frac {w}{||w||} {\cdot}x_{i}+ \frac {b}{||w||})\qquad (4)$$||w||为w的$L_{2}$范数，其中$y_{i}$表示了$y_{i}$等与1和-1的情况。那么在所有样本中的最小几何间隔就为$${\gamma}=min\ {\gamma}_{i}, i=1,…,N\qquad (5)$$间隔最大化根据上面(5)，可以将最大化问题表示下面的约束最优化问题：$$max\ \gamma\qquad(6)$$$$s.t.\quad y_{i}(\frac {w}{||w||} {\cdot}x_{i}+ \frac {b}{||w||})\geq\gamma,\ i=1,2,…,N\qquad(7)$$根据(2)~(5)，可以推出$$\gamma_{i}=\frac {\hat\gamma_{i}}{||w||}\qquad (8)$$$$\gamma=\frac{\hat\gamma}{||w||}\qquad (9)$$根据(9)，求解(6)的问题就可以转化成$$max\;\frac{\hat\gamma}{||w||}\qquad(10)$$$$s.t.\quad y_{i}(\frac {w}{||w||} {\cdot}x_{i}+ \frac {b}{||w||})\geq\gamma,\ i=1,2,…,N\qquad(11)$$在之前的推导过程中提到过对w和b按比例进行放大缩小对求解并不会产生影响，所以得到从函数间隔到几何间隔的转化。现在也是一样，将w和b进行缩放，也就是对$\hat\gamma$进行缩放，对求解结果同样也不会产生影响，所以我们取$\hat\gamma=1$，进行这一步主要是简化之后的数学计算。此时问题转化为$max\;\frac{1}{||w||}$,而$\frac{1}{||w||}$ 正好是几何间隔。进一步可以发现最大化$\frac{1}{||w||}$ 和最小化$\frac{1}{2}||w||^{2}$ 是等价的，至此(10)就转换成以下的最优化问题：$$min\ \frac{1}{2}\ ||w||^{2}\qquad(12)$$$$s.t.\quad y_{i}(\frac{w}{||w||}\cdot x_{i}+ \frac {b}{||w||})-1\geq0,i=1,2,…,N\qquad(13)$$ ,这是一个凸二次规划问题(凸二次规划详细内容链接)。只要解出$w^{\ast}$ 和$b^{\ast}$ 即可得到超平面$w^{\ast}\cdot x+b^{\ast}=0$ 和分类决策函数$f(x)=w^{\ast}\cdot x+b^{\ast}$ 。几何间隔的直观化如下图，最终就是要使margin最大化的一个问题(负样本和正样本的margin应是一样的)。下图中两条虚线到直线的距离均为$\frac{1}{||w||}$，定义在虚线上的点称为支持向量(Support vector)。$w^{\ast}$ 和$b^{\ast}$ 的求解过程中其实只会受支持向量的影响，为什么呢？在之后的一篇数学推导会给出证明。到这里，对SVM应该有了一个简单的认识。总的来说，SVM就是要找出一个超平面，使两类样本点中所有距离它最近的点，都尽可能的离它远。To be continue]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>margin</tag>
        <tag>hypeplane</tag>
        <tag>classfication</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2Fbaidu_verify_D4umA77Wgx.html</url>
    <content type="text"><![CDATA[D4umA77Wgx]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fbaidu_verify_PQgHckNDnk.html</url>
    <content type="text"><![CDATA[PQgHckNDnk]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fbaidu_verify_w2CJZAKCk7.html</url>
    <content type="text"><![CDATA[w2CJZAKCk7]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fgooglea4979d339ced872b.html</url>
    <content type="text"><![CDATA[google-site-verification: googlea4979d339ced872b.html]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F581%2Findex.js</url>
    <content type="text"><![CDATA[var svg=document.querySelector("svg"),cursor=svg.createSVGPoint(),arrows=document.querySelector(".arrows"),randomAngle=0,target={x:900,y:249.5},lineSegment={x1:875,y1:280,x2:925,y2:220};function knock(e){randomAngle=Math.random()*Math.PI*.03-.015,TweenMax.to(".arrow-angle use",.3,{opacity:1}),window.addEventListener("mousemove",aim),window.addEventListener("mouseup",loose),aim(e),TweenMax.to("#arc",.3,{opacity:1})}function loose(){window.removeEventListener("mousemove",aim),window.removeEventListener("mouseup",loose),TweenMax.to("#bow",.4,{scaleX:1,transformOrigin:"right center",ease:Elastic.easeOut}),TweenMax.to("#bow polyline",.4,{attr:{points:"88,200 88,250 88,300"},ease:Elastic.easeOut});var e=document.createElementNS("http://www.w3.org/2000/svg","use");e.setAttributeNS("http://www.w3.org/1999/xlink","href","#arrow"),arrows.appendChild(e);var t=MorphSVGPlugin.pathDataToBezier("#arc");TweenMax.to([e],.5,{force3D:!0,bezier:{type:"cubic",values:t,autoRotate:["x","y","rotation"]},onUpdate:hitTest,onUpdateParams:["{self}"],onComplete:onMiss,ease:Linear.easeNone}),TweenMax.to("#arc",.3,{opacity:0}),TweenMax.set(".arrow-angle use",{opacity:0})}function hitTest(e){var t=e.target[0]._gsTransform,a=t.rotation*Math.PI/180,n=getIntersection({x1:t.x,y1:t.y,x2:60*Math.cos(a)+t.x,y2:60*Math.sin(a)+t.y},lineSegment);if(n.segment1&&n.segment2){e.pause();var o=n.x-target.x,r=n.y-target.y,s=".hit";Math.sqrt(o*o+r*r)=0&&w=0&&x]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F581%2Fstyle.css</url>
    <content type="text"><![CDATA[body{margin:0;background:#222;margin:20px}svg{width:100%;height:100%;position:fixed;top:0;left:0}span{color:#fff;font-family:sans-serif;opacity:.3}]]></content>
  </entry>
  <entry>
    <title><![CDATA[图库]]></title>
    <url>%2Fgallery%2Findex.html</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title><![CDATA[Who am I]]></title>
    <url>%2Fabout%2Findex.html</url>
    <content type="text"><![CDATA[关于我浙江理工大学 计算机专业大三在读轻度中二，轻度社交恐惧偏爱简约，喜欢生活充满新鲜感会点Java，目前正在学习搭建后台项目联系我Mail：871560465@qq.comSteam：Freelee（一起Play Game啊）github：https://github.com/LJP-Perfect]]></content>
  </entry>
  <entry>
    <title><![CDATA[games]]></title>
    <url>%2Fgames%2Findex.html</url>
    <content type="text"><![CDATA[L2Dwidget.init({"pluginRootPath":"live2dw/","pluginJsPath":"lib/","pluginModelPath":"assets/","model":{"jsonPath":"/live2dw/assets/koharu.model.json"},"display":{"position":"left","width":75,"height":150,"scaling":2,"horizontalOffset":10,"verticalOffset":-40},"mobile":{"show":false,"Scaling":0.5},"log":false,"tagMode":false}); window.ityped.init(document.querySelector(‘.ityped’), { strings : [‘ 网瘾少年(女)们，快玩游戏吧’], //可以写无限条句子，只要用逗号隔开 typeSpeed: 155, //打字的速度 backSpeed: 60, //删除字的速度 startDelay: 500, //每一句开始打字停顿的时间 backDelay: 2500, //每一句删除字的停顿时间 loop: false, //是否循环动画 showCursor: true, //是否显示光标 cursorChar: “︳”, //设置光标字符 });#Bullseye]]></content>
  </entry>
  <entry>
    <title><![CDATA[tags]]></title>
    <url>%2Ftags%2Findex.html</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title><![CDATA[timeline]]></title>
    <url>%2Ftimeline%2Findex.html</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fcarousel%2Ftemp%2Findex.html</url>
    <content type="text"><![CDATA[简单轮播图TitleSlide #3Sub-title #3Slide #4Sub-title #4Slide #5Sub-title #5L2Dwidget.init({"pluginRootPath":"live2dw/","pluginJsPath":"lib/","pluginModelPath":"assets/","model":{"jsonPath":"/live2dw/assets/koharu.model.json"},"display":{"position":"left","width":75,"height":150,"scaling":2,"horizontalOffset":10,"verticalOffset":-40},"mobile":{"show":false,"Scaling":0.5},"log":false,"tagMode":false});]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fcarousel%2Ftemp%2Fjs%2Fslide.js</url>
    <content type="text"><![CDATA[var pos=0,totalSlides=$("#slider-wrap ul li").length,sliderWidth=$("#slider-wrap").width();function slideLeft(){-1==--pos&&(pos=totalSlides-1),$("#slider-wrap ul#slider").css("left",-sliderWidth*pos),countSlides(),pagination()}function slideRight(){++pos==totalSlides&&(pos=0),$("#slider-wrap ul#slider").css("left",-sliderWidth*pos),countSlides(),pagination()}function countSlides(){$("#counter").html(pos+1+" / "+totalSlides)}function pagination(){$("#pagination-wrap ul li").removeClass("active"),$("#pagination-wrap ul li:eq("+pos+")").addClass("active")}$(document).ready(function(){$("#slider-wrap ul#slider").width(sliderWidth*totalSlides),$("#next").click(function(){slideRight()}),$("#previous").click(function(){slideLeft()});var i=setInterval(slideRight,3e3);$.each($("#slider-wrap ul li"),function(){var i=$(this).attr("data-color");$(this).css("background",i);var t=document.createElement("li");$("#pagination-wrap ul").append(t)}),countSlides(),pagination(),$("#slider-wrap").hover(function(){$(this).addClass("active"),clearInterval(i)},function(){$(this).removeClass("active"),i=setInterval(slideRight,3e3)})});]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fcarousel%2Ftemp%2Fcss%2Fstyle.css</url>
    <content type="text"><![CDATA[*{margin:0;padding:0;list-style:none}a{text-decoration:none;color:#666}a:hover{color:#1bc1a3}#wrapper{width:600px;margin:50px auto;height:400px;position:relative;color:#fff;text-shadow:rgba(0,0,0,.1) 2px 2px 0}#slider-wrap{width:600px;height:400px;position:relative;overflow:hidden}#slider-wrap ul#slider{width:100%;height:100%;position:absolute;top:0;left:0}#slider-wrap ul#slider li{float:left;position:relative;width:600px;height:400px}#slider-wrap ul#slider li>div{position:absolute;top:20px;left:35px}#slider-wrap ul#slider li>div h3{font-size:36px;text-transform:uppercase}#slider-wrap ul#slider li>div span{font-family:Neucha,Arial,sans serif;font-size:21px}#slider-wrap ul#slider li i{text-align:center;line-height:400px;display:block;width:100%;font-size:90px}.btns{position:absolute;width:50px;height:60px;top:50%;margin-top:-25px;line-height:57px;text-align:center;cursor:pointer;background:rgba(0,0,0,.1);z-index:100;-webkit-user-select:none;-moz-user-select:none;-khtml-user-select:none;-ms-user-select:none;-webkit-transition:all .1s ease;-moz-transition:all .1s ease;-o-transition:all .1s ease;-ms-transition:all .1s ease;transition:all .1s ease}.btns:hover{background:rgba(0,0,0,.3)}#next{right:-50px;border-radius:7px 0 0 7px}#previous{left:-50px;border-radius:0 7px 7px 7px}#counter{top:30px;right:35px;width:auto;position:absolute}#slider-wrap.active #next{right:0}#slider-wrap.active #previous{left:0}#pagination-wrap{min-width:20px;margin-top:350px;margin-left:auto;margin-right:auto;height:15px;position:relative;text-align:center}#pagination-wrap ul{width:100%}#pagination-wrap ul li{margin:0 4px;display:inline-block;width:5px;height:5px;border-radius:50%;background:#fff;opacity:.5;position:relative;top:0}#pagination-wrap ul li.active{width:12px;height:12px;top:3px;opacity:1;box-shadow:rgba(0,0,0,.1) 1px 1px 0}h1,h2{text-shadow:none;text-align:center}h1{color:#666;text-transform:uppercase;font-size:36px}h2{color:#7f8c8d;font-family:Neucha,Arial,sans serif;font-size:18px;margin-bottom:30px}#pagination-wrap ul li,#slider-wrap ul{-webkit-transition:all .3s cubic-bezier(1,.01,.32,1);-moz-transition:all .3s cubic-bezier(1,.01,.32,1);-o-transition:all .3s cubic-bezier(1,.01,.32,1);-ms-transition:all .3s cubic-bezier(1,.01,.32,1);transition:all .3s cubic-bezier(1,.01,.32,1)}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fcarousel%2Ftemp%2Fcss%2Ffont-awesome.css</url>
    <content type="text"><![CDATA[/*! * Font Awesome 4.7.0 by @davegandy - http://fontawesome.io - @fontawesome * License - http://fontawesome.io/license (Font: SIL OFL 1.1, CSS: MIT License) */@font-face{font-family:FontAwesome;src:url(../fonts/fontawesome-webfont.eot?v=4.7.0);src:url(../fonts/fontawesome-webfont.eot?#iefix&v=4.7.0) format('embedded-opentype'),url(../fonts/fontawesome-webfont.woff2?v=4.7.0) format('woff2'),url(../fonts/fontawesome-webfont.woff?v=4.7.0) format('woff'),url(../fonts/fontawesome-webfont.ttf?v=4.7.0) format('truetype'),url(../fonts/fontawesome-webfont.svg?v=4.7.0#fontawesomeregular) format('svg');font-weight:400;font-style:normal}.fa{display:inline-block;font:normal normal normal 14px/1 FontAwesome;font-size:inherit;text-rendering:auto;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.fa-lg{font-size:1.33333333em;line-height:.75em;vertical-align:-15%}.fa-2x{font-size:2em}.fa-3x{font-size:3em}.fa-4x{font-size:4em}.fa-5x{font-size:5em}.fa-fw{width:1.28571429em;text-align:center}.fa-ul{padding-left:0;margin-left:2.14285714em;list-style-type:none}.fa-ul>li{position:relative}.fa-li{position:absolute;left:-2.14285714em;width:2.14285714em;top:.14285714em;text-align:center}.fa-li.fa-lg{left:-1.85714286em}.fa-border{padding:.2em .25em .15em;border:solid .08em #eee;border-radius:.1em}.fa-pull-left{float:left}.fa-pull-right{float:right}.fa.fa-pull-left{margin-right:.3em}.fa.fa-pull-right{margin-left:.3em}.pull-right{float:right}.pull-left{float:left}.fa.pull-left{margin-right:.3em}.fa.pull-right{margin-left:.3em}.fa-spin{-webkit-animation:fa-spin 2s infinite linear;animation:fa-spin 2s infinite linear}.fa-pulse{-webkit-animation:fa-spin 1s infinite steps(8);animation:fa-spin 1s infinite steps(8)}@-webkit-keyframes fa-spin{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(359deg);transform:rotate(359deg)}}@keyframes fa-spin{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(359deg);transform:rotate(359deg)}}.fa-rotate-90{-webkit-transform:rotate(90deg);-ms-transform:rotate(90deg);transform:rotate(90deg)}.fa-rotate-180{-webkit-transform:rotate(180deg);-ms-transform:rotate(180deg);transform:rotate(180deg)}.fa-rotate-270{-webkit-transform:rotate(270deg);-ms-transform:rotate(270deg);transform:rotate(270deg)}.fa-flip-horizontal{-webkit-transform:scale(-1,1);-ms-transform:scale(-1,1);transform:scale(-1,1)}.fa-flip-vertical{-webkit-transform:scale(1,-1);-ms-transform:scale(1,-1);transform:scale(1,-1)}:root .fa-flip-horizontal,:root .fa-flip-vertical,:root .fa-rotate-180,:root .fa-rotate-270,:root .fa-rotate-90{filter:none}.fa-stack{position:relative;display:inline-block;width:2em;height:2em;line-height:2em;vertical-align:middle}.fa-stack-1x,.fa-stack-2x{position:absolute;left:0;width:100%;text-align:center}.fa-stack-1x{line-height:inherit}.fa-stack-2x{font-size:2em}.fa-inverse{color:#fff}.fa-glass:before{content:"\f000"}.fa-music:before{content:"\f001"}.fa-search:before{content:"\f002"}.fa-envelope-o:before{content:"\f003"}.fa-heart:before{content:"\f004"}.fa-star:before{content:"\f005"}.fa-star-o:before{content:"\f006"}.fa-user:before{content:"\f007"}.fa-film:before{content:"\f008"}.fa-th-large:before{content:"\f009"}.fa-th:before{content:"\f00a"}.fa-th-list:before{content:"\f00b"}.fa-check:before{content:"\f00c"}.fa-close:before,.fa-remove:before,.fa-times:before{content:"\f00d"}.fa-search-plus:before{content:"\f00e"}.fa-search-minus:before{content:"\f010"}.fa-power-off:before{content:"\f011"}.fa-signal:before{content:"\f012"}.fa-cog:before,.fa-gear:before{content:"\f013"}.fa-trash-o:before{content:"\f014"}.fa-home:before{content:"\f015"}.fa-file-o:before{content:"\f016"}.fa-clock-o:before{content:"\f017"}.fa-road:before{content:"\f018"}.fa-download:before{content:"\f019"}.fa-arrow-circle-o-down:before{content:"\f01a"}.fa-arrow-circle-o-up:before{content:"\f01b"}.fa-inbox:before{content:"\f01c"}.fa-play-circle-o:before{content:"\f01d"}.fa-repeat:before,.fa-rotate-right:before{content:"\f01e"}.fa-refresh:before{content:"\f021"}.fa-list-alt:before{content:"\f022"}.fa-lock:before{content:"\f023"}.fa-flag:before{content:"\f024"}.fa-headphones:before{content:"\f025"}.fa-volume-off:before{content:"\f026"}.fa-volume-down:before{content:"\f027"}.fa-volume-up:before{content:"\f028"}.fa-qrcode:before{content:"\f029"}.fa-barcode:before{content:"\f02a"}.fa-tag:before{content:"\f02b"}.fa-tags:before{content:"\f02c"}.fa-book:before{content:"\f02d"}.fa-bookmark:before{content:"\f02e"}.fa-print:before{content:"\f02f"}.fa-camera:before{content:"\f030"}.fa-font:before{content:"\f031"}.fa-bold:before{content:"\f032"}.fa-italic:before{content:"\f033"}.fa-text-height:before{content:"\f034"}.fa-text-width:before{content:"\f035"}.fa-align-left:before{content:"\f036"}.fa-align-center:before{content:"\f037"}.fa-align-right:before{content:"\f038"}.fa-align-justify:before{content:"\f039"}.fa-list:before{content:"\f03a"}.fa-dedent:before,.fa-outdent:before{content:"\f03b"}.fa-indent:before{content:"\f03c"}.fa-video-camera:before{content:"\f03d"}.fa-image:before,.fa-photo:before,.fa-picture-o:before{content:"\f03e"}.fa-pencil:before{content:"\f040"}.fa-map-marker:before{content:"\f041"}.fa-adjust:before{content:"\f042"}.fa-tint:before{content:"\f043"}.fa-edit:before,.fa-pencil-square-o:before{content:"\f044"}.fa-share-square-o:before{content:"\f045"}.fa-check-square-o:before{content:"\f046"}.fa-arrows:before{content:"\f047"}.fa-step-backward:before{content:"\f048"}.fa-fast-backward:before{content:"\f049"}.fa-backward:before{content:"\f04a"}.fa-play:before{content:"\f04b"}.fa-pause:before{content:"\f04c"}.fa-stop:before{content:"\f04d"}.fa-forward:before{content:"\f04e"}.fa-fast-forward:before{content:"\f050"}.fa-step-forward:before{content:"\f051"}.fa-eject:before{content:"\f052"}.fa-chevron-left:before{content:"\f053"}.fa-chevron-right:before{content:"\f054"}.fa-plus-circle:before{content:"\f055"}.fa-minus-circle:before{content:"\f056"}.fa-times-circle:before{content:"\f057"}.fa-check-circle:before{content:"\f058"}.fa-question-circle:before{content:"\f059"}.fa-info-circle:before{content:"\f05a"}.fa-crosshairs:before{content:"\f05b"}.fa-times-circle-o:before{content:"\f05c"}.fa-check-circle-o:before{content:"\f05d"}.fa-ban:before{content:"\f05e"}.fa-arrow-left:before{content:"\f060"}.fa-arrow-right:before{content:"\f061"}.fa-arrow-up:before{content:"\f062"}.fa-arrow-down:before{content:"\f063"}.fa-mail-forward:before,.fa-share:before{content:"\f064"}.fa-expand:before{content:"\f065"}.fa-compress:before{content:"\f066"}.fa-plus:before{content:"\f067"}.fa-minus:before{content:"\f068"}.fa-asterisk:before{content:"\f069"}.fa-exclamation-circle:before{content:"\f06a"}.fa-gift:before{content:"\f06b"}.fa-leaf:before{content:"\f06c"}.fa-fire:before{content:"\f06d"}.fa-eye:before{content:"\f06e"}.fa-eye-slash:before{content:"\f070"}.fa-exclamation-triangle:before,.fa-warning:before{content:"\f071"}.fa-plane:before{content:"\f072"}.fa-calendar:before{content:"\f073"}.fa-random:before{content:"\f074"}.fa-comment:before{content:"\f075"}.fa-magnet:before{content:"\f076"}.fa-chevron-up:before{content:"\f077"}.fa-chevron-down:before{content:"\f078"}.fa-retweet:before{content:"\f079"}.fa-shopping-cart:before{content:"\f07a"}.fa-folder:before{content:"\f07b"}.fa-folder-open:before{content:"\f07c"}.fa-arrows-v:before{content:"\f07d"}.fa-arrows-h:before{content:"\f07e"}.fa-bar-chart-o:before,.fa-bar-chart:before{content:"\f080"}.fa-twitter-square:before{content:"\f081"}.fa-facebook-square:before{content:"\f082"}.fa-camera-retro:before{content:"\f083"}.fa-key:before{content:"\f084"}.fa-cogs:before,.fa-gears:before{content:"\f085"}.fa-comments:before{content:"\f086"}.fa-thumbs-o-up:before{content:"\f087"}.fa-thumbs-o-down:before{content:"\f088"}.fa-star-half:before{content:"\f089"}.fa-heart-o:before{content:"\f08a"}.fa-sign-out:before{content:"\f08b"}.fa-linkedin-square:before{content:"\f08c"}.fa-thumb-tack:before{content:"\f08d"}.fa-external-link:before{content:"\f08e"}.fa-sign-in:before{content:"\f090"}.fa-trophy:before{content:"\f091"}.fa-github-square:before{content:"\f092"}.fa-upload:before{content:"\f093"}.fa-lemon-o:before{content:"\f094"}.fa-phone:before{content:"\f095"}.fa-square-o:before{content:"\f096"}.fa-bookmark-o:before{content:"\f097"}.fa-phone-square:before{content:"\f098"}.fa-twitter:before{content:"\f099"}.fa-facebook-f:before,.fa-facebook:before{content:"\f09a"}.fa-github:before{content:"\f09b"}.fa-unlock:before{content:"\f09c"}.fa-credit-card:before{content:"\f09d"}.fa-feed:before,.fa-rss:before{content:"\f09e"}.fa-hdd-o:before{content:"\f0a0"}.fa-bullhorn:before{content:"\f0a1"}.fa-bell:before{content:"\f0f3"}.fa-certificate:before{content:"\f0a3"}.fa-hand-o-right:before{content:"\f0a4"}.fa-hand-o-left:before{content:"\f0a5"}.fa-hand-o-up:before{content:"\f0a6"}.fa-hand-o-down:before{content:"\f0a7"}.fa-arrow-circle-left:before{content:"\f0a8"}.fa-arrow-circle-right:before{content:"\f0a9"}.fa-arrow-circle-up:before{content:"\f0aa"}.fa-arrow-circle-down:before{content:"\f0ab"}.fa-globe:before{content:"\f0ac"}.fa-wrench:before{content:"\f0ad"}.fa-tasks:before{content:"\f0ae"}.fa-filter:before{content:"\f0b0"}.fa-briefcase:before{content:"\f0b1"}.fa-arrows-alt:before{content:"\f0b2"}.fa-group:before,.fa-users:before{content:"\f0c0"}.fa-chain:before,.fa-link:before{content:"\f0c1"}.fa-cloud:before{content:"\f0c2"}.fa-flask:before{content:"\f0c3"}.fa-cut:before,.fa-scissors:before{content:"\f0c4"}.fa-copy:before,.fa-files-o:before{content:"\f0c5"}.fa-paperclip:before{content:"\f0c6"}.fa-floppy-o:before,.fa-save:before{content:"\f0c7"}.fa-square:before{content:"\f0c8"}.fa-bars:before,.fa-navicon:before,.fa-reorder:before{content:"\f0c9"}.fa-list-ul:before{content:"\f0ca"}.fa-list-ol:before{content:"\f0cb"}.fa-strikethrough:before{content:"\f0cc"}.fa-underline:before{content:"\f0cd"}.fa-table:before{content:"\f0ce"}.fa-magic:before{content:"\f0d0"}.fa-truck:before{content:"\f0d1"}.fa-pinterest:before{content:"\f0d2"}.fa-pinterest-square:before{content:"\f0d3"}.fa-google-plus-square:before{content:"\f0d4"}.fa-google-plus:before{content:"\f0d5"}.fa-money:before{content:"\f0d6"}.fa-caret-down:before{content:"\f0d7"}.fa-caret-up:before{content:"\f0d8"}.fa-caret-left:before{content:"\f0d9"}.fa-caret-right:before{content:"\f0da"}.fa-columns:before{content:"\f0db"}.fa-sort:before,.fa-unsorted:before{content:"\f0dc"}.fa-sort-desc:before,.fa-sort-down:before{content:"\f0dd"}.fa-sort-asc:before,.fa-sort-up:before{content:"\f0de"}.fa-envelope:before{content:"\f0e0"}.fa-linkedin:before{content:"\f0e1"}.fa-rotate-left:before,.fa-undo:before{content:"\f0e2"}.fa-gavel:before,.fa-legal:before{content:"\f0e3"}.fa-dashboard:before,.fa-tachometer:before{content:"\f0e4"}.fa-comment-o:before{content:"\f0e5"}.fa-comments-o:before{content:"\f0e6"}.fa-bolt:before,.fa-flash:before{content:"\f0e7"}.fa-sitemap:before{content:"\f0e8"}.fa-umbrella:before{content:"\f0e9"}.fa-clipboard:before,.fa-paste:before{content:"\f0ea"}.fa-lightbulb-o:before{content:"\f0eb"}.fa-exchange:before{content:"\f0ec"}.fa-cloud-download:before{content:"\f0ed"}.fa-cloud-upload:before{content:"\f0ee"}.fa-user-md:before{content:"\f0f0"}.fa-stethoscope:before{content:"\f0f1"}.fa-suitcase:before{content:"\f0f2"}.fa-bell-o:before{content:"\f0a2"}.fa-coffee:before{content:"\f0f4"}.fa-cutlery:before{content:"\f0f5"}.fa-file-text-o:before{content:"\f0f6"}.fa-building-o:before{content:"\f0f7"}.fa-hospital-o:before{content:"\f0f8"}.fa-ambulance:before{content:"\f0f9"}.fa-medkit:before{content:"\f0fa"}.fa-fighter-jet:before{content:"\f0fb"}.fa-beer:before{content:"\f0fc"}.fa-h-square:before{content:"\f0fd"}.fa-plus-square:before{content:"\f0fe"}.fa-angle-double-left:before{content:"\f100"}.fa-angle-double-right:before{content:"\f101"}.fa-angle-double-up:before{content:"\f102"}.fa-angle-double-down:before{content:"\f103"}.fa-angle-left:before{content:"\f104"}.fa-angle-right:before{content:"\f105"}.fa-angle-up:before{content:"\f106"}.fa-angle-down:before{content:"\f107"}.fa-desktop:before{content:"\f108"}.fa-laptop:before{content:"\f109"}.fa-tablet:before{content:"\f10a"}.fa-mobile-phone:before,.fa-mobile:before{content:"\f10b"}.fa-circle-o:before{content:"\f10c"}.fa-quote-left:before{content:"\f10d"}.fa-quote-right:before{content:"\f10e"}.fa-spinner:before{content:"\f110"}.fa-circle:before{content:"\f111"}.fa-mail-reply:before,.fa-reply:before{content:"\f112"}.fa-github-alt:before{content:"\f113"}.fa-folder-o:before{content:"\f114"}.fa-folder-open-o:before{content:"\f115"}.fa-smile-o:before{content:"\f118"}.fa-frown-o:before{content:"\f119"}.fa-meh-o:before{content:"\f11a"}.fa-gamepad:before{content:"\f11b"}.fa-keyboard-o:before{content:"\f11c"}.fa-flag-o:before{content:"\f11d"}.fa-flag-checkered:before{content:"\f11e"}.fa-terminal:before{content:"\f120"}.fa-code:before{content:"\f121"}.fa-mail-reply-all:before,.fa-reply-all:before{content:"\f122"}.fa-star-half-empty:before,.fa-star-half-full:before,.fa-star-half-o:before{content:"\f123"}.fa-location-arrow:before{content:"\f124"}.fa-crop:before{content:"\f125"}.fa-code-fork:before{content:"\f126"}.fa-chain-broken:before,.fa-unlink:before{content:"\f127"}.fa-question:before{content:"\f128"}.fa-info:before{content:"\f129"}.fa-exclamation:before{content:"\f12a"}.fa-superscript:before{content:"\f12b"}.fa-subscript:before{content:"\f12c"}.fa-eraser:before{content:"\f12d"}.fa-puzzle-piece:before{content:"\f12e"}.fa-microphone:before{content:"\f130"}.fa-microphone-slash:before{content:"\f131"}.fa-shield:before{content:"\f132"}.fa-calendar-o:before{content:"\f133"}.fa-fire-extinguisher:before{content:"\f134"}.fa-rocket:before{content:"\f135"}.fa-maxcdn:before{content:"\f136"}.fa-chevron-circle-left:before{content:"\f137"}.fa-chevron-circle-right:before{content:"\f138"}.fa-chevron-circle-up:before{content:"\f139"}.fa-chevron-circle-down:before{content:"\f13a"}.fa-html5:before{content:"\f13b"}.fa-css3:before{content:"\f13c"}.fa-anchor:before{content:"\f13d"}.fa-unlock-alt:before{content:"\f13e"}.fa-bullseye:before{content:"\f140"}.fa-ellipsis-h:before{content:"\f141"}.fa-ellipsis-v:before{content:"\f142"}.fa-rss-square:before{content:"\f143"}.fa-play-circle:before{content:"\f144"}.fa-ticket:before{content:"\f145"}.fa-minus-square:before{content:"\f146"}.fa-minus-square-o:before{content:"\f147"}.fa-level-up:before{content:"\f148"}.fa-level-down:before{content:"\f149"}.fa-check-square:before{content:"\f14a"}.fa-pencil-square:before{content:"\f14b"}.fa-external-link-square:before{content:"\f14c"}.fa-share-square:before{content:"\f14d"}.fa-compass:before{content:"\f14e"}.fa-caret-square-o-down:before,.fa-toggle-down:before{content:"\f150"}.fa-caret-square-o-up:before,.fa-toggle-up:before{content:"\f151"}.fa-caret-square-o-right:before,.fa-toggle-right:before{content:"\f152"}.fa-eur:before,.fa-euro:before{content:"\f153"}.fa-gbp:before{content:"\f154"}.fa-dollar:before,.fa-usd:before{content:"\f155"}.fa-inr:before,.fa-rupee:before{content:"\f156"}.fa-cny:before,.fa-jpy:before,.fa-rmb:before,.fa-yen:before{content:"\f157"}.fa-rouble:before,.fa-rub:before,.fa-ruble:before{content:"\f158"}.fa-krw:before,.fa-won:before{content:"\f159"}.fa-bitcoin:before,.fa-btc:before{content:"\f15a"}.fa-file:before{content:"\f15b"}.fa-file-text:before{content:"\f15c"}.fa-sort-alpha-asc:before{content:"\f15d"}.fa-sort-alpha-desc:before{content:"\f15e"}.fa-sort-amount-asc:before{content:"\f160"}.fa-sort-amount-desc:before{content:"\f161"}.fa-sort-numeric-asc:before{content:"\f162"}.fa-sort-numeric-desc:before{content:"\f163"}.fa-thumbs-up:before{content:"\f164"}.fa-thumbs-down:before{content:"\f165"}.fa-youtube-square:before{content:"\f166"}.fa-youtube:before{content:"\f167"}.fa-xing:before{content:"\f168"}.fa-xing-square:before{content:"\f169"}.fa-youtube-play:before{content:"\f16a"}.fa-dropbox:before{content:"\f16b"}.fa-stack-overflow:before{content:"\f16c"}.fa-instagram:before{content:"\f16d"}.fa-flickr:before{content:"\f16e"}.fa-adn:before{content:"\f170"}.fa-bitbucket:before{content:"\f171"}.fa-bitbucket-square:before{content:"\f172"}.fa-tumblr:before{content:"\f173"}.fa-tumblr-square:before{content:"\f174"}.fa-long-arrow-down:before{content:"\f175"}.fa-long-arrow-up:before{content:"\f176"}.fa-long-arrow-left:before{content:"\f177"}.fa-long-arrow-right:before{content:"\f178"}.fa-apple:before{content:"\f179"}.fa-windows:before{content:"\f17a"}.fa-android:before{content:"\f17b"}.fa-linux:before{content:"\f17c"}.fa-dribbble:before{content:"\f17d"}.fa-skype:before{content:"\f17e"}.fa-foursquare:before{content:"\f180"}.fa-trello:before{content:"\f181"}.fa-female:before{content:"\f182"}.fa-male:before{content:"\f183"}.fa-gittip:before,.fa-gratipay:before{content:"\f184"}.fa-sun-o:before{content:"\f185"}.fa-moon-o:before{content:"\f186"}.fa-archive:before{content:"\f187"}.fa-bug:before{content:"\f188"}.fa-vk:before{content:"\f189"}.fa-weibo:before{content:"\f18a"}.fa-renren:before{content:"\f18b"}.fa-pagelines:before{content:"\f18c"}.fa-stack-exchange:before{content:"\f18d"}.fa-arrow-circle-o-right:before{content:"\f18e"}.fa-arrow-circle-o-left:before{content:"\f190"}.fa-caret-square-o-left:before,.fa-toggle-left:before{content:"\f191"}.fa-dot-circle-o:before{content:"\f192"}.fa-wheelchair:before{content:"\f193"}.fa-vimeo-square:before{content:"\f194"}.fa-try:before,.fa-turkish-lira:before{content:"\f195"}.fa-plus-square-o:before{content:"\f196"}.fa-space-shuttle:before{content:"\f197"}.fa-slack:before{content:"\f198"}.fa-envelope-square:before{content:"\f199"}.fa-wordpress:before{content:"\f19a"}.fa-openid:before{content:"\f19b"}.fa-bank:before,.fa-institution:before,.fa-university:before{content:"\f19c"}.fa-graduation-cap:before,.fa-mortar-board:before{content:"\f19d"}.fa-yahoo:before{content:"\f19e"}.fa-google:before{content:"\f1a0"}.fa-reddit:before{content:"\f1a1"}.fa-reddit-square:before{content:"\f1a2"}.fa-stumbleupon-circle:before{content:"\f1a3"}.fa-stumbleupon:before{content:"\f1a4"}.fa-delicious:before{content:"\f1a5"}.fa-digg:before{content:"\f1a6"}.fa-pied-piper-pp:before{content:"\f1a7"}.fa-pied-piper-alt:before{content:"\f1a8"}.fa-drupal:before{content:"\f1a9"}.fa-joomla:before{content:"\f1aa"}.fa-language:before{content:"\f1ab"}.fa-fax:before{content:"\f1ac"}.fa-building:before{content:"\f1ad"}.fa-child:before{content:"\f1ae"}.fa-paw:before{content:"\f1b0"}.fa-spoon:before{content:"\f1b1"}.fa-cube:before{content:"\f1b2"}.fa-cubes:before{content:"\f1b3"}.fa-behance:before{content:"\f1b4"}.fa-behance-square:before{content:"\f1b5"}.fa-steam:before{content:"\f1b6"}.fa-steam-square:before{content:"\f1b7"}.fa-recycle:before{content:"\f1b8"}.fa-automobile:before,.fa-car:before{content:"\f1b9"}.fa-cab:before,.fa-taxi:before{content:"\f1ba"}.fa-tree:before{content:"\f1bb"}.fa-spotify:before{content:"\f1bc"}.fa-deviantart:before{content:"\f1bd"}.fa-soundcloud:before{content:"\f1be"}.fa-database:before{content:"\f1c0"}.fa-file-pdf-o:before{content:"\f1c1"}.fa-file-word-o:before{content:"\f1c2"}.fa-file-excel-o:before{content:"\f1c3"}.fa-file-powerpoint-o:before{content:"\f1c4"}.fa-file-image-o:before,.fa-file-photo-o:before,.fa-file-picture-o:before{content:"\f1c5"}.fa-file-archive-o:before,.fa-file-zip-o:before{content:"\f1c6"}.fa-file-audio-o:before,.fa-file-sound-o:before{content:"\f1c7"}.fa-file-movie-o:before,.fa-file-video-o:before{content:"\f1c8"}.fa-file-code-o:before{content:"\f1c9"}.fa-vine:before{content:"\f1ca"}.fa-codepen:before{content:"\f1cb"}.fa-jsfiddle:before{content:"\f1cc"}.fa-life-bouy:before,.fa-life-buoy:before,.fa-life-ring:before,.fa-life-saver:before,.fa-support:before{content:"\f1cd"}.fa-circle-o-notch:before{content:"\f1ce"}.fa-ra:before,.fa-rebel:before,.fa-resistance:before{content:"\f1d0"}.fa-empire:before,.fa-ge:before{content:"\f1d1"}.fa-git-square:before{content:"\f1d2"}.fa-git:before{content:"\f1d3"}.fa-hacker-news:before,.fa-y-combinator-square:before,.fa-yc-square:before{content:"\f1d4"}.fa-tencent-weibo:before{content:"\f1d5"}.fa-qq:before{content:"\f1d6"}.fa-wechat:before,.fa-weixin:before{content:"\f1d7"}.fa-paper-plane:before,.fa-send:before{content:"\f1d8"}.fa-paper-plane-o:before,.fa-send-o:before{content:"\f1d9"}.fa-history:before{content:"\f1da"}.fa-circle-thin:before{content:"\f1db"}.fa-header:before{content:"\f1dc"}.fa-paragraph:before{content:"\f1dd"}.fa-sliders:before{content:"\f1de"}.fa-share-alt:before{content:"\f1e0"}.fa-share-alt-square:before{content:"\f1e1"}.fa-bomb:before{content:"\f1e2"}.fa-futbol-o:before,.fa-soccer-ball-o:before{content:"\f1e3"}.fa-tty:before{content:"\f1e4"}.fa-binoculars:before{content:"\f1e5"}.fa-plug:before{content:"\f1e6"}.fa-slideshare:before{content:"\f1e7"}.fa-twitch:before{content:"\f1e8"}.fa-yelp:before{content:"\f1e9"}.fa-newspaper-o:before{content:"\f1ea"}.fa-wifi:before{content:"\f1eb"}.fa-calculator:before{content:"\f1ec"}.fa-paypal:before{content:"\f1ed"}.fa-google-wallet:before{content:"\f1ee"}.fa-cc-visa:before{content:"\f1f0"}.fa-cc-mastercard:before{content:"\f1f1"}.fa-cc-discover:before{content:"\f1f2"}.fa-cc-amex:before{content:"\f1f3"}.fa-cc-paypal:before{content:"\f1f4"}.fa-cc-stripe:before{content:"\f1f5"}.fa-bell-slash:before{content:"\f1f6"}.fa-bell-slash-o:before{content:"\f1f7"}.fa-trash:before{content:"\f1f8"}.fa-copyright:before{content:"\f1f9"}.fa-at:before{content:"\f1fa"}.fa-eyedropper:before{content:"\f1fb"}.fa-paint-brush:before{content:"\f1fc"}.fa-birthday-cake:before{content:"\f1fd"}.fa-area-chart:before{content:"\f1fe"}.fa-pie-chart:before{content:"\f200"}.fa-line-chart:before{content:"\f201"}.fa-lastfm:before{content:"\f202"}.fa-lastfm-square:before{content:"\f203"}.fa-toggle-off:before{content:"\f204"}.fa-toggle-on:before{content:"\f205"}.fa-bicycle:before{content:"\f206"}.fa-bus:before{content:"\f207"}.fa-ioxhost:before{content:"\f208"}.fa-angellist:before{content:"\f209"}.fa-cc:before{content:"\f20a"}.fa-ils:before,.fa-shekel:before,.fa-sheqel:before{content:"\f20b"}.fa-meanpath:before{content:"\f20c"}.fa-buysellads:before{content:"\f20d"}.fa-connectdevelop:before{content:"\f20e"}.fa-dashcube:before{content:"\f210"}.fa-forumbee:before{content:"\f211"}.fa-leanpub:before{content:"\f212"}.fa-sellsy:before{content:"\f213"}.fa-shirtsinbulk:before{content:"\f214"}.fa-simplybuilt:before{content:"\f215"}.fa-skyatlas:before{content:"\f216"}.fa-cart-plus:before{content:"\f217"}.fa-cart-arrow-down:before{content:"\f218"}.fa-diamond:before{content:"\f219"}.fa-ship:before{content:"\f21a"}.fa-user-secret:before{content:"\f21b"}.fa-motorcycle:before{content:"\f21c"}.fa-street-view:before{content:"\f21d"}.fa-heartbeat:before{content:"\f21e"}.fa-venus:before{content:"\f221"}.fa-mars:before{content:"\f222"}.fa-mercury:before{content:"\f223"}.fa-intersex:before,.fa-transgender:before{content:"\f224"}.fa-transgender-alt:before{content:"\f225"}.fa-venus-double:before{content:"\f226"}.fa-mars-double:before{content:"\f227"}.fa-venus-mars:before{content:"\f228"}.fa-mars-stroke:before{content:"\f229"}.fa-mars-stroke-v:before{content:"\f22a"}.fa-mars-stroke-h:before{content:"\f22b"}.fa-neuter:before{content:"\f22c"}.fa-genderless:before{content:"\f22d"}.fa-facebook-official:before{content:"\f230"}.fa-pinterest-p:before{content:"\f231"}.fa-whatsapp:before{content:"\f232"}.fa-server:before{content:"\f233"}.fa-user-plus:before{content:"\f234"}.fa-user-times:before{content:"\f235"}.fa-bed:before,.fa-hotel:before{content:"\f236"}.fa-viacoin:before{content:"\f237"}.fa-train:before{content:"\f238"}.fa-subway:before{content:"\f239"}.fa-medium:before{content:"\f23a"}.fa-y-combinator:before,.fa-yc:before{content:"\f23b"}.fa-optin-monster:before{content:"\f23c"}.fa-opencart:before{content:"\f23d"}.fa-expeditedssl:before{content:"\f23e"}.fa-battery-4:before,.fa-battery-full:before,.fa-battery:before{content:"\f240"}.fa-battery-3:before,.fa-battery-three-quarters:before{content:"\f241"}.fa-battery-2:before,.fa-battery-half:before{content:"\f242"}.fa-battery-1:before,.fa-battery-quarter:before{content:"\f243"}.fa-battery-0:before,.fa-battery-empty:before{content:"\f244"}.fa-mouse-pointer:before{content:"\f245"}.fa-i-cursor:before{content:"\f246"}.fa-object-group:before{content:"\f247"}.fa-object-ungroup:before{content:"\f248"}.fa-sticky-note:before{content:"\f249"}.fa-sticky-note-o:before{content:"\f24a"}.fa-cc-jcb:before{content:"\f24b"}.fa-cc-diners-club:before{content:"\f24c"}.fa-clone:before{content:"\f24d"}.fa-balance-scale:before{content:"\f24e"}.fa-hourglass-o:before{content:"\f250"}.fa-hourglass-1:before,.fa-hourglass-start:before{content:"\f251"}.fa-hourglass-2:before,.fa-hourglass-half:before{content:"\f252"}.fa-hourglass-3:before,.fa-hourglass-end:before{content:"\f253"}.fa-hourglass:before{content:"\f254"}.fa-hand-grab-o:before,.fa-hand-rock-o:before{content:"\f255"}.fa-hand-paper-o:before,.fa-hand-stop-o:before{content:"\f256"}.fa-hand-scissors-o:before{content:"\f257"}.fa-hand-lizard-o:before{content:"\f258"}.fa-hand-spock-o:before{content:"\f259"}.fa-hand-pointer-o:before{content:"\f25a"}.fa-hand-peace-o:before{content:"\f25b"}.fa-trademark:before{content:"\f25c"}.fa-registered:before{content:"\f25d"}.fa-creative-commons:before{content:"\f25e"}.fa-gg:before{content:"\f260"}.fa-gg-circle:before{content:"\f261"}.fa-tripadvisor:before{content:"\f262"}.fa-odnoklassniki:before{content:"\f263"}.fa-odnoklassniki-square:before{content:"\f264"}.fa-get-pocket:before{content:"\f265"}.fa-wikipedia-w:before{content:"\f266"}.fa-safari:before{content:"\f267"}.fa-chrome:before{content:"\f268"}.fa-firefox:before{content:"\f269"}.fa-opera:before{content:"\f26a"}.fa-internet-explorer:before{content:"\f26b"}.fa-television:before,.fa-tv:before{content:"\f26c"}.fa-contao:before{content:"\f26d"}.fa-500px:before{content:"\f26e"}.fa-amazon:before{content:"\f270"}.fa-calendar-plus-o:before{content:"\f271"}.fa-calendar-minus-o:before{content:"\f272"}.fa-calendar-times-o:before{content:"\f273"}.fa-calendar-check-o:before{content:"\f274"}.fa-industry:before{content:"\f275"}.fa-map-pin:before{content:"\f276"}.fa-map-signs:before{content:"\f277"}.fa-map-o:before{content:"\f278"}.fa-map:before{content:"\f279"}.fa-commenting:before{content:"\f27a"}.fa-commenting-o:before{content:"\f27b"}.fa-houzz:before{content:"\f27c"}.fa-vimeo:before{content:"\f27d"}.fa-black-tie:before{content:"\f27e"}.fa-fonticons:before{content:"\f280"}.fa-reddit-alien:before{content:"\f281"}.fa-edge:before{content:"\f282"}.fa-credit-card-alt:before{content:"\f283"}.fa-codiepie:before{content:"\f284"}.fa-modx:before{content:"\f285"}.fa-fort-awesome:before{content:"\f286"}.fa-usb:before{content:"\f287"}.fa-product-hunt:before{content:"\f288"}.fa-mixcloud:before{content:"\f289"}.fa-scribd:before{content:"\f28a"}.fa-pause-circle:before{content:"\f28b"}.fa-pause-circle-o:before{content:"\f28c"}.fa-stop-circle:before{content:"\f28d"}.fa-stop-circle-o:before{content:"\f28e"}.fa-shopping-bag:before{content:"\f290"}.fa-shopping-basket:before{content:"\f291"}.fa-hashtag:before{content:"\f292"}.fa-bluetooth:before{content:"\f293"}.fa-bluetooth-b:before{content:"\f294"}.fa-percent:before{content:"\f295"}.fa-gitlab:before{content:"\f296"}.fa-wpbeginner:before{content:"\f297"}.fa-wpforms:before{content:"\f298"}.fa-envira:before{content:"\f299"}.fa-universal-access:before{content:"\f29a"}.fa-wheelchair-alt:before{content:"\f29b"}.fa-question-circle-o:before{content:"\f29c"}.fa-blind:before{content:"\f29d"}.fa-audio-description:before{content:"\f29e"}.fa-volume-control-phone:before{content:"\f2a0"}.fa-braille:before{content:"\f2a1"}.fa-assistive-listening-systems:before{content:"\f2a2"}.fa-american-sign-language-interpreting:before,.fa-asl-interpreting:before{content:"\f2a3"}.fa-deaf:before,.fa-deafness:before,.fa-hard-of-hearing:before{content:"\f2a4"}.fa-glide:before{content:"\f2a5"}.fa-glide-g:before{content:"\f2a6"}.fa-sign-language:before,.fa-signing:before{content:"\f2a7"}.fa-low-vision:before{content:"\f2a8"}.fa-viadeo:before{content:"\f2a9"}.fa-viadeo-square:before{content:"\f2aa"}.fa-snapchat:before{content:"\f2ab"}.fa-snapchat-ghost:before{content:"\f2ac"}.fa-snapchat-square:before{content:"\f2ad"}.fa-pied-piper:before{content:"\f2ae"}.fa-first-order:before{content:"\f2b0"}.fa-yoast:before{content:"\f2b1"}.fa-themeisle:before{content:"\f2b2"}.fa-google-plus-circle:before,.fa-google-plus-official:before{content:"\f2b3"}.fa-fa:before,.fa-font-awesome:before{content:"\f2b4"}.fa-handshake-o:before{content:"\f2b5"}.fa-envelope-open:before{content:"\f2b6"}.fa-envelope-open-o:before{content:"\f2b7"}.fa-linode:before{content:"\f2b8"}.fa-address-book:before{content:"\f2b9"}.fa-address-book-o:before{content:"\f2ba"}.fa-address-card:before,.fa-vcard:before{content:"\f2bb"}.fa-address-card-o:before,.fa-vcard-o:before{content:"\f2bc"}.fa-user-circle:before{content:"\f2bd"}.fa-user-circle-o:before{content:"\f2be"}.fa-user-o:before{content:"\f2c0"}.fa-id-badge:before{content:"\f2c1"}.fa-drivers-license:before,.fa-id-card:before{content:"\f2c2"}.fa-drivers-license-o:before,.fa-id-card-o:before{content:"\f2c3"}.fa-quora:before{content:"\f2c4"}.fa-free-code-camp:before{content:"\f2c5"}.fa-telegram:before{content:"\f2c6"}.fa-thermometer-4:before,.fa-thermometer-full:before,.fa-thermometer:before{content:"\f2c7"}.fa-thermometer-3:before,.fa-thermometer-three-quarters:before{content:"\f2c8"}.fa-thermometer-2:before,.fa-thermometer-half:before{content:"\f2c9"}.fa-thermometer-1:before,.fa-thermometer-quarter:before{content:"\f2ca"}.fa-thermometer-0:before,.fa-thermometer-empty:before{content:"\f2cb"}.fa-shower:before{content:"\f2cc"}.fa-bath:before,.fa-bathtub:before,.fa-s15:before{content:"\f2cd"}.fa-podcast:before{content:"\f2ce"}.fa-window-maximize:before{content:"\f2d0"}.fa-window-minimize:before{content:"\f2d1"}.fa-window-restore:before{content:"\f2d2"}.fa-times-rectangle:before,.fa-window-close:before{content:"\f2d3"}.fa-times-rectangle-o:before,.fa-window-close-o:before{content:"\f2d4"}.fa-bandcamp:before{content:"\f2d5"}.fa-grav:before{content:"\f2d6"}.fa-etsy:before{content:"\f2d7"}.fa-imdb:before{content:"\f2d8"}.fa-ravelry:before{content:"\f2d9"}.fa-eercast:before{content:"\f2da"}.fa-microchip:before{content:"\f2db"}.fa-snowflake-o:before{content:"\f2dc"}.fa-superpowers:before{content:"\f2dd"}.fa-wpexplorer:before{content:"\f2de"}.fa-meetup:before{content:"\f2e0"}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);border:0}.sr-only-focusable:active,.sr-only-focusable:focus{position:static;width:auto;height:auto;margin:0;overflow:visible;clip:auto}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fcarousel%2Ftemp%2Fjs%2Fjquery-1.11.0.min.js</url>
    <content type="text"><![CDATA[/*! jQuery v1.11.0 | (c) 2005, 2014 jQuery Foundation, Inc. | jquery.org/license */ !function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k="".trim,l={},m="1.11.0",n=function(a,b){return new n.fn.init(a,b)},o=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,p=/^-ms-/,q=/-([\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:"",length:0,toArray:function(){return d.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:d.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a,b){return n.each(this,a,b)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(e=arguments[h]))for(d in e)a=g[d],c=e[d],g!==c&&(j&&c&&(n.isPlainObject(c)||(b=n.isArray(c)))?(b?(b=!1,f=a&&n.isArray(a)?a:[]):f=a&&n.isPlainObject(a)?a:{},g[d]=n.extend(j,f,c)):void 0!==c&&(g[d]=c));return g},n.extend({expando:"jQuery"+(m+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===n.type(a)},isArray:Array.isArray||function(a){return"array"===n.type(a)},isWindow:function(a){return null!=a&&a==a.window},isNumeric:function(a){return a-parseFloat(a)>=0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},isPlainObject:function(a){var b;if(!a||"object"!==n.type(a)||a.nodeType||n.isWindow(a))return!1;try{if(a.constructor&&!j.call(a,"constructor")&&!j.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(c){return!1}if(l.ownLast)for(b in a)return j.call(a,b);for(b in a);return void 0===b||j.call(a,b)},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?h[i.call(a)]||"object":typeof a},globalEval:function(b){b&&n.trim(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(p,"ms-").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b,c){var d,e=0,f=a.length,g=s(a);if(c){if(g){for(;f>e;e++)if(d=b.apply(a[e],c),d===!1)break}else for(e in a)if(d=b.apply(a[e],c),d===!1)break}else if(g){for(;f>e;e++)if(d=b.call(a[e],e,a[e]),d===!1)break}else for(e in a)if(d=b.call(a[e],e,a[e]),d===!1)break;return a},trim:k&&!k.call("\ufeff\xa0")?function(a){return null==a?"":k.call(a)}:function(a){return null==a?"":(a+"").replace(o,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,"string"==typeof a?[a]:a):f.call(c,a)),c},inArray:function(a,b,c){var d;if(b){if(g)return g.call(b,a,c);for(d=b.length,c=c?0>c?Math.max(0,d+c):c:0;d>c;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,b){var c=+b.length,d=0,e=a.length;while(c>d)a[e++]=b[d++];if(c!==c)while(void 0!==b[d])a[e++]=b[d++];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,f=0,g=a.length,h=s(a),i=[];if(h)for(;g>f;f++)d=b(a[f],f,c),null!=d&&i.push(d);else for(f in a)d=b(a[f],f,c),null!=d&&i.push(d);return e.apply([],i)},guid:1,proxy:function(a,b){var c,e,f;return"string"==typeof b&&(f=a[b],b=a,a=f),n.isFunction(a)?(c=d.call(arguments,2),e=function(){return a.apply(b||this,c.concat(d.call(arguments)))},e.guid=a.guid=a.guid||n.guid++,e):void 0},now:function(){return+new Date},support:l}),n.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(a,b){h["[object "+b+"]"]=b.toLowerCase()});function s(a){var b=a.length,c=n.type(a);return"function"===c||n.isWindow(a)?!1:1===a.nodeType&&b?!0:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s="sizzle"+-new Date,t=a.document,u=0,v=0,w=eb(),x=eb(),y=eb(),z=function(a,b){return a===b&&(j=!0),0},A="undefined",B=1]]></content>
  </entry>
</search>
